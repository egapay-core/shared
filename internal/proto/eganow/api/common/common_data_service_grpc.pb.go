// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/common/common_data_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommonDataSvc_GetCountries_FullMethodName = "/eganow.api.common.CommonDataSvc/GetCountries"
)

// CommonDataSvcClient is the client API for CommonDataSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonDataSvcClient interface {
	// get countries list
	GetCountries(ctx context.Context, in *GetCountriesRequest, opts ...grpc.CallOption) (*GetCountriesResponse, error)
}

type commonDataSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonDataSvcClient(cc grpc.ClientConnInterface) CommonDataSvcClient {
	return &commonDataSvcClient{cc}
}

func (c *commonDataSvcClient) GetCountries(ctx context.Context, in *GetCountriesRequest, opts ...grpc.CallOption) (*GetCountriesResponse, error) {
	out := new(GetCountriesResponse)
	err := c.cc.Invoke(ctx, CommonDataSvc_GetCountries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonDataSvcServer is the server API for CommonDataSvc service.
// All implementations must embed UnimplementedCommonDataSvcServer
// for forward compatibility
type CommonDataSvcServer interface {
	// get countries list
	GetCountries(context.Context, *GetCountriesRequest) (*GetCountriesResponse, error)
	mustEmbedUnimplementedCommonDataSvcServer()
}

// UnimplementedCommonDataSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCommonDataSvcServer struct {
}

func (UnimplementedCommonDataSvcServer) GetCountries(context.Context, *GetCountriesRequest) (*GetCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountries not implemented")
}
func (UnimplementedCommonDataSvcServer) mustEmbedUnimplementedCommonDataSvcServer() {}

// UnsafeCommonDataSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonDataSvcServer will
// result in compilation errors.
type UnsafeCommonDataSvcServer interface {
	mustEmbedUnimplementedCommonDataSvcServer()
}

func RegisterCommonDataSvcServer(s grpc.ServiceRegistrar, srv CommonDataSvcServer) {
	s.RegisterService(&CommonDataSvc_ServiceDesc, srv)
}

func _CommonDataSvc_GetCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonDataSvcServer).GetCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonDataSvc_GetCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonDataSvcServer).GetCountries(ctx, req.(*GetCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonDataSvc_ServiceDesc is the grpc.ServiceDesc for CommonDataSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonDataSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.common.CommonDataSvc",
	HandlerType: (*CommonDataSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCountries",
			Handler:    _CommonDataSvc_GetCountries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/common/common_data_service.proto",
}

const (
	CommonPaymentDataSvc_GetPaymentTypes_FullMethodName = "/eganow.api.common.CommonPaymentDataSvc/GetPaymentTypes"
)

// CommonPaymentDataSvcClient is the client API for CommonPaymentDataSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonPaymentDataSvcClient interface {
	GetPaymentTypes(ctx context.Context, in *GetPaymentTypesRequest, opts ...grpc.CallOption) (*GetPaymentTypesResponse, error)
}

type commonPaymentDataSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonPaymentDataSvcClient(cc grpc.ClientConnInterface) CommonPaymentDataSvcClient {
	return &commonPaymentDataSvcClient{cc}
}

func (c *commonPaymentDataSvcClient) GetPaymentTypes(ctx context.Context, in *GetPaymentTypesRequest, opts ...grpc.CallOption) (*GetPaymentTypesResponse, error) {
	out := new(GetPaymentTypesResponse)
	err := c.cc.Invoke(ctx, CommonPaymentDataSvc_GetPaymentTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonPaymentDataSvcServer is the server API for CommonPaymentDataSvc service.
// All implementations must embed UnimplementedCommonPaymentDataSvcServer
// for forward compatibility
type CommonPaymentDataSvcServer interface {
	GetPaymentTypes(context.Context, *GetPaymentTypesRequest) (*GetPaymentTypesResponse, error)
	mustEmbedUnimplementedCommonPaymentDataSvcServer()
}

// UnimplementedCommonPaymentDataSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCommonPaymentDataSvcServer struct {
}

func (UnimplementedCommonPaymentDataSvcServer) GetPaymentTypes(context.Context, *GetPaymentTypesRequest) (*GetPaymentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentTypes not implemented")
}
func (UnimplementedCommonPaymentDataSvcServer) mustEmbedUnimplementedCommonPaymentDataSvcServer() {}

// UnsafeCommonPaymentDataSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonPaymentDataSvcServer will
// result in compilation errors.
type UnsafeCommonPaymentDataSvcServer interface {
	mustEmbedUnimplementedCommonPaymentDataSvcServer()
}

func RegisterCommonPaymentDataSvcServer(s grpc.ServiceRegistrar, srv CommonPaymentDataSvcServer) {
	s.RegisterService(&CommonPaymentDataSvc_ServiceDesc, srv)
}

func _CommonPaymentDataSvc_GetPaymentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonPaymentDataSvcServer).GetPaymentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonPaymentDataSvc_GetPaymentTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonPaymentDataSvcServer).GetPaymentTypes(ctx, req.(*GetPaymentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonPaymentDataSvc_ServiceDesc is the grpc.ServiceDesc for CommonPaymentDataSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonPaymentDataSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.common.CommonPaymentDataSvc",
	HandlerType: (*CommonPaymentDataSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaymentTypes",
			Handler:    _CommonPaymentDataSvc_GetPaymentTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/common/common_data_service.proto",
}
