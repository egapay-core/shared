// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/merchant/account_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MerchantAccountSvc_GetBusinessInfo_FullMethodName             = "/eganow.api.merchant.MerchantAccountSvc/GetBusinessInfo"
	MerchantAccountSvc_UpdateBusinessInfo_FullMethodName          = "/eganow.api.merchant.MerchantAccountSvc/UpdateBusinessInfo"
	MerchantAccountSvc_UpdateBusinessContactInfo_FullMethodName   = "/eganow.api.merchant.MerchantAccountSvc/UpdateBusinessContactInfo"
	MerchantAccountSvc_GetBusinessContactInfo_FullMethodName      = "/eganow.api.merchant.MerchantAccountSvc/GetBusinessContactInfo"
	MerchantAccountSvc_AddBusinessContactPerson_FullMethodName    = "/eganow.api.merchant.MerchantAccountSvc/AddBusinessContactPerson"
	MerchantAccountSvc_UpdateBusinessContactPerson_FullMethodName = "/eganow.api.merchant.MerchantAccountSvc/UpdateBusinessContactPerson"
	MerchantAccountSvc_DeleteBusinessContactPerson_FullMethodName = "/eganow.api.merchant.MerchantAccountSvc/DeleteBusinessContactPerson"
	MerchantAccountSvc_ListBusinessContactPersons_FullMethodName  = "/eganow.api.merchant.MerchantAccountSvc/ListBusinessContactPersons"
	MerchantAccountSvc_AddDirectorShareholder_FullMethodName      = "/eganow.api.merchant.MerchantAccountSvc/AddDirectorShareholder"
	MerchantAccountSvc_UpdateDirectorShareholder_FullMethodName   = "/eganow.api.merchant.MerchantAccountSvc/UpdateDirectorShareholder"
	MerchantAccountSvc_DeleteDirectorShareholder_FullMethodName   = "/eganow.api.merchant.MerchantAccountSvc/DeleteDirectorShareholder"
	MerchantAccountSvc_ListDirectorShareholders_FullMethodName    = "/eganow.api.merchant.MerchantAccountSvc/ListDirectorShareholders"
	MerchantAccountSvc_AddBusinessDocument_FullMethodName         = "/eganow.api.merchant.MerchantAccountSvc/AddBusinessDocument"
	MerchantAccountSvc_UpdateBusinessDocument_FullMethodName      = "/eganow.api.merchant.MerchantAccountSvc/UpdateBusinessDocument"
	MerchantAccountSvc_DeleteBusinessDocument_FullMethodName      = "/eganow.api.merchant.MerchantAccountSvc/DeleteBusinessDocument"
	MerchantAccountSvc_ListBusinessDocuments_FullMethodName       = "/eganow.api.merchant.MerchantAccountSvc/ListBusinessDocuments"
)

// MerchantAccountSvcClient is the client API for MerchantAccountSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantAccountSvcClient interface {
	// GetBusinessInfo is a remote procedure call (RPC) that retrieves business information for a merchant.
	// It takes a MerchantEmpty message as input and returns a BusinessInfoResponse message.
	// The BusinessInfoResponse message will contain the business information of the merchant.
	//
	// This RPC is accessible via a HTTP GET request to the "/api/v1/merchants/accounts/info" endpoint.
	GetBusinessInfo(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*BusinessInfoResponse, error)
	// UpdateBusinessInfo is a remote procedure call (RPC) that updates business information for a merchant.
	// It takes an UpdateBusinessInfoRequest message as input and returns a MerchantStringValue message.
	// The UpdateBusinessInfoRequest message should contain the necessary information to update a business for a merchant.
	// The MerchantStringValue message will contain the result of the update operation.
	//
	// This RPC is accessible via a HTTP PUT request to the "/api/v1/merchants/accounts/info" endpoint.
	// The body of the HTTP request should contain the UpdateBusinessInfoRequest message.
	UpdateBusinessInfo(ctx context.Context, in *UpdateBusinessInfoRequest, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// UpdateBusinessContactInfo is a remote procedure call (RPC) that updates a merchant's business information.
	// It takes an UpdateBusinessInfoRequest message as input and returns a MerchantStringValue message.
	// The UpdateBusinessInfoRequest message should contain the necessary information to update a merchant's business information.
	// The MerchantStringValue message will contain the result of the update operation.
	//
	// This RPC is accessible via a HTTP PUT request to the "/api/v1/merchants/accounts/info" endpoint.
	// The body of the HTTP request should contain the UpdateBusinessInfoRequest message.
	UpdateBusinessContactInfo(ctx context.Context, in *UpdateBusinessContactInfoRequest, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// GetBusinessContactInfo is a remote procedure call (RPC) that retrieves a merchant's business information.
	// The returned BusinessInfoResponse message will contain the business information.
	//
	// This RPC is accessible via a HTTP GET request to the "/api/v1/merchants/accounts/info/{value}" endpoint.
	// The {value} in the URL should be replaced with the actual value from the MerchantStringValue message.
	GetBusinessContactInfo(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*BusinessContactInfoResponse, error)
	// AddBusinessContactPerson is a remote procedure call (RPC) that adds a contact person to a merchant's business.
	// It takes an AddBusinessContactRequest message as input and returns a MerchantStringValue message.
	// The AddBusinessContactRequest message should contain the necessary information to add a contact person to a merchant's business.
	// The MerchantStringValue message will contain the result of the add operation.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/accounts/contact-person" endpoint.
	// The body of the HTTP request should contain the AddBusinessContactPersonRequest message.
	AddBusinessContactPerson(ctx context.Context, in *AddBusinessContactPersonRequest, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// UpdateBusinessContactPerson is a remote procedure call (RPC) that updates a contact person's information in a merchant's business.
	// It takes an UpdateBusinessContactRequest message as input and returns a MerchantStringValue message.
	// The UpdateBusinessContactRequest message should contain the necessary information to update a contact person's information in a merchant's business.
	// The MerchantStringValue message will contain the result of the update operation.
	//
	// This RPC is accessible via a HTTP PUT request to the "/api/v1/merchants/accounts/contact-person" endpoint.
	// The body of the HTTP request should contain the UpdateBusinessContactPersonRequest message.
	UpdateBusinessContactPerson(ctx context.Context, in *UpdateBusinessContactPersonRequest, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// DeleteBusinessContactPerson is a remote procedure call (RPC) that deletes a contact person from a merchant's business.
	// The returned MerchantStringValue message will contain the result of the delete operation.
	//
	// This RPC is accessible via a HTTP DELETE request to the "/api/v1/merchants/accounts/contact-person" endpoint.
	// The body of the HTTP request should contain the MerchantStringValue message.
	DeleteBusinessContactPerson(ctx context.Context, in *MerchantStringValue, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// ListBusinessContactPersons is a remote procedure call (RPC) that retrieves a list of contact persons for a merchant's business.
	// It takes a MerchantEmpty message as input and returns a BusinessContactListResponse message.
	// The returned BusinessContactListResponse message will contain the list of contact persons.
	//
	// This RPC is accessible via a HTTP GET request to the "/api/v1/merchants/accounts/contact-person" endpoint.
	// The {value} in the URL should be replaced with the actual value from the MerchantStringValue message.
	ListBusinessContactPersons(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*BusinessContactListResponse, error)
	// AddDirectorShareholder is a remote procedure call (RPC) that adds a director or shareholder to a merchant's business.
	// It takes an AddDirectorShareholderRequest message as input and returns a MerchantStringValue message.
	// The AddDirectorShareholderRequest message should contain the necessary information to add a director or shareholder to a merchant's business.
	// The MerchantStringValue message will contain the result of the add operation.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/accounts/director-shareholder" endpoint.
	// The body of the HTTP request should contain the AddDirectorShareholderRequest message.
	AddDirectorShareholder(ctx context.Context, in *AddDirectorShareholderRequest, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// UpdateDirectorShareholder is a remote procedure call (RPC) that updates a director or shareholder in a merchant's business.
	// It takes an UpdateDirectorShareholderRequest message as input and returns a MerchantStringValue message.
	// The UpdateDirectorShareholderRequest message should contain the necessary information to update a director or shareholder in a merchant's business.
	// The MerchantStringValue message will contain the result of the update operation.
	//
	// This RPC is accessible via a HTTP PUT request to the "/api/v1/merchants/accounts/director-shareholder" endpoint.
	// The body of the HTTP request should contain the UpdateDirectorShareholderRequest message.
	UpdateDirectorShareholder(ctx context.Context, in *UpdateDirectorShareholderRequest, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// DeleteDirectorShareholder is a remote procedure call (RPC) that deletes a director or shareholder from a merchant's business.
	// It takes a MerchantStringValue message as input and returns a MerchantStringValue message.
	// The MerchantStringValue message should contain the necessary information to delete a director or shareholder from a merchant's business.
	// The returned MerchantStringValue message will contain the result of the delete operation.
	//
	// This RPC is accessible via a HTTP DELETE request to the "/api/v1/merchants/accounts/director-shareholder/{value}" endpoint.
	// The {value} in the URL should be replaced with the actual value from the MerchantStringValue message.
	DeleteDirectorShareholder(ctx context.Context, in *MerchantStringValue, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// ListDirectorShareholders is a remote procedure call (RPC) that retrieves a list of directors or shareholders from a merchant's business.
	// It takes a MerchantEmpty message as input and returns a DirectorShareholderListResponse message.
	// The DirectorShareholderListResponse message will contain the list of directors or shareholders.
	//
	// This RPC is accessible via a HTTP GET request to the "/api/v1/merchants/accounts/director-shareholder" endpoint.
	ListDirectorShareholders(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*DirectorShareholderListResponse, error)
	// AddBusinessDocument is a remote procedure call (RPC) that adds a business document to a merchant's account.
	// It takes an AddBusinessDocumentRequest message as input and returns a MerchantStringValue message.
	// The AddBusinessDocumentRequest message should contain the necessary information to add a business document to a merchant's account.
	// The MerchantStringValue message will contain the result of the add operation.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/accounts/documents" endpoint.
	// The body of the HTTP request should contain the AddBusinessDocumentRequest message.
	AddBusinessDocument(ctx context.Context, in *AddBusinessDocumentRequest, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// UpdateBusinessDocument is a remote procedure call (RPC) that updates a business document in a merchant's account.
	// It takes an UpdateBusinessDocumentRequest message as input and returns a MerchantStringValue message.
	// The UpdateBusinessDocumentRequest message should contain the necessary information to update a business document in a merchant's account.
	// The MerchantStringValue message will contain the result of the update operation.
	//
	// This RPC is accessible via a HTTP PUT request to the "/api/v1/merchants/accounts/documents" endpoint.
	// The body of the HTTP request should contain the UpdateBusinessDocumentRequest message.
	UpdateBusinessDocument(ctx context.Context, in *UpdateBusinessDocumentRequest, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// DeleteBusinessDocument is a remote procedure call (RPC) that deletes a business document from a merchant's account.
	// It takes a MerchantIntValue message as input and returns a MerchantStringValue message.
	// The MerchantIntValue message should contain the necessary information to delete a business document from a merchant's account.
	// The returned MerchantStringValue message will contain the result of the delete operation.
	//
	// This RPC is accessible via a HTTP DELETE request to the "/api/v1/merchants/accounts/documents/{value}" endpoint.
	// The {value} in the URL should be replaced with the actual value from the MerchantIntValue message.
	DeleteBusinessDocument(ctx context.Context, in *MerchantIntValue, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// ListBusinessDocuments is a remote procedure call (RPC) that retrieves a list of business documents from a merchant's account.
	// It takes a MerchantEmpty message as input and returns a BusinessDocumentListResponse message.
	// The BusinessDocumentListResponse message will contain the list of business documents.
	//
	// This RPC is accessible via a HTTP GET request to the "/api/v1/merchants/accounts/documents" endpoint.
	ListBusinessDocuments(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*BusinessDocumentListResponse, error)
}

type merchantAccountSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantAccountSvcClient(cc grpc.ClientConnInterface) MerchantAccountSvcClient {
	return &merchantAccountSvcClient{cc}
}

func (c *merchantAccountSvcClient) GetBusinessInfo(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*BusinessInfoResponse, error) {
	out := new(BusinessInfoResponse)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_GetBusinessInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) UpdateBusinessInfo(ctx context.Context, in *UpdateBusinessInfoRequest, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_UpdateBusinessInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) UpdateBusinessContactInfo(ctx context.Context, in *UpdateBusinessContactInfoRequest, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_UpdateBusinessContactInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) GetBusinessContactInfo(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*BusinessContactInfoResponse, error) {
	out := new(BusinessContactInfoResponse)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_GetBusinessContactInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) AddBusinessContactPerson(ctx context.Context, in *AddBusinessContactPersonRequest, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_AddBusinessContactPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) UpdateBusinessContactPerson(ctx context.Context, in *UpdateBusinessContactPersonRequest, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_UpdateBusinessContactPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) DeleteBusinessContactPerson(ctx context.Context, in *MerchantStringValue, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_DeleteBusinessContactPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) ListBusinessContactPersons(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*BusinessContactListResponse, error) {
	out := new(BusinessContactListResponse)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_ListBusinessContactPersons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) AddDirectorShareholder(ctx context.Context, in *AddDirectorShareholderRequest, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_AddDirectorShareholder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) UpdateDirectorShareholder(ctx context.Context, in *UpdateDirectorShareholderRequest, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_UpdateDirectorShareholder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) DeleteDirectorShareholder(ctx context.Context, in *MerchantStringValue, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_DeleteDirectorShareholder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) ListDirectorShareholders(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*DirectorShareholderListResponse, error) {
	out := new(DirectorShareholderListResponse)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_ListDirectorShareholders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) AddBusinessDocument(ctx context.Context, in *AddBusinessDocumentRequest, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_AddBusinessDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) UpdateBusinessDocument(ctx context.Context, in *UpdateBusinessDocumentRequest, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_UpdateBusinessDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) DeleteBusinessDocument(ctx context.Context, in *MerchantIntValue, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_DeleteBusinessDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAccountSvcClient) ListBusinessDocuments(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*BusinessDocumentListResponse, error) {
	out := new(BusinessDocumentListResponse)
	err := c.cc.Invoke(ctx, MerchantAccountSvc_ListBusinessDocuments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantAccountSvcServer is the server API for MerchantAccountSvc service.
// All implementations must embed UnimplementedMerchantAccountSvcServer
// for forward compatibility
type MerchantAccountSvcServer interface {
	// GetBusinessInfo is a remote procedure call (RPC) that retrieves business information for a merchant.
	// It takes a MerchantEmpty message as input and returns a BusinessInfoResponse message.
	// The BusinessInfoResponse message will contain the business information of the merchant.
	//
	// This RPC is accessible via a HTTP GET request to the "/api/v1/merchants/accounts/info" endpoint.
	GetBusinessInfo(context.Context, *MerchantEmpty) (*BusinessInfoResponse, error)
	// UpdateBusinessInfo is a remote procedure call (RPC) that updates business information for a merchant.
	// It takes an UpdateBusinessInfoRequest message as input and returns a MerchantStringValue message.
	// The UpdateBusinessInfoRequest message should contain the necessary information to update a business for a merchant.
	// The MerchantStringValue message will contain the result of the update operation.
	//
	// This RPC is accessible via a HTTP PUT request to the "/api/v1/merchants/accounts/info" endpoint.
	// The body of the HTTP request should contain the UpdateBusinessInfoRequest message.
	UpdateBusinessInfo(context.Context, *UpdateBusinessInfoRequest) (*MerchantStringValue, error)
	// UpdateBusinessContactInfo is a remote procedure call (RPC) that updates a merchant's business information.
	// It takes an UpdateBusinessInfoRequest message as input and returns a MerchantStringValue message.
	// The UpdateBusinessInfoRequest message should contain the necessary information to update a merchant's business information.
	// The MerchantStringValue message will contain the result of the update operation.
	//
	// This RPC is accessible via a HTTP PUT request to the "/api/v1/merchants/accounts/info" endpoint.
	// The body of the HTTP request should contain the UpdateBusinessInfoRequest message.
	UpdateBusinessContactInfo(context.Context, *UpdateBusinessContactInfoRequest) (*MerchantStringValue, error)
	// GetBusinessContactInfo is a remote procedure call (RPC) that retrieves a merchant's business information.
	// The returned BusinessInfoResponse message will contain the business information.
	//
	// This RPC is accessible via a HTTP GET request to the "/api/v1/merchants/accounts/info/{value}" endpoint.
	// The {value} in the URL should be replaced with the actual value from the MerchantStringValue message.
	GetBusinessContactInfo(context.Context, *MerchantEmpty) (*BusinessContactInfoResponse, error)
	// AddBusinessContactPerson is a remote procedure call (RPC) that adds a contact person to a merchant's business.
	// It takes an AddBusinessContactRequest message as input and returns a MerchantStringValue message.
	// The AddBusinessContactRequest message should contain the necessary information to add a contact person to a merchant's business.
	// The MerchantStringValue message will contain the result of the add operation.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/accounts/contact-person" endpoint.
	// The body of the HTTP request should contain the AddBusinessContactPersonRequest message.
	AddBusinessContactPerson(context.Context, *AddBusinessContactPersonRequest) (*MerchantStringValue, error)
	// UpdateBusinessContactPerson is a remote procedure call (RPC) that updates a contact person's information in a merchant's business.
	// It takes an UpdateBusinessContactRequest message as input and returns a MerchantStringValue message.
	// The UpdateBusinessContactRequest message should contain the necessary information to update a contact person's information in a merchant's business.
	// The MerchantStringValue message will contain the result of the update operation.
	//
	// This RPC is accessible via a HTTP PUT request to the "/api/v1/merchants/accounts/contact-person" endpoint.
	// The body of the HTTP request should contain the UpdateBusinessContactPersonRequest message.
	UpdateBusinessContactPerson(context.Context, *UpdateBusinessContactPersonRequest) (*MerchantStringValue, error)
	// DeleteBusinessContactPerson is a remote procedure call (RPC) that deletes a contact person from a merchant's business.
	// The returned MerchantStringValue message will contain the result of the delete operation.
	//
	// This RPC is accessible via a HTTP DELETE request to the "/api/v1/merchants/accounts/contact-person" endpoint.
	// The body of the HTTP request should contain the MerchantStringValue message.
	DeleteBusinessContactPerson(context.Context, *MerchantStringValue) (*MerchantStringValue, error)
	// ListBusinessContactPersons is a remote procedure call (RPC) that retrieves a list of contact persons for a merchant's business.
	// It takes a MerchantEmpty message as input and returns a BusinessContactListResponse message.
	// The returned BusinessContactListResponse message will contain the list of contact persons.
	//
	// This RPC is accessible via a HTTP GET request to the "/api/v1/merchants/accounts/contact-person" endpoint.
	// The {value} in the URL should be replaced with the actual value from the MerchantStringValue message.
	ListBusinessContactPersons(context.Context, *MerchantEmpty) (*BusinessContactListResponse, error)
	// AddDirectorShareholder is a remote procedure call (RPC) that adds a director or shareholder to a merchant's business.
	// It takes an AddDirectorShareholderRequest message as input and returns a MerchantStringValue message.
	// The AddDirectorShareholderRequest message should contain the necessary information to add a director or shareholder to a merchant's business.
	// The MerchantStringValue message will contain the result of the add operation.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/accounts/director-shareholder" endpoint.
	// The body of the HTTP request should contain the AddDirectorShareholderRequest message.
	AddDirectorShareholder(context.Context, *AddDirectorShareholderRequest) (*MerchantStringValue, error)
	// UpdateDirectorShareholder is a remote procedure call (RPC) that updates a director or shareholder in a merchant's business.
	// It takes an UpdateDirectorShareholderRequest message as input and returns a MerchantStringValue message.
	// The UpdateDirectorShareholderRequest message should contain the necessary information to update a director or shareholder in a merchant's business.
	// The MerchantStringValue message will contain the result of the update operation.
	//
	// This RPC is accessible via a HTTP PUT request to the "/api/v1/merchants/accounts/director-shareholder" endpoint.
	// The body of the HTTP request should contain the UpdateDirectorShareholderRequest message.
	UpdateDirectorShareholder(context.Context, *UpdateDirectorShareholderRequest) (*MerchantStringValue, error)
	// DeleteDirectorShareholder is a remote procedure call (RPC) that deletes a director or shareholder from a merchant's business.
	// It takes a MerchantStringValue message as input and returns a MerchantStringValue message.
	// The MerchantStringValue message should contain the necessary information to delete a director or shareholder from a merchant's business.
	// The returned MerchantStringValue message will contain the result of the delete operation.
	//
	// This RPC is accessible via a HTTP DELETE request to the "/api/v1/merchants/accounts/director-shareholder/{value}" endpoint.
	// The {value} in the URL should be replaced with the actual value from the MerchantStringValue message.
	DeleteDirectorShareholder(context.Context, *MerchantStringValue) (*MerchantStringValue, error)
	// ListDirectorShareholders is a remote procedure call (RPC) that retrieves a list of directors or shareholders from a merchant's business.
	// It takes a MerchantEmpty message as input and returns a DirectorShareholderListResponse message.
	// The DirectorShareholderListResponse message will contain the list of directors or shareholders.
	//
	// This RPC is accessible via a HTTP GET request to the "/api/v1/merchants/accounts/director-shareholder" endpoint.
	ListDirectorShareholders(context.Context, *MerchantEmpty) (*DirectorShareholderListResponse, error)
	// AddBusinessDocument is a remote procedure call (RPC) that adds a business document to a merchant's account.
	// It takes an AddBusinessDocumentRequest message as input and returns a MerchantStringValue message.
	// The AddBusinessDocumentRequest message should contain the necessary information to add a business document to a merchant's account.
	// The MerchantStringValue message will contain the result of the add operation.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/accounts/documents" endpoint.
	// The body of the HTTP request should contain the AddBusinessDocumentRequest message.
	AddBusinessDocument(context.Context, *AddBusinessDocumentRequest) (*MerchantStringValue, error)
	// UpdateBusinessDocument is a remote procedure call (RPC) that updates a business document in a merchant's account.
	// It takes an UpdateBusinessDocumentRequest message as input and returns a MerchantStringValue message.
	// The UpdateBusinessDocumentRequest message should contain the necessary information to update a business document in a merchant's account.
	// The MerchantStringValue message will contain the result of the update operation.
	//
	// This RPC is accessible via a HTTP PUT request to the "/api/v1/merchants/accounts/documents" endpoint.
	// The body of the HTTP request should contain the UpdateBusinessDocumentRequest message.
	UpdateBusinessDocument(context.Context, *UpdateBusinessDocumentRequest) (*MerchantStringValue, error)
	// DeleteBusinessDocument is a remote procedure call (RPC) that deletes a business document from a merchant's account.
	// It takes a MerchantIntValue message as input and returns a MerchantStringValue message.
	// The MerchantIntValue message should contain the necessary information to delete a business document from a merchant's account.
	// The returned MerchantStringValue message will contain the result of the delete operation.
	//
	// This RPC is accessible via a HTTP DELETE request to the "/api/v1/merchants/accounts/documents/{value}" endpoint.
	// The {value} in the URL should be replaced with the actual value from the MerchantIntValue message.
	DeleteBusinessDocument(context.Context, *MerchantIntValue) (*MerchantStringValue, error)
	// ListBusinessDocuments is a remote procedure call (RPC) that retrieves a list of business documents from a merchant's account.
	// It takes a MerchantEmpty message as input and returns a BusinessDocumentListResponse message.
	// The BusinessDocumentListResponse message will contain the list of business documents.
	//
	// This RPC is accessible via a HTTP GET request to the "/api/v1/merchants/accounts/documents" endpoint.
	ListBusinessDocuments(context.Context, *MerchantEmpty) (*BusinessDocumentListResponse, error)
	mustEmbedUnimplementedMerchantAccountSvcServer()
}

// UnimplementedMerchantAccountSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMerchantAccountSvcServer struct {
}

func (UnimplementedMerchantAccountSvcServer) GetBusinessInfo(context.Context, *MerchantEmpty) (*BusinessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessInfo not implemented")
}
func (UnimplementedMerchantAccountSvcServer) UpdateBusinessInfo(context.Context, *UpdateBusinessInfoRequest) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessInfo not implemented")
}
func (UnimplementedMerchantAccountSvcServer) UpdateBusinessContactInfo(context.Context, *UpdateBusinessContactInfoRequest) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessContactInfo not implemented")
}
func (UnimplementedMerchantAccountSvcServer) GetBusinessContactInfo(context.Context, *MerchantEmpty) (*BusinessContactInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessContactInfo not implemented")
}
func (UnimplementedMerchantAccountSvcServer) AddBusinessContactPerson(context.Context, *AddBusinessContactPersonRequest) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessContactPerson not implemented")
}
func (UnimplementedMerchantAccountSvcServer) UpdateBusinessContactPerson(context.Context, *UpdateBusinessContactPersonRequest) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessContactPerson not implemented")
}
func (UnimplementedMerchantAccountSvcServer) DeleteBusinessContactPerson(context.Context, *MerchantStringValue) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessContactPerson not implemented")
}
func (UnimplementedMerchantAccountSvcServer) ListBusinessContactPersons(context.Context, *MerchantEmpty) (*BusinessContactListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessContactPersons not implemented")
}
func (UnimplementedMerchantAccountSvcServer) AddDirectorShareholder(context.Context, *AddDirectorShareholderRequest) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDirectorShareholder not implemented")
}
func (UnimplementedMerchantAccountSvcServer) UpdateDirectorShareholder(context.Context, *UpdateDirectorShareholderRequest) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDirectorShareholder not implemented")
}
func (UnimplementedMerchantAccountSvcServer) DeleteDirectorShareholder(context.Context, *MerchantStringValue) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDirectorShareholder not implemented")
}
func (UnimplementedMerchantAccountSvcServer) ListDirectorShareholders(context.Context, *MerchantEmpty) (*DirectorShareholderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDirectorShareholders not implemented")
}
func (UnimplementedMerchantAccountSvcServer) AddBusinessDocument(context.Context, *AddBusinessDocumentRequest) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessDocument not implemented")
}
func (UnimplementedMerchantAccountSvcServer) UpdateBusinessDocument(context.Context, *UpdateBusinessDocumentRequest) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessDocument not implemented")
}
func (UnimplementedMerchantAccountSvcServer) DeleteBusinessDocument(context.Context, *MerchantIntValue) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessDocument not implemented")
}
func (UnimplementedMerchantAccountSvcServer) ListBusinessDocuments(context.Context, *MerchantEmpty) (*BusinessDocumentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessDocuments not implemented")
}
func (UnimplementedMerchantAccountSvcServer) mustEmbedUnimplementedMerchantAccountSvcServer() {}

// UnsafeMerchantAccountSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantAccountSvcServer will
// result in compilation errors.
type UnsafeMerchantAccountSvcServer interface {
	mustEmbedUnimplementedMerchantAccountSvcServer()
}

func RegisterMerchantAccountSvcServer(s grpc.ServiceRegistrar, srv MerchantAccountSvcServer) {
	s.RegisterService(&MerchantAccountSvc_ServiceDesc, srv)
}

func _MerchantAccountSvc_GetBusinessInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).GetBusinessInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_GetBusinessInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).GetBusinessInfo(ctx, req.(*MerchantEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_UpdateBusinessInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).UpdateBusinessInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_UpdateBusinessInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).UpdateBusinessInfo(ctx, req.(*UpdateBusinessInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_UpdateBusinessContactInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessContactInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).UpdateBusinessContactInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_UpdateBusinessContactInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).UpdateBusinessContactInfo(ctx, req.(*UpdateBusinessContactInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_GetBusinessContactInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).GetBusinessContactInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_GetBusinessContactInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).GetBusinessContactInfo(ctx, req.(*MerchantEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_AddBusinessContactPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessContactPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).AddBusinessContactPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_AddBusinessContactPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).AddBusinessContactPerson(ctx, req.(*AddBusinessContactPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_UpdateBusinessContactPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessContactPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).UpdateBusinessContactPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_UpdateBusinessContactPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).UpdateBusinessContactPerson(ctx, req.(*UpdateBusinessContactPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_DeleteBusinessContactPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantStringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).DeleteBusinessContactPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_DeleteBusinessContactPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).DeleteBusinessContactPerson(ctx, req.(*MerchantStringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_ListBusinessContactPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).ListBusinessContactPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_ListBusinessContactPersons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).ListBusinessContactPersons(ctx, req.(*MerchantEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_AddDirectorShareholder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDirectorShareholderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).AddDirectorShareholder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_AddDirectorShareholder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).AddDirectorShareholder(ctx, req.(*AddDirectorShareholderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_UpdateDirectorShareholder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDirectorShareholderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).UpdateDirectorShareholder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_UpdateDirectorShareholder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).UpdateDirectorShareholder(ctx, req.(*UpdateDirectorShareholderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_DeleteDirectorShareholder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantStringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).DeleteDirectorShareholder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_DeleteDirectorShareholder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).DeleteDirectorShareholder(ctx, req.(*MerchantStringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_ListDirectorShareholders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).ListDirectorShareholders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_ListDirectorShareholders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).ListDirectorShareholders(ctx, req.(*MerchantEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_AddBusinessDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).AddBusinessDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_AddBusinessDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).AddBusinessDocument(ctx, req.(*AddBusinessDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_UpdateBusinessDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).UpdateBusinessDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_UpdateBusinessDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).UpdateBusinessDocument(ctx, req.(*UpdateBusinessDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_DeleteBusinessDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantIntValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).DeleteBusinessDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_DeleteBusinessDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).DeleteBusinessDocument(ctx, req.(*MerchantIntValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAccountSvc_ListBusinessDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAccountSvcServer).ListBusinessDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAccountSvc_ListBusinessDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAccountSvcServer).ListBusinessDocuments(ctx, req.(*MerchantEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantAccountSvc_ServiceDesc is the grpc.ServiceDesc for MerchantAccountSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantAccountSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.merchant.MerchantAccountSvc",
	HandlerType: (*MerchantAccountSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBusinessInfo",
			Handler:    _MerchantAccountSvc_GetBusinessInfo_Handler,
		},
		{
			MethodName: "UpdateBusinessInfo",
			Handler:    _MerchantAccountSvc_UpdateBusinessInfo_Handler,
		},
		{
			MethodName: "UpdateBusinessContactInfo",
			Handler:    _MerchantAccountSvc_UpdateBusinessContactInfo_Handler,
		},
		{
			MethodName: "GetBusinessContactInfo",
			Handler:    _MerchantAccountSvc_GetBusinessContactInfo_Handler,
		},
		{
			MethodName: "AddBusinessContactPerson",
			Handler:    _MerchantAccountSvc_AddBusinessContactPerson_Handler,
		},
		{
			MethodName: "UpdateBusinessContactPerson",
			Handler:    _MerchantAccountSvc_UpdateBusinessContactPerson_Handler,
		},
		{
			MethodName: "DeleteBusinessContactPerson",
			Handler:    _MerchantAccountSvc_DeleteBusinessContactPerson_Handler,
		},
		{
			MethodName: "ListBusinessContactPersons",
			Handler:    _MerchantAccountSvc_ListBusinessContactPersons_Handler,
		},
		{
			MethodName: "AddDirectorShareholder",
			Handler:    _MerchantAccountSvc_AddDirectorShareholder_Handler,
		},
		{
			MethodName: "UpdateDirectorShareholder",
			Handler:    _MerchantAccountSvc_UpdateDirectorShareholder_Handler,
		},
		{
			MethodName: "DeleteDirectorShareholder",
			Handler:    _MerchantAccountSvc_DeleteDirectorShareholder_Handler,
		},
		{
			MethodName: "ListDirectorShareholders",
			Handler:    _MerchantAccountSvc_ListDirectorShareholders_Handler,
		},
		{
			MethodName: "AddBusinessDocument",
			Handler:    _MerchantAccountSvc_AddBusinessDocument_Handler,
		},
		{
			MethodName: "UpdateBusinessDocument",
			Handler:    _MerchantAccountSvc_UpdateBusinessDocument_Handler,
		},
		{
			MethodName: "DeleteBusinessDocument",
			Handler:    _MerchantAccountSvc_DeleteBusinessDocument_Handler,
		},
		{
			MethodName: "ListBusinessDocuments",
			Handler:    _MerchantAccountSvc_ListBusinessDocuments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/merchant/account_service.proto",
}
