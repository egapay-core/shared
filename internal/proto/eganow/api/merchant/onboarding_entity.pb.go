// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: eganow/api/merchant/onboarding_entity.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompanyRegistrationType int32

const (
	CompanyRegistrationType_COMPANY_REGISTRATION_TYPE_UNKNOWN           CompanyRegistrationType = 0
	CompanyRegistrationType_COMPANY_REGISTRATION_TYPE_BUSINESS          CompanyRegistrationType = 1
	CompanyRegistrationType_COMPANY_REGISTRATION_TYPE_PERSONAL          CompanyRegistrationType = 2
	CompanyRegistrationType_COMPANY_REGISTRATION_TYPE_Limited_Liability CompanyRegistrationType = 3
)

// Enum value maps for CompanyRegistrationType.
var (
	CompanyRegistrationType_name = map[int32]string{
		0: "COMPANY_REGISTRATION_TYPE_UNKNOWN",
		1: "COMPANY_REGISTRATION_TYPE_BUSINESS",
		2: "COMPANY_REGISTRATION_TYPE_PERSONAL",
		3: "COMPANY_REGISTRATION_TYPE_Limited_Liability",
	}
	CompanyRegistrationType_value = map[string]int32{
		"COMPANY_REGISTRATION_TYPE_UNKNOWN":           0,
		"COMPANY_REGISTRATION_TYPE_BUSINESS":          1,
		"COMPANY_REGISTRATION_TYPE_PERSONAL":          2,
		"COMPANY_REGISTRATION_TYPE_Limited_Liability": 3,
	}
)

func (x CompanyRegistrationType) Enum() *CompanyRegistrationType {
	p := new(CompanyRegistrationType)
	*p = x
	return p
}

func (x CompanyRegistrationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanyRegistrationType) Descriptor() protoreflect.EnumDescriptor {
	return file_eganow_api_merchant_onboarding_entity_proto_enumTypes[0].Descriptor()
}

func (CompanyRegistrationType) Type() protoreflect.EnumType {
	return &file_eganow_api_merchant_onboarding_entity_proto_enumTypes[0]
}

func (x CompanyRegistrationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompanyRegistrationType.Descriptor instead.
func (CompanyRegistrationType) EnumDescriptor() ([]byte, []int) {
	return file_eganow_api_merchant_onboarding_entity_proto_rawDescGZIP(), []int{0}
}

type DirectorPosition int32

const (
	DirectorPosition_DIRECTOR_POSITION_UNKNOWN              DirectorPosition = 0
	DirectorPosition_DIRECTOR_POSITION_DIRECTOR             DirectorPosition = 1
	DirectorPosition_DIRECTOR_POSITION_SHAREHOLDER          DirectorPosition = 2
	DirectorPosition_DIRECTOR_POSITION_CEO                  DirectorPosition = 3
	DirectorPosition_DIRECTOR_POSITION_MANAGEMENT           DirectorPosition = 4
	DirectorPosition_DIRECTOR_POSITION_ENGINEER             DirectorPosition = 5
	DirectorPosition_DIRECTOR_POSITION_MID                  DirectorPosition = 6
	DirectorPosition_DIRECTOR_POSITION_CONTACT              DirectorPosition = 7
	DirectorPosition_DIRECTOR_POSITION_SIGNATORY            DirectorPosition = 9
	DirectorPosition_DIRECTOR_POSITION_GENERAL_MANAGER      DirectorPosition = 10
	DirectorPosition_DIRECTOR_POSITION_DIRECTOR_SHAREHOLDER DirectorPosition = 11
	DirectorPosition_DIRECTOR_POSITION_SALES_MANAGER        DirectorPosition = 12
)

// Enum value maps for DirectorPosition.
var (
	DirectorPosition_name = map[int32]string{
		0:  "DIRECTOR_POSITION_UNKNOWN",
		1:  "DIRECTOR_POSITION_DIRECTOR",
		2:  "DIRECTOR_POSITION_SHAREHOLDER",
		3:  "DIRECTOR_POSITION_CEO",
		4:  "DIRECTOR_POSITION_MANAGEMENT",
		5:  "DIRECTOR_POSITION_ENGINEER",
		6:  "DIRECTOR_POSITION_MID",
		7:  "DIRECTOR_POSITION_CONTACT",
		9:  "DIRECTOR_POSITION_SIGNATORY",
		10: "DIRECTOR_POSITION_GENERAL_MANAGER",
		11: "DIRECTOR_POSITION_DIRECTOR_SHAREHOLDER",
		12: "DIRECTOR_POSITION_SALES_MANAGER",
	}
	DirectorPosition_value = map[string]int32{
		"DIRECTOR_POSITION_UNKNOWN":              0,
		"DIRECTOR_POSITION_DIRECTOR":             1,
		"DIRECTOR_POSITION_SHAREHOLDER":          2,
		"DIRECTOR_POSITION_CEO":                  3,
		"DIRECTOR_POSITION_MANAGEMENT":           4,
		"DIRECTOR_POSITION_ENGINEER":             5,
		"DIRECTOR_POSITION_MID":                  6,
		"DIRECTOR_POSITION_CONTACT":              7,
		"DIRECTOR_POSITION_SIGNATORY":            9,
		"DIRECTOR_POSITION_GENERAL_MANAGER":      10,
		"DIRECTOR_POSITION_DIRECTOR_SHAREHOLDER": 11,
		"DIRECTOR_POSITION_SALES_MANAGER":        12,
	}
)

func (x DirectorPosition) Enum() *DirectorPosition {
	p := new(DirectorPosition)
	*p = x
	return p
}

func (x DirectorPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectorPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_eganow_api_merchant_onboarding_entity_proto_enumTypes[1].Descriptor()
}

func (DirectorPosition) Type() protoreflect.EnumType {
	return &file_eganow_api_merchant_onboarding_entity_proto_enumTypes[1]
}

func (x DirectorPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectorPosition.Descriptor instead.
func (DirectorPosition) EnumDescriptor() ([]byte, []int) {
	return file_eganow_api_merchant_onboarding_entity_proto_rawDescGZIP(), []int{1}
}

type CustomerIDTypes int32

const (
	CustomerIDTypes_CUSTOMER_ID_TYPES_UNKNOWN         CustomerIDTypes = 0
	CustomerIDTypes_CUSTOMER_ID_TYPES_PASSPORT        CustomerIDTypes = 1
	CustomerIDTypes_CUSTOMER_ID_TYPES_DRIVERS_LICENSE CustomerIDTypes = 2
	CustomerIDTypes_CUSTOMER_ID_TYPES_ID              CustomerIDTypes = 3
	CustomerIDTypes_CUSTOMER_ID_TYPES_BANKID          CustomerIDTypes = 4
)

// Enum value maps for CustomerIDTypes.
var (
	CustomerIDTypes_name = map[int32]string{
		0: "CUSTOMER_ID_TYPES_UNKNOWN",
		1: "CUSTOMER_ID_TYPES_PASSPORT",
		2: "CUSTOMER_ID_TYPES_DRIVERS_LICENSE",
		3: "CUSTOMER_ID_TYPES_ID",
		4: "CUSTOMER_ID_TYPES_BANKID",
	}
	CustomerIDTypes_value = map[string]int32{
		"CUSTOMER_ID_TYPES_UNKNOWN":         0,
		"CUSTOMER_ID_TYPES_PASSPORT":        1,
		"CUSTOMER_ID_TYPES_DRIVERS_LICENSE": 2,
		"CUSTOMER_ID_TYPES_ID":              3,
		"CUSTOMER_ID_TYPES_BANKID":          4,
	}
)

func (x CustomerIDTypes) Enum() *CustomerIDTypes {
	p := new(CustomerIDTypes)
	*p = x
	return p
}

func (x CustomerIDTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomerIDTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_eganow_api_merchant_onboarding_entity_proto_enumTypes[2].Descriptor()
}

func (CustomerIDTypes) Type() protoreflect.EnumType {
	return &file_eganow_api_merchant_onboarding_entity_proto_enumTypes[2]
}

func (x CustomerIDTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomerIDTypes.Descriptor instead.
func (CustomerIDTypes) EnumDescriptor() ([]byte, []int) {
	return file_eganow_api_merchant_onboarding_entity_proto_rawDescGZIP(), []int{2}
}

type OfficeOwnership int32

const (
	OfficeOwnership_OFFICE_OWNERSHIP_UNKNOWN OfficeOwnership = 0
	OfficeOwnership_OFFICE_OWNERSHIP_OWNED   OfficeOwnership = 1
	OfficeOwnership_OFFICE_OWNERSHIP_RENT    OfficeOwnership = 2
	OfficeOwnership_OFFICE_OWNERSHIP_LEASED  OfficeOwnership = 3
)

// Enum value maps for OfficeOwnership.
var (
	OfficeOwnership_name = map[int32]string{
		0: "OFFICE_OWNERSHIP_UNKNOWN",
		1: "OFFICE_OWNERSHIP_OWNED",
		2: "OFFICE_OWNERSHIP_RENT",
		3: "OFFICE_OWNERSHIP_LEASED",
	}
	OfficeOwnership_value = map[string]int32{
		"OFFICE_OWNERSHIP_UNKNOWN": 0,
		"OFFICE_OWNERSHIP_OWNED":   1,
		"OFFICE_OWNERSHIP_RENT":    2,
		"OFFICE_OWNERSHIP_LEASED":  3,
	}
)

func (x OfficeOwnership) Enum() *OfficeOwnership {
	p := new(OfficeOwnership)
	*p = x
	return p
}

func (x OfficeOwnership) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OfficeOwnership) Descriptor() protoreflect.EnumDescriptor {
	return file_eganow_api_merchant_onboarding_entity_proto_enumTypes[3].Descriptor()
}

func (OfficeOwnership) Type() protoreflect.EnumType {
	return &file_eganow_api_merchant_onboarding_entity_proto_enumTypes[3]
}

func (x OfficeOwnership) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OfficeOwnership.Descriptor instead.
func (OfficeOwnership) EnumDescriptor() ([]byte, []int) {
	return file_eganow_api_merchant_onboarding_entity_proto_rawDescGZIP(), []int{3}
}

type BusinessCustomerPortalStatus int32

const (
	BusinessCustomerPortalStatus_BUSINESS_CUSTOMER_PORTAL_STATUS_UNKNOWN           BusinessCustomerPortalStatus = 0
	BusinessCustomerPortalStatus_BUSINESS_CUSTOMER_PORTAL_STATUS_EDITING           BusinessCustomerPortalStatus = 1
	BusinessCustomerPortalStatus_BUSINESS_CUSTOMER_PORTAL_STATUS_REVIEWING         BusinessCustomerPortalStatus = 2
	BusinessCustomerPortalStatus_BUSINESS_CUSTOMER_PORTAL_STATUS_COMPLIANCE_PASSED BusinessCustomerPortalStatus = 3
	BusinessCustomerPortalStatus_BUSINESS_CUSTOMER_PORTAL_STATUS_ACTIVE            BusinessCustomerPortalStatus = 4
)

// Enum value maps for BusinessCustomerPortalStatus.
var (
	BusinessCustomerPortalStatus_name = map[int32]string{
		0: "BUSINESS_CUSTOMER_PORTAL_STATUS_UNKNOWN",
		1: "BUSINESS_CUSTOMER_PORTAL_STATUS_EDITING",
		2: "BUSINESS_CUSTOMER_PORTAL_STATUS_REVIEWING",
		3: "BUSINESS_CUSTOMER_PORTAL_STATUS_COMPLIANCE_PASSED",
		4: "BUSINESS_CUSTOMER_PORTAL_STATUS_ACTIVE",
	}
	BusinessCustomerPortalStatus_value = map[string]int32{
		"BUSINESS_CUSTOMER_PORTAL_STATUS_UNKNOWN":           0,
		"BUSINESS_CUSTOMER_PORTAL_STATUS_EDITING":           1,
		"BUSINESS_CUSTOMER_PORTAL_STATUS_REVIEWING":         2,
		"BUSINESS_CUSTOMER_PORTAL_STATUS_COMPLIANCE_PASSED": 3,
		"BUSINESS_CUSTOMER_PORTAL_STATUS_ACTIVE":            4,
	}
)

func (x BusinessCustomerPortalStatus) Enum() *BusinessCustomerPortalStatus {
	p := new(BusinessCustomerPortalStatus)
	*p = x
	return p
}

func (x BusinessCustomerPortalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessCustomerPortalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eganow_api_merchant_onboarding_entity_proto_enumTypes[4].Descriptor()
}

func (BusinessCustomerPortalStatus) Type() protoreflect.EnumType {
	return &file_eganow_api_merchant_onboarding_entity_proto_enumTypes[4]
}

func (x BusinessCustomerPortalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessCustomerPortalStatus.Descriptor instead.
func (BusinessCustomerPortalStatus) EnumDescriptor() ([]byte, []int) {
	return file_eganow_api_merchant_onboarding_entity_proto_rawDescGZIP(), []int{4}
}

type DirectorOrShareholderOrOtherType int32

const (
	DirectorOrShareholderOrOtherType_DIRECTOR_OR_SHAREHOLDER_OR_OTHER_TYPE_UNKNOWN              DirectorOrShareholderOrOtherType = 0
	DirectorOrShareholderOrOtherType_DIRECTOR_OR_SHAREHOLDER_OR_OTHER_TYPE_CONTACT_PERSON       DirectorOrShareholderOrOtherType = 1
	DirectorOrShareholderOrOtherType_DIRECTOR_OR_SHAREHOLDER_OR_OTHER_TYPE_DIRECTOR_SHAREHOLDER DirectorOrShareholderOrOtherType = 2
)

// Enum value maps for DirectorOrShareholderOrOtherType.
var (
	DirectorOrShareholderOrOtherType_name = map[int32]string{
		0: "DIRECTOR_OR_SHAREHOLDER_OR_OTHER_TYPE_UNKNOWN",
		1: "DIRECTOR_OR_SHAREHOLDER_OR_OTHER_TYPE_CONTACT_PERSON",
		2: "DIRECTOR_OR_SHAREHOLDER_OR_OTHER_TYPE_DIRECTOR_SHAREHOLDER",
	}
	DirectorOrShareholderOrOtherType_value = map[string]int32{
		"DIRECTOR_OR_SHAREHOLDER_OR_OTHER_TYPE_UNKNOWN":              0,
		"DIRECTOR_OR_SHAREHOLDER_OR_OTHER_TYPE_CONTACT_PERSON":       1,
		"DIRECTOR_OR_SHAREHOLDER_OR_OTHER_TYPE_DIRECTOR_SHAREHOLDER": 2,
	}
)

func (x DirectorOrShareholderOrOtherType) Enum() *DirectorOrShareholderOrOtherType {
	p := new(DirectorOrShareholderOrOtherType)
	*p = x
	return p
}

func (x DirectorOrShareholderOrOtherType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectorOrShareholderOrOtherType) Descriptor() protoreflect.EnumDescriptor {
	return file_eganow_api_merchant_onboarding_entity_proto_enumTypes[5].Descriptor()
}

func (DirectorOrShareholderOrOtherType) Type() protoreflect.EnumType {
	return &file_eganow_api_merchant_onboarding_entity_proto_enumTypes[5]
}

func (x DirectorOrShareholderOrOtherType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectorOrShareholderOrOtherType.Descriptor instead.
func (DirectorOrShareholderOrOtherType) EnumDescriptor() ([]byte, []int) {
	return file_eganow_api_merchant_onboarding_entity_proto_rawDescGZIP(), []int{5}
}

type CustomerStatus int32

const (
	CustomerStatus_CUSTOMER_STATUS_UNKNOWN CustomerStatus = 0
	CustomerStatus_CUSTOMER_STATUS_ACTIVE  CustomerStatus = 1
	CustomerStatus_CUSTOMER_STATUS_PENDING CustomerStatus = 2
)

// Enum value maps for CustomerStatus.
var (
	CustomerStatus_name = map[int32]string{
		0: "CUSTOMER_STATUS_UNKNOWN",
		1: "CUSTOMER_STATUS_ACTIVE",
		2: "CUSTOMER_STATUS_PENDING",
	}
	CustomerStatus_value = map[string]int32{
		"CUSTOMER_STATUS_UNKNOWN": 0,
		"CUSTOMER_STATUS_ACTIVE":  1,
		"CUSTOMER_STATUS_PENDING": 2,
	}
)

func (x CustomerStatus) Enum() *CustomerStatus {
	p := new(CustomerStatus)
	*p = x
	return p
}

func (x CustomerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eganow_api_merchant_onboarding_entity_proto_enumTypes[6].Descriptor()
}

func (CustomerStatus) Type() protoreflect.EnumType {
	return &file_eganow_api_merchant_onboarding_entity_proto_enumTypes[6]
}

func (x CustomerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomerStatus.Descriptor instead.
func (CustomerStatus) EnumDescriptor() ([]byte, []int) {
	return file_eganow_api_merchant_onboarding_entity_proto_rawDescGZIP(), []int{6}
}

// MerchantAccount is the entity that represents
// a merchant/business customer account in the database.
type MerchantAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerGuid               string `protobuf:"bytes,1,opt,name=CustomerGuid,proto3" json:"CustomerGuid,omitempty"`
	CustomerId                 string `protobuf:"bytes,2,opt,name=CustomerId,proto3" json:"CustomerId,omitempty"`
	MobileNumber               string `protobuf:"bytes,3,opt,name=MobileNumber,proto3" json:"MobileNumber,omitempty"`
	EmailAddress               string `protobuf:"bytes,4,opt,name=EmailAddress,proto3" json:"EmailAddress,omitempty"`
	PersonalBusinessGroup      string `protobuf:"bytes,5,opt,name=PersonalBusinessGroup,proto3" json:"PersonalBusinessGroup,omitempty"`
	PersonalBusinessGroupValue int32  `protobuf:"varint,6,opt,name=PersonalBusinessGroupValue,proto3" json:"PersonalBusinessGroupValue,omitempty"`
	FirstName                  string `protobuf:"bytes,7,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName                   string `protobuf:"bytes,8,opt,name=LastName,proto3" json:"LastName,omitempty"`
	BusinessName               string `protobuf:"bytes,9,opt,name=BusinessName,proto3" json:"BusinessName,omitempty"`
	LanguageId                 string `protobuf:"bytes,10,opt,name=LanguageId,proto3" json:"LanguageId,omitempty"`
	CustomerPINHash            string `protobuf:"bytes,11,opt,name=CustomerPINHash,proto3" json:"CustomerPINHash,omitempty"`
	UserJwtToken               string `protobuf:"bytes,12,opt,name=UserJwtToken,proto3" json:"UserJwtToken,omitempty"`
	CountryCode                string `protobuf:"bytes,13,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	CountryDialCode            int32  `protobuf:"varint,14,opt,name=CountryDialCode,proto3" json:"CountryDialCode,omitempty"`
	IsSuccess                  bool   `protobuf:"varint,15,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
	Message                    string `protobuf:"bytes,16,opt,name=Message,proto3" json:"Message,omitempty"`
	PasswordExistValue         string `protobuf:"bytes,17,opt,name=PasswordExistValue,proto3" json:"PasswordExistValue,omitempty"`
	RegisterModeMobileWebUssd  string `protobuf:"bytes,18,opt,name=RegisterModeMobileWebUssd,proto3" json:"RegisterModeMobileWebUssd,omitempty"`
	IdCardStatus               string `protobuf:"bytes,19,opt,name=IdCardStatus,proto3" json:"IdCardStatus,omitempty"`
	OperatingCountryYesNo      string `protobuf:"bytes,20,opt,name=OperatingCountryYesNo,proto3" json:"OperatingCountryYesNo,omitempty"`
	CustomerProfilePicImageUrl string `protobuf:"bytes,21,opt,name=CustomerProfilePicImageUrl,proto3" json:"CustomerProfilePicImageUrl,omitempty"`
	MobileNumberOrEmailExist   int32  `protobuf:"varint,22,opt,name=MobileNumberOrEmailExist,proto3" json:"MobileNumberOrEmailExist,omitempty"`
	JwtNoOfMinutes             int32  `protobuf:"varint,23,opt,name=JwtNoOfMinutes,proto3" json:"JwtNoOfMinutes,omitempty"`
	ApiVersionNo               int32  `protobuf:"varint,24,opt,name=ApiVersionNo,proto3" json:"ApiVersionNo,omitempty"`
	AppversionNo               string `protobuf:"bytes,25,opt,name=AppversionNo,proto3" json:"AppversionNo,omitempty"`
	AppUpdateRequirementStatus string `protobuf:"bytes,26,opt,name=AppUpdateRequirementStatus,proto3" json:"AppUpdateRequirementStatus,omitempty"`
	CustomerStatus             string `protobuf:"bytes,27,opt,name=CustomerStatus,proto3" json:"CustomerStatus,omitempty"`
}

func (x *MerchantAccount) Reset() {
	*x = MerchantAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_onboarding_entity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantAccount) ProtoMessage() {}

func (x *MerchantAccount) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_onboarding_entity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantAccount.ProtoReflect.Descriptor instead.
func (*MerchantAccount) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_onboarding_entity_proto_rawDescGZIP(), []int{0}
}

func (x *MerchantAccount) GetCustomerGuid() string {
	if x != nil {
		return x.CustomerGuid
	}
	return ""
}

func (x *MerchantAccount) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MerchantAccount) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *MerchantAccount) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *MerchantAccount) GetPersonalBusinessGroup() string {
	if x != nil {
		return x.PersonalBusinessGroup
	}
	return ""
}

func (x *MerchantAccount) GetPersonalBusinessGroupValue() int32 {
	if x != nil {
		return x.PersonalBusinessGroupValue
	}
	return 0
}

func (x *MerchantAccount) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *MerchantAccount) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *MerchantAccount) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *MerchantAccount) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *MerchantAccount) GetCustomerPINHash() string {
	if x != nil {
		return x.CustomerPINHash
	}
	return ""
}

func (x *MerchantAccount) GetUserJwtToken() string {
	if x != nil {
		return x.UserJwtToken
	}
	return ""
}

func (x *MerchantAccount) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *MerchantAccount) GetCountryDialCode() int32 {
	if x != nil {
		return x.CountryDialCode
	}
	return 0
}

func (x *MerchantAccount) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *MerchantAccount) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MerchantAccount) GetPasswordExistValue() string {
	if x != nil {
		return x.PasswordExistValue
	}
	return ""
}

func (x *MerchantAccount) GetRegisterModeMobileWebUssd() string {
	if x != nil {
		return x.RegisterModeMobileWebUssd
	}
	return ""
}

func (x *MerchantAccount) GetIdCardStatus() string {
	if x != nil {
		return x.IdCardStatus
	}
	return ""
}

func (x *MerchantAccount) GetOperatingCountryYesNo() string {
	if x != nil {
		return x.OperatingCountryYesNo
	}
	return ""
}

func (x *MerchantAccount) GetCustomerProfilePicImageUrl() string {
	if x != nil {
		return x.CustomerProfilePicImageUrl
	}
	return ""
}

func (x *MerchantAccount) GetMobileNumberOrEmailExist() int32 {
	if x != nil {
		return x.MobileNumberOrEmailExist
	}
	return 0
}

func (x *MerchantAccount) GetJwtNoOfMinutes() int32 {
	if x != nil {
		return x.JwtNoOfMinutes
	}
	return 0
}

func (x *MerchantAccount) GetApiVersionNo() int32 {
	if x != nil {
		return x.ApiVersionNo
	}
	return 0
}

func (x *MerchantAccount) GetAppversionNo() string {
	if x != nil {
		return x.AppversionNo
	}
	return ""
}

func (x *MerchantAccount) GetAppUpdateRequirementStatus() string {
	if x != nil {
		return x.AppUpdateRequirementStatus
	}
	return ""
}

func (x *MerchantAccount) GetCustomerStatus() string {
	if x != nil {
		return x.CustomerStatus
	}
	return ""
}

type BusinessContactPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecId                   string `protobuf:"bytes,1,opt,name=RecId,proto3" json:"RecId,omitempty"`
	CustomerGuidProspective string `protobuf:"bytes,2,opt,name=CustomerGuidProspective,proto3" json:"CustomerGuidProspective,omitempty"`
	FirstName               string `protobuf:"bytes,3,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName                string `protobuf:"bytes,4,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Position                string `protobuf:"bytes,5,opt,name=Position,proto3" json:"Position,omitempty"`
	MobileNumber            string `protobuf:"bytes,6,opt,name=MobileNumber,proto3" json:"MobileNumber,omitempty"`
	EmailAddress            string `protobuf:"bytes,7,opt,name=EmailAddress,proto3" json:"EmailAddress,omitempty"`
	MakerId                 string `protobuf:"bytes,8,opt,name=MakerId,proto3" json:"MakerId,omitempty"`
	MakeDate                string `protobuf:"bytes,9,opt,name=MakeDate,proto3" json:"MakeDate,omitempty"`
}

func (x *BusinessContactPerson) Reset() {
	*x = BusinessContactPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_onboarding_entity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContactPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContactPerson) ProtoMessage() {}

func (x *BusinessContactPerson) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_onboarding_entity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContactPerson.ProtoReflect.Descriptor instead.
func (*BusinessContactPerson) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_onboarding_entity_proto_rawDescGZIP(), []int{1}
}

func (x *BusinessContactPerson) GetRecId() string {
	if x != nil {
		return x.RecId
	}
	return ""
}

func (x *BusinessContactPerson) GetCustomerGuidProspective() string {
	if x != nil {
		return x.CustomerGuidProspective
	}
	return ""
}

func (x *BusinessContactPerson) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *BusinessContactPerson) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *BusinessContactPerson) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *BusinessContactPerson) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *BusinessContactPerson) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *BusinessContactPerson) GetMakerId() string {
	if x != nil {
		return x.MakerId
	}
	return ""
}

func (x *BusinessContactPerson) GetMakeDate() string {
	if x != nil {
		return x.MakeDate
	}
	return ""
}

var File_eganow_api_merchant_onboarding_entity_proto protoreflect.FileDescriptor

var file_eganow_api_merchant_onboarding_entity_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x65,
	0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x22, 0xff, 0x08, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x50, 0x49, 0x4e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x49, 0x4e, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x57, 0x65,
	0x62, 0x55, 0x73, 0x73, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x57,
	0x65, 0x62, 0x55, 0x73, 0x73, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x59, 0x65,
	0x73, 0x4e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x59, 0x65, 0x73, 0x4e, 0x6f,
	0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x4a, 0x77, 0x74, 0x4e, 0x6f, 0x4f, 0x66, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4a, 0x77, 0x74, 0x4e, 0x6f, 0x4f, 0x66, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x41, 0x70, 0x70, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x3e, 0x0a, 0x1a,
	0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x15, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x65, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52,
	0x65, 0x63, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x2a, 0xc1, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x21, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x26, 0x0a,
	0x22, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x4c, 0x69, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x10, 0x03, 0x2a, 0xa4, 0x03, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x45, 0x52, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x49, 0x44, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x43, 0x54, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54,
	0x4f, 0x52, 0x59, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x41,
	0x4c, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x0c, 0x2a, 0xaf, 0x01,
	0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x25, 0x0a, 0x21, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x49, 0x44, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x44, 0x10, 0x04, 0x2a,
	0x83, 0x01, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x57,
	0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45,
	0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49,
	0x50, 0x5f, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x46, 0x46, 0x49,
	0x43, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x4c, 0x45, 0x41,
	0x53, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x8a, 0x02, 0x0a, 0x1c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x2d, 0x0a, 0x29, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x35, 0x0a, 0x31, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x04, 0x2a, 0xcf, 0x01, 0x0a, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x48, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x48,
	0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x53,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x3e, 0x0a, 0x3a, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f,
	0x4f, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x48, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x42, 0x1f, 0x5a, 0x1d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x67, 0x61, 0x6e, 0x6f,
	0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eganow_api_merchant_onboarding_entity_proto_rawDescOnce sync.Once
	file_eganow_api_merchant_onboarding_entity_proto_rawDescData = file_eganow_api_merchant_onboarding_entity_proto_rawDesc
)

func file_eganow_api_merchant_onboarding_entity_proto_rawDescGZIP() []byte {
	file_eganow_api_merchant_onboarding_entity_proto_rawDescOnce.Do(func() {
		file_eganow_api_merchant_onboarding_entity_proto_rawDescData = protoimpl.X.CompressGZIP(file_eganow_api_merchant_onboarding_entity_proto_rawDescData)
	})
	return file_eganow_api_merchant_onboarding_entity_proto_rawDescData
}

var file_eganow_api_merchant_onboarding_entity_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_eganow_api_merchant_onboarding_entity_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_eganow_api_merchant_onboarding_entity_proto_goTypes = []interface{}{
	(CompanyRegistrationType)(0),          // 0: eganow.api.merchant.CompanyRegistrationType
	(DirectorPosition)(0),                 // 1: eganow.api.merchant.DirectorPosition
	(CustomerIDTypes)(0),                  // 2: eganow.api.merchant.CustomerIDTypes
	(OfficeOwnership)(0),                  // 3: eganow.api.merchant.OfficeOwnership
	(BusinessCustomerPortalStatus)(0),     // 4: eganow.api.merchant.BusinessCustomerPortalStatus
	(DirectorOrShareholderOrOtherType)(0), // 5: eganow.api.merchant.DirectorOrShareholderOrOtherType
	(CustomerStatus)(0),                   // 6: eganow.api.merchant.CustomerStatus
	(*MerchantAccount)(nil),               // 7: eganow.api.merchant.MerchantAccount
	(*BusinessContactPerson)(nil),         // 8: eganow.api.merchant.BusinessContactPerson
}
var file_eganow_api_merchant_onboarding_entity_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_eganow_api_merchant_onboarding_entity_proto_init() }
func file_eganow_api_merchant_onboarding_entity_proto_init() {
	if File_eganow_api_merchant_onboarding_entity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eganow_api_merchant_onboarding_entity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_onboarding_entity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessContactPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eganow_api_merchant_onboarding_entity_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eganow_api_merchant_onboarding_entity_proto_goTypes,
		DependencyIndexes: file_eganow_api_merchant_onboarding_entity_proto_depIdxs,
		EnumInfos:         file_eganow_api_merchant_onboarding_entity_proto_enumTypes,
		MessageInfos:      file_eganow_api_merchant_onboarding_entity_proto_msgTypes,
	}.Build()
	File_eganow_api_merchant_onboarding_entity_proto = out.File
	file_eganow_api_merchant_onboarding_entity_proto_rawDesc = nil
	file_eganow_api_merchant_onboarding_entity_proto_goTypes = nil
	file_eganow_api_merchant_onboarding_entity_proto_depIdxs = nil
}
