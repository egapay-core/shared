// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/customer/onboarding_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomerOnboardingSvc_CreateCustomerAccount_FullMethodName       = "/eganow.api.customer.CustomerOnboardingSvc/CreateCustomerAccount"
	CustomerOnboardingSvc_LoginCustomer_FullMethodName               = "/eganow.api.customer.CustomerOnboardingSvc/LoginCustomer"
	CustomerOnboardingSvc_CheckIfCustomerAccountExist_FullMethodName = "/eganow.api.customer.CustomerOnboardingSvc/CheckIfCustomerAccountExist"
)

// CustomerOnboardingSvcClient is the client API for CustomerOnboardingSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerOnboardingSvcClient interface {
	CreateCustomerAccount(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CustomerStringValue, error)
	LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*AuthCustomerResponse, error)
	CheckIfCustomerAccountExist(ctx context.Context, in *CheckCustomerAccountRequest, opts ...grpc.CallOption) (*AuthCustomerResponse, error)
}

type customerOnboardingSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerOnboardingSvcClient(cc grpc.ClientConnInterface) CustomerOnboardingSvcClient {
	return &customerOnboardingSvcClient{cc}
}

func (c *customerOnboardingSvcClient) CreateCustomerAccount(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CustomerStringValue, error) {
	out := new(CustomerStringValue)
	err := c.cc.Invoke(ctx, CustomerOnboardingSvc_CreateCustomerAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingSvcClient) LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*AuthCustomerResponse, error) {
	out := new(AuthCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerOnboardingSvc_LoginCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerOnboardingSvcClient) CheckIfCustomerAccountExist(ctx context.Context, in *CheckCustomerAccountRequest, opts ...grpc.CallOption) (*AuthCustomerResponse, error) {
	out := new(AuthCustomerResponse)
	err := c.cc.Invoke(ctx, CustomerOnboardingSvc_CheckIfCustomerAccountExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerOnboardingSvcServer is the server API for CustomerOnboardingSvc service.
// All implementations must embed UnimplementedCustomerOnboardingSvcServer
// for forward compatibility
type CustomerOnboardingSvcServer interface {
	CreateCustomerAccount(context.Context, *CreateCustomerRequest) (*CustomerStringValue, error)
	LoginCustomer(context.Context, *LoginCustomerRequest) (*AuthCustomerResponse, error)
	CheckIfCustomerAccountExist(context.Context, *CheckCustomerAccountRequest) (*AuthCustomerResponse, error)
	mustEmbedUnimplementedCustomerOnboardingSvcServer()
}

// UnimplementedCustomerOnboardingSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerOnboardingSvcServer struct {
}

func (UnimplementedCustomerOnboardingSvcServer) CreateCustomerAccount(context.Context, *CreateCustomerRequest) (*CustomerStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerAccount not implemented")
}
func (UnimplementedCustomerOnboardingSvcServer) LoginCustomer(context.Context, *LoginCustomerRequest) (*AuthCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCustomer not implemented")
}
func (UnimplementedCustomerOnboardingSvcServer) CheckIfCustomerAccountExist(context.Context, *CheckCustomerAccountRequest) (*AuthCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfCustomerAccountExist not implemented")
}
func (UnimplementedCustomerOnboardingSvcServer) mustEmbedUnimplementedCustomerOnboardingSvcServer() {}

// UnsafeCustomerOnboardingSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerOnboardingSvcServer will
// result in compilation errors.
type UnsafeCustomerOnboardingSvcServer interface {
	mustEmbedUnimplementedCustomerOnboardingSvcServer()
}

func RegisterCustomerOnboardingSvcServer(s grpc.ServiceRegistrar, srv CustomerOnboardingSvcServer) {
	s.RegisterService(&CustomerOnboardingSvc_ServiceDesc, srv)
}

func _CustomerOnboardingSvc_CreateCustomerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingSvcServer).CreateCustomerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerOnboardingSvc_CreateCustomerAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingSvcServer).CreateCustomerAccount(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingSvc_LoginCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingSvcServer).LoginCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerOnboardingSvc_LoginCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingSvcServer).LoginCustomer(ctx, req.(*LoginCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerOnboardingSvc_CheckIfCustomerAccountExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCustomerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerOnboardingSvcServer).CheckIfCustomerAccountExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerOnboardingSvc_CheckIfCustomerAccountExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerOnboardingSvcServer).CheckIfCustomerAccountExist(ctx, req.(*CheckCustomerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerOnboardingSvc_ServiceDesc is the grpc.ServiceDesc for CustomerOnboardingSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerOnboardingSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.customer.CustomerOnboardingSvc",
	HandlerType: (*CustomerOnboardingSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomerAccount",
			Handler:    _CustomerOnboardingSvc_CreateCustomerAccount_Handler,
		},
		{
			MethodName: "LoginCustomer",
			Handler:    _CustomerOnboardingSvc_LoginCustomer_Handler,
		},
		{
			MethodName: "CheckIfCustomerAccountExist",
			Handler:    _CustomerOnboardingSvc_CheckIfCustomerAccountExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/customer/onboarding_service.proto",
}
