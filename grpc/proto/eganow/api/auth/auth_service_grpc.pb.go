// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/auth/auth_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokenSvc_CreateToken_FullMethodName   = "/eganow.api.auth.TokenSvc/CreateToken"
	TokenSvc_ValidateToken_FullMethodName = "/eganow.api.auth.TokenSvc/ValidateToken"
	TokenSvc_RevokeToken_FullMethodName   = "/eganow.api.auth.TokenSvc/RevokeToken"
)

// TokenSvcClient is the client API for TokenSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenSvcClient interface {
	CreateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AuthStringValue, error)
	ValidateToken(ctx context.Context, in *AuthStringValue, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	RevokeToken(ctx context.Context, in *AuthStringValue, opts ...grpc.CallOption) (*AuthStringValue, error)
}

type tokenSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenSvcClient(cc grpc.ClientConnInterface) TokenSvcClient {
	return &tokenSvcClient{cc}
}

func (c *tokenSvcClient) CreateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AuthStringValue, error) {
	out := new(AuthStringValue)
	err := c.cc.Invoke(ctx, TokenSvc_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenSvcClient) ValidateToken(ctx context.Context, in *AuthStringValue, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, TokenSvc_ValidateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenSvcClient) RevokeToken(ctx context.Context, in *AuthStringValue, opts ...grpc.CallOption) (*AuthStringValue, error) {
	out := new(AuthStringValue)
	err := c.cc.Invoke(ctx, TokenSvc_RevokeToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenSvcServer is the server API for TokenSvc service.
// All implementations must embed UnimplementedTokenSvcServer
// for forward compatibility
type TokenSvcServer interface {
	CreateToken(context.Context, *TokenRequest) (*AuthStringValue, error)
	ValidateToken(context.Context, *AuthStringValue) (*ValidateTokenResponse, error)
	RevokeToken(context.Context, *AuthStringValue) (*AuthStringValue, error)
	mustEmbedUnimplementedTokenSvcServer()
}

// UnimplementedTokenSvcServer must be embedded to have forward compatible implementations.
type UnimplementedTokenSvcServer struct {
}

func (UnimplementedTokenSvcServer) CreateToken(context.Context, *TokenRequest) (*AuthStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedTokenSvcServer) ValidateToken(context.Context, *AuthStringValue) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedTokenSvcServer) RevokeToken(context.Context, *AuthStringValue) (*AuthStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedTokenSvcServer) mustEmbedUnimplementedTokenSvcServer() {}

// UnsafeTokenSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenSvcServer will
// result in compilation errors.
type UnsafeTokenSvcServer interface {
	mustEmbedUnimplementedTokenSvcServer()
}

func RegisterTokenSvcServer(s grpc.ServiceRegistrar, srv TokenSvcServer) {
	s.RegisterService(&TokenSvc_ServiceDesc, srv)
}

func _TokenSvc_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenSvcServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenSvc_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenSvcServer).CreateToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenSvc_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthStringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenSvcServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenSvc_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenSvcServer).ValidateToken(ctx, req.(*AuthStringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenSvc_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthStringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenSvcServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenSvc_RevokeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenSvcServer).RevokeToken(ctx, req.(*AuthStringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenSvc_ServiceDesc is the grpc.ServiceDesc for TokenSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.auth.TokenSvc",
	HandlerType: (*TokenSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _TokenSvc_CreateToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _TokenSvc_ValidateToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _TokenSvc_RevokeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/auth/auth_service.proto",
}

const ()

// AuthSvcClient is the client API for AuthSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthSvcClient interface {
}

type authSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthSvcClient(cc grpc.ClientConnInterface) AuthSvcClient {
	return &authSvcClient{cc}
}

// AuthSvcServer is the server API for AuthSvc service.
// All implementations must embed UnimplementedAuthSvcServer
// for forward compatibility
type AuthSvcServer interface {
	mustEmbedUnimplementedAuthSvcServer()
}

// UnimplementedAuthSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthSvcServer struct {
}

func (UnimplementedAuthSvcServer) mustEmbedUnimplementedAuthSvcServer() {}

// UnsafeAuthSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthSvcServer will
// result in compilation errors.
type UnsafeAuthSvcServer interface {
	mustEmbedUnimplementedAuthSvcServer()
}

func RegisterAuthSvcServer(s grpc.ServiceRegistrar, srv AuthSvcServer) {
	s.RegisterService(&AuthSvc_ServiceDesc, srv)
}

// AuthSvc_ServiceDesc is the grpc.ServiceDesc for AuthSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.auth.AuthSvc",
	HandlerType: (*AuthSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "eganow/api/auth/auth_service.proto",
}
