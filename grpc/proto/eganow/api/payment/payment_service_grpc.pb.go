// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/payment/payment_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EgaPayDeveloperApiSvc_GetAccessToken_FullMethodName           = "/eganow.api.payment.EgaPayDeveloperApiSvc/GetAccessToken"
	EgaPayDeveloperApiSvc_GetAccountHolderInfo_FullMethodName     = "/eganow.api.payment.EgaPayDeveloperApiSvc/GetAccountHolderInfo"
	EgaPayDeveloperApiSvc_GetCollectionServiceList_FullMethodName = "/eganow.api.payment.EgaPayDeveloperApiSvc/GetCollectionServiceList"
	EgaPayDeveloperApiSvc_GetPayoutServiceList_FullMethodName     = "/eganow.api.payment.EgaPayDeveloperApiSvc/GetPayoutServiceList"
	EgaPayDeveloperApiSvc_PayoutCreditAccount_FullMethodName      = "/eganow.api.payment.EgaPayDeveloperApiSvc/PayoutCreditAccount"
	EgaPayDeveloperApiSvc_CollectionDebitAccount_FullMethodName   = "/eganow.api.payment.EgaPayDeveloperApiSvc/CollectionDebitAccount"
	EgaPayDeveloperApiSvc_TransactionStatusQuery_FullMethodName   = "/eganow.api.payment.EgaPayDeveloperApiSvc/TransactionStatusQuery"
)

// EgaPayDeveloperApiSvcClient is the client API for EgaPayDeveloperApiSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EgaPayDeveloperApiSvcClient interface {
	GetAccessToken(ctx context.Context, in *EgaPayEmpty, opts ...grpc.CallOption) (*AccessTokenResponse, error)
	GetAccountHolderInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error)
	GetCollectionServiceList(ctx context.Context, in *GetServiceListRequest, opts ...grpc.CallOption) (*GetServiceListResponse, error)
	GetPayoutServiceList(ctx context.Context, in *GetServiceListRequest, opts ...grpc.CallOption) (*GetServiceListResponse, error)
	PayoutCreditAccount(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	CollectionDebitAccount(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	TransactionStatusQuery(ctx context.Context, in *QueryTransferStatusRequest, opts ...grpc.CallOption) (*QueryTransferStatusTransferResponse, error)
}

type egaPayDeveloperApiSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewEgaPayDeveloperApiSvcClient(cc grpc.ClientConnInterface) EgaPayDeveloperApiSvcClient {
	return &egaPayDeveloperApiSvcClient{cc}
}

func (c *egaPayDeveloperApiSvcClient) GetAccessToken(ctx context.Context, in *EgaPayEmpty, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	out := new(AccessTokenResponse)
	err := c.cc.Invoke(ctx, EgaPayDeveloperApiSvc_GetAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egaPayDeveloperApiSvcClient) GetAccountHolderInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error) {
	out := new(GetAccountInfoResponse)
	err := c.cc.Invoke(ctx, EgaPayDeveloperApiSvc_GetAccountHolderInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egaPayDeveloperApiSvcClient) GetCollectionServiceList(ctx context.Context, in *GetServiceListRequest, opts ...grpc.CallOption) (*GetServiceListResponse, error) {
	out := new(GetServiceListResponse)
	err := c.cc.Invoke(ctx, EgaPayDeveloperApiSvc_GetCollectionServiceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egaPayDeveloperApiSvcClient) GetPayoutServiceList(ctx context.Context, in *GetServiceListRequest, opts ...grpc.CallOption) (*GetServiceListResponse, error) {
	out := new(GetServiceListResponse)
	err := c.cc.Invoke(ctx, EgaPayDeveloperApiSvc_GetPayoutServiceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egaPayDeveloperApiSvcClient) PayoutCreditAccount(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, EgaPayDeveloperApiSvc_PayoutCreditAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egaPayDeveloperApiSvcClient) CollectionDebitAccount(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, EgaPayDeveloperApiSvc_CollectionDebitAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egaPayDeveloperApiSvcClient) TransactionStatusQuery(ctx context.Context, in *QueryTransferStatusRequest, opts ...grpc.CallOption) (*QueryTransferStatusTransferResponse, error) {
	out := new(QueryTransferStatusTransferResponse)
	err := c.cc.Invoke(ctx, EgaPayDeveloperApiSvc_TransactionStatusQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EgaPayDeveloperApiSvcServer is the server API for EgaPayDeveloperApiSvc service.
// All implementations must embed UnimplementedEgaPayDeveloperApiSvcServer
// for forward compatibility
type EgaPayDeveloperApiSvcServer interface {
	GetAccessToken(context.Context, *EgaPayEmpty) (*AccessTokenResponse, error)
	GetAccountHolderInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error)
	GetCollectionServiceList(context.Context, *GetServiceListRequest) (*GetServiceListResponse, error)
	GetPayoutServiceList(context.Context, *GetServiceListRequest) (*GetServiceListResponse, error)
	PayoutCreditAccount(context.Context, *TransferRequest) (*TransferResponse, error)
	CollectionDebitAccount(context.Context, *TransferRequest) (*TransferResponse, error)
	TransactionStatusQuery(context.Context, *QueryTransferStatusRequest) (*QueryTransferStatusTransferResponse, error)
	mustEmbedUnimplementedEgaPayDeveloperApiSvcServer()
}

// UnimplementedEgaPayDeveloperApiSvcServer must be embedded to have forward compatible implementations.
type UnimplementedEgaPayDeveloperApiSvcServer struct {
}

func (UnimplementedEgaPayDeveloperApiSvcServer) GetAccessToken(context.Context, *EgaPayEmpty) (*AccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedEgaPayDeveloperApiSvcServer) GetAccountHolderInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountHolderInfo not implemented")
}
func (UnimplementedEgaPayDeveloperApiSvcServer) GetCollectionServiceList(context.Context, *GetServiceListRequest) (*GetServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionServiceList not implemented")
}
func (UnimplementedEgaPayDeveloperApiSvcServer) GetPayoutServiceList(context.Context, *GetServiceListRequest) (*GetServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayoutServiceList not implemented")
}
func (UnimplementedEgaPayDeveloperApiSvcServer) PayoutCreditAccount(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayoutCreditAccount not implemented")
}
func (UnimplementedEgaPayDeveloperApiSvcServer) CollectionDebitAccount(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionDebitAccount not implemented")
}
func (UnimplementedEgaPayDeveloperApiSvcServer) TransactionStatusQuery(context.Context, *QueryTransferStatusRequest) (*QueryTransferStatusTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionStatusQuery not implemented")
}
func (UnimplementedEgaPayDeveloperApiSvcServer) mustEmbedUnimplementedEgaPayDeveloperApiSvcServer() {}

// UnsafeEgaPayDeveloperApiSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EgaPayDeveloperApiSvcServer will
// result in compilation errors.
type UnsafeEgaPayDeveloperApiSvcServer interface {
	mustEmbedUnimplementedEgaPayDeveloperApiSvcServer()
}

func RegisterEgaPayDeveloperApiSvcServer(s grpc.ServiceRegistrar, srv EgaPayDeveloperApiSvcServer) {
	s.RegisterService(&EgaPayDeveloperApiSvc_ServiceDesc, srv)
}

func _EgaPayDeveloperApiSvc_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EgaPayEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgaPayDeveloperApiSvcServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgaPayDeveloperApiSvc_GetAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgaPayDeveloperApiSvcServer).GetAccessToken(ctx, req.(*EgaPayEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgaPayDeveloperApiSvc_GetAccountHolderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgaPayDeveloperApiSvcServer).GetAccountHolderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgaPayDeveloperApiSvc_GetAccountHolderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgaPayDeveloperApiSvcServer).GetAccountHolderInfo(ctx, req.(*GetAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgaPayDeveloperApiSvc_GetCollectionServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgaPayDeveloperApiSvcServer).GetCollectionServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgaPayDeveloperApiSvc_GetCollectionServiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgaPayDeveloperApiSvcServer).GetCollectionServiceList(ctx, req.(*GetServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgaPayDeveloperApiSvc_GetPayoutServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgaPayDeveloperApiSvcServer).GetPayoutServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgaPayDeveloperApiSvc_GetPayoutServiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgaPayDeveloperApiSvcServer).GetPayoutServiceList(ctx, req.(*GetServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgaPayDeveloperApiSvc_PayoutCreditAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgaPayDeveloperApiSvcServer).PayoutCreditAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgaPayDeveloperApiSvc_PayoutCreditAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgaPayDeveloperApiSvcServer).PayoutCreditAccount(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgaPayDeveloperApiSvc_CollectionDebitAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgaPayDeveloperApiSvcServer).CollectionDebitAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgaPayDeveloperApiSvc_CollectionDebitAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgaPayDeveloperApiSvcServer).CollectionDebitAccount(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgaPayDeveloperApiSvc_TransactionStatusQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgaPayDeveloperApiSvcServer).TransactionStatusQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgaPayDeveloperApiSvc_TransactionStatusQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgaPayDeveloperApiSvcServer).TransactionStatusQuery(ctx, req.(*QueryTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EgaPayDeveloperApiSvc_ServiceDesc is the grpc.ServiceDesc for EgaPayDeveloperApiSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EgaPayDeveloperApiSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.payment.EgaPayDeveloperApiSvc",
	HandlerType: (*EgaPayDeveloperApiSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccessToken",
			Handler:    _EgaPayDeveloperApiSvc_GetAccessToken_Handler,
		},
		{
			MethodName: "GetAccountHolderInfo",
			Handler:    _EgaPayDeveloperApiSvc_GetAccountHolderInfo_Handler,
		},
		{
			MethodName: "GetCollectionServiceList",
			Handler:    _EgaPayDeveloperApiSvc_GetCollectionServiceList_Handler,
		},
		{
			MethodName: "GetPayoutServiceList",
			Handler:    _EgaPayDeveloperApiSvc_GetPayoutServiceList_Handler,
		},
		{
			MethodName: "PayoutCreditAccount",
			Handler:    _EgaPayDeveloperApiSvc_PayoutCreditAccount_Handler,
		},
		{
			MethodName: "CollectionDebitAccount",
			Handler:    _EgaPayDeveloperApiSvc_CollectionDebitAccount_Handler,
		},
		{
			MethodName: "TransactionStatusQuery",
			Handler:    _EgaPayDeveloperApiSvc_TransactionStatusQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/payment/payment_service.proto",
}

const (
	MoneyTransferSvc_SendMoney_FullMethodName = "/eganow.api.payment.MoneyTransferSvc/SendMoney"
)

// MoneyTransferSvcClient is the client API for MoneyTransferSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneyTransferSvcClient interface {
	SendMoney(ctx context.Context, in *MoneyTransferRequest, opts ...grpc.CallOption) (*MoneyTransferResponse, error)
}

type moneyTransferSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyTransferSvcClient(cc grpc.ClientConnInterface) MoneyTransferSvcClient {
	return &moneyTransferSvcClient{cc}
}

func (c *moneyTransferSvcClient) SendMoney(ctx context.Context, in *MoneyTransferRequest, opts ...grpc.CallOption) (*MoneyTransferResponse, error) {
	out := new(MoneyTransferResponse)
	err := c.cc.Invoke(ctx, MoneyTransferSvc_SendMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoneyTransferSvcServer is the server API for MoneyTransferSvc service.
// All implementations must embed UnimplementedMoneyTransferSvcServer
// for forward compatibility
type MoneyTransferSvcServer interface {
	SendMoney(context.Context, *MoneyTransferRequest) (*MoneyTransferResponse, error)
	mustEmbedUnimplementedMoneyTransferSvcServer()
}

// UnimplementedMoneyTransferSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMoneyTransferSvcServer struct {
}

func (UnimplementedMoneyTransferSvcServer) SendMoney(context.Context, *MoneyTransferRequest) (*MoneyTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMoney not implemented")
}
func (UnimplementedMoneyTransferSvcServer) mustEmbedUnimplementedMoneyTransferSvcServer() {}

// UnsafeMoneyTransferSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyTransferSvcServer will
// result in compilation errors.
type UnsafeMoneyTransferSvcServer interface {
	mustEmbedUnimplementedMoneyTransferSvcServer()
}

func RegisterMoneyTransferSvcServer(s grpc.ServiceRegistrar, srv MoneyTransferSvcServer) {
	s.RegisterService(&MoneyTransferSvc_ServiceDesc, srv)
}

func _MoneyTransferSvc_SendMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoneyTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferSvcServer).SendMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferSvc_SendMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferSvcServer).SendMoney(ctx, req.(*MoneyTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoneyTransferSvc_ServiceDesc is the grpc.ServiceDesc for MoneyTransferSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoneyTransferSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.payment.MoneyTransferSvc",
	HandlerType: (*MoneyTransferSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMoney",
			Handler:    _MoneyTransferSvc_SendMoney_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/payment/payment_service.proto",
}

const (
	NameEnquirySvc_GetAccountHolderName_FullMethodName = "/eganow.api.payment.NameEnquirySvc/GetAccountHolderName"
)

// NameEnquirySvcClient is the client API for NameEnquirySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameEnquirySvcClient interface {
	GetAccountHolderName(ctx context.Context, in *NameEnquiryRequest, opts ...grpc.CallOption) (*NameEnquiryResponse, error)
}

type nameEnquirySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewNameEnquirySvcClient(cc grpc.ClientConnInterface) NameEnquirySvcClient {
	return &nameEnquirySvcClient{cc}
}

func (c *nameEnquirySvcClient) GetAccountHolderName(ctx context.Context, in *NameEnquiryRequest, opts ...grpc.CallOption) (*NameEnquiryResponse, error) {
	out := new(NameEnquiryResponse)
	err := c.cc.Invoke(ctx, NameEnquirySvc_GetAccountHolderName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameEnquirySvcServer is the server API for NameEnquirySvc service.
// All implementations must embed UnimplementedNameEnquirySvcServer
// for forward compatibility
type NameEnquirySvcServer interface {
	GetAccountHolderName(context.Context, *NameEnquiryRequest) (*NameEnquiryResponse, error)
	mustEmbedUnimplementedNameEnquirySvcServer()
}

// UnimplementedNameEnquirySvcServer must be embedded to have forward compatible implementations.
type UnimplementedNameEnquirySvcServer struct {
}

func (UnimplementedNameEnquirySvcServer) GetAccountHolderName(context.Context, *NameEnquiryRequest) (*NameEnquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountHolderName not implemented")
}
func (UnimplementedNameEnquirySvcServer) mustEmbedUnimplementedNameEnquirySvcServer() {}

// UnsafeNameEnquirySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameEnquirySvcServer will
// result in compilation errors.
type UnsafeNameEnquirySvcServer interface {
	mustEmbedUnimplementedNameEnquirySvcServer()
}

func RegisterNameEnquirySvcServer(s grpc.ServiceRegistrar, srv NameEnquirySvcServer) {
	s.RegisterService(&NameEnquirySvc_ServiceDesc, srv)
}

func _NameEnquirySvc_GetAccountHolderName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameEnquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameEnquirySvcServer).GetAccountHolderName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameEnquirySvc_GetAccountHolderName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameEnquirySvcServer).GetAccountHolderName(ctx, req.(*NameEnquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameEnquirySvc_ServiceDesc is the grpc.ServiceDesc for NameEnquirySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameEnquirySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.payment.NameEnquirySvc",
	HandlerType: (*NameEnquirySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountHolderName",
			Handler:    _NameEnquirySvc_GetAccountHolderName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/payment/payment_service.proto",
}
