// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/gateway/eganow_app/money_transfer_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const ()

// CoreEganowAppGatewayMoneyTransferSvcClient is the client API for CoreEganowAppGatewayMoneyTransferSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreEganowAppGatewayMoneyTransferSvcClient interface {
}

type coreEganowAppGatewayMoneyTransferSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreEganowAppGatewayMoneyTransferSvcClient(cc grpc.ClientConnInterface) CoreEganowAppGatewayMoneyTransferSvcClient {
	return &coreEganowAppGatewayMoneyTransferSvcClient{cc}
}

// CoreEganowAppGatewayMoneyTransferSvcServer is the server API for CoreEganowAppGatewayMoneyTransferSvc service.
// All implementations must embed UnimplementedCoreEganowAppGatewayMoneyTransferSvcServer
// for forward compatibility
type CoreEganowAppGatewayMoneyTransferSvcServer interface {
	mustEmbedUnimplementedCoreEganowAppGatewayMoneyTransferSvcServer()
}

// UnimplementedCoreEganowAppGatewayMoneyTransferSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreEganowAppGatewayMoneyTransferSvcServer struct {
}

func (UnimplementedCoreEganowAppGatewayMoneyTransferSvcServer) mustEmbedUnimplementedCoreEganowAppGatewayMoneyTransferSvcServer() {
}

// UnsafeCoreEganowAppGatewayMoneyTransferSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreEganowAppGatewayMoneyTransferSvcServer will
// result in compilation errors.
type UnsafeCoreEganowAppGatewayMoneyTransferSvcServer interface {
	mustEmbedUnimplementedCoreEganowAppGatewayMoneyTransferSvcServer()
}

func RegisterCoreEganowAppGatewayMoneyTransferSvcServer(s grpc.ServiceRegistrar, srv CoreEganowAppGatewayMoneyTransferSvcServer) {
	s.RegisterService(&CoreEganowAppGatewayMoneyTransferSvc_ServiceDesc, srv)
}

// CoreEganowAppGatewayMoneyTransferSvc_ServiceDesc is the grpc.ServiceDesc for CoreEganowAppGatewayMoneyTransferSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreEganowAppGatewayMoneyTransferSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.gateway.eganow_app.CoreEganowAppGatewayMoneyTransferSvc",
	HandlerType: (*CoreEganowAppGatewayMoneyTransferSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "eganow/api/gateway/eganow_app/money_transfer_service.proto",
}

const (
	CoreEganowAppGatewayNameEnquirySvc_GetAccountHolderName_FullMethodName     = "/eganow.api.gateway.eganow_app.CoreEganowAppGatewayNameEnquirySvc/GetAccountHolderName"
	CoreEganowAppGatewayNameEnquirySvc_GetGhQrAccountHolderName_FullMethodName = "/eganow.api.gateway.eganow_app.CoreEganowAppGatewayNameEnquirySvc/GetGhQrAccountHolderName"
)

// CoreEganowAppGatewayNameEnquirySvcClient is the client API for CoreEganowAppGatewayNameEnquirySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreEganowAppGatewayNameEnquirySvcClient interface {
	GetAccountHolderName(ctx context.Context, in *EganowAppGatewayNameEnquiryRequest, opts ...grpc.CallOption) (*EganowAppGatewayStringValue, error)
	GetGhQrAccountHolderName(ctx context.Context, in *EganowAppGatewayGhQrNameEnquiryRequest, opts ...grpc.CallOption) (*EganowAppGatewayStringValue, error)
}

type coreEganowAppGatewayNameEnquirySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreEganowAppGatewayNameEnquirySvcClient(cc grpc.ClientConnInterface) CoreEganowAppGatewayNameEnquirySvcClient {
	return &coreEganowAppGatewayNameEnquirySvcClient{cc}
}

func (c *coreEganowAppGatewayNameEnquirySvcClient) GetAccountHolderName(ctx context.Context, in *EganowAppGatewayNameEnquiryRequest, opts ...grpc.CallOption) (*EganowAppGatewayStringValue, error) {
	out := new(EganowAppGatewayStringValue)
	err := c.cc.Invoke(ctx, CoreEganowAppGatewayNameEnquirySvc_GetAccountHolderName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreEganowAppGatewayNameEnquirySvcClient) GetGhQrAccountHolderName(ctx context.Context, in *EganowAppGatewayGhQrNameEnquiryRequest, opts ...grpc.CallOption) (*EganowAppGatewayStringValue, error) {
	out := new(EganowAppGatewayStringValue)
	err := c.cc.Invoke(ctx, CoreEganowAppGatewayNameEnquirySvc_GetGhQrAccountHolderName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreEganowAppGatewayNameEnquirySvcServer is the server API for CoreEganowAppGatewayNameEnquirySvc service.
// All implementations must embed UnimplementedCoreEganowAppGatewayNameEnquirySvcServer
// for forward compatibility
type CoreEganowAppGatewayNameEnquirySvcServer interface {
	GetAccountHolderName(context.Context, *EganowAppGatewayNameEnquiryRequest) (*EganowAppGatewayStringValue, error)
	GetGhQrAccountHolderName(context.Context, *EganowAppGatewayGhQrNameEnquiryRequest) (*EganowAppGatewayStringValue, error)
	mustEmbedUnimplementedCoreEganowAppGatewayNameEnquirySvcServer()
}

// UnimplementedCoreEganowAppGatewayNameEnquirySvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreEganowAppGatewayNameEnquirySvcServer struct {
}

func (UnimplementedCoreEganowAppGatewayNameEnquirySvcServer) GetAccountHolderName(context.Context, *EganowAppGatewayNameEnquiryRequest) (*EganowAppGatewayStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountHolderName not implemented")
}
func (UnimplementedCoreEganowAppGatewayNameEnquirySvcServer) GetGhQrAccountHolderName(context.Context, *EganowAppGatewayGhQrNameEnquiryRequest) (*EganowAppGatewayStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGhQrAccountHolderName not implemented")
}
func (UnimplementedCoreEganowAppGatewayNameEnquirySvcServer) mustEmbedUnimplementedCoreEganowAppGatewayNameEnquirySvcServer() {
}

// UnsafeCoreEganowAppGatewayNameEnquirySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreEganowAppGatewayNameEnquirySvcServer will
// result in compilation errors.
type UnsafeCoreEganowAppGatewayNameEnquirySvcServer interface {
	mustEmbedUnimplementedCoreEganowAppGatewayNameEnquirySvcServer()
}

func RegisterCoreEganowAppGatewayNameEnquirySvcServer(s grpc.ServiceRegistrar, srv CoreEganowAppGatewayNameEnquirySvcServer) {
	s.RegisterService(&CoreEganowAppGatewayNameEnquirySvc_ServiceDesc, srv)
}

func _CoreEganowAppGatewayNameEnquirySvc_GetAccountHolderName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EganowAppGatewayNameEnquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreEganowAppGatewayNameEnquirySvcServer).GetAccountHolderName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreEganowAppGatewayNameEnquirySvc_GetAccountHolderName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreEganowAppGatewayNameEnquirySvcServer).GetAccountHolderName(ctx, req.(*EganowAppGatewayNameEnquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreEganowAppGatewayNameEnquirySvc_GetGhQrAccountHolderName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EganowAppGatewayGhQrNameEnquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreEganowAppGatewayNameEnquirySvcServer).GetGhQrAccountHolderName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreEganowAppGatewayNameEnquirySvc_GetGhQrAccountHolderName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreEganowAppGatewayNameEnquirySvcServer).GetGhQrAccountHolderName(ctx, req.(*EganowAppGatewayGhQrNameEnquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreEganowAppGatewayNameEnquirySvc_ServiceDesc is the grpc.ServiceDesc for CoreEganowAppGatewayNameEnquirySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreEganowAppGatewayNameEnquirySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.gateway.eganow_app.CoreEganowAppGatewayNameEnquirySvc",
	HandlerType: (*CoreEganowAppGatewayNameEnquirySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountHolderName",
			Handler:    _CoreEganowAppGatewayNameEnquirySvc_GetAccountHolderName_Handler,
		},
		{
			MethodName: "GetGhQrAccountHolderName",
			Handler:    _CoreEganowAppGatewayNameEnquirySvc_GetGhQrAccountHolderName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/gateway/eganow_app/money_transfer_service.proto",
}
