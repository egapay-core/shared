// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/customer/onboarding_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreCustomerOnboardingSvc_CreateCustomerAccount_FullMethodName       = "/eganow.api.customer.CoreCustomerOnboardingSvc/CreateCustomerAccount"
	CoreCustomerOnboardingSvc_LoginCustomer_FullMethodName               = "/eganow.api.customer.CoreCustomerOnboardingSvc/LoginCustomer"
	CoreCustomerOnboardingSvc_CheckIfCustomerAccountExist_FullMethodName = "/eganow.api.customer.CoreCustomerOnboardingSvc/CheckIfCustomerAccountExist"
)

// CoreCustomerOnboardingSvcClient is the client API for CoreCustomerOnboardingSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreCustomerOnboardingSvcClient interface {
	CreateCustomerAccount(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CustomerStringValue, error)
	LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*AuthCustomerResponse, error)
	CheckIfCustomerAccountExist(ctx context.Context, in *CheckCustomerAccountRequest, opts ...grpc.CallOption) (*AuthCustomerResponse, error)
}

type coreCustomerOnboardingSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreCustomerOnboardingSvcClient(cc grpc.ClientConnInterface) CoreCustomerOnboardingSvcClient {
	return &coreCustomerOnboardingSvcClient{cc}
}

func (c *coreCustomerOnboardingSvcClient) CreateCustomerAccount(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CustomerStringValue, error) {
	out := new(CustomerStringValue)
	err := c.cc.Invoke(ctx, CoreCustomerOnboardingSvc_CreateCustomerAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreCustomerOnboardingSvcClient) LoginCustomer(ctx context.Context, in *LoginCustomerRequest, opts ...grpc.CallOption) (*AuthCustomerResponse, error) {
	out := new(AuthCustomerResponse)
	err := c.cc.Invoke(ctx, CoreCustomerOnboardingSvc_LoginCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreCustomerOnboardingSvcClient) CheckIfCustomerAccountExist(ctx context.Context, in *CheckCustomerAccountRequest, opts ...grpc.CallOption) (*AuthCustomerResponse, error) {
	out := new(AuthCustomerResponse)
	err := c.cc.Invoke(ctx, CoreCustomerOnboardingSvc_CheckIfCustomerAccountExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreCustomerOnboardingSvcServer is the server API for CoreCustomerOnboardingSvc service.
// All implementations must embed UnimplementedCoreCustomerOnboardingSvcServer
// for forward compatibility
type CoreCustomerOnboardingSvcServer interface {
	CreateCustomerAccount(context.Context, *CreateCustomerRequest) (*CustomerStringValue, error)
	LoginCustomer(context.Context, *LoginCustomerRequest) (*AuthCustomerResponse, error)
	CheckIfCustomerAccountExist(context.Context, *CheckCustomerAccountRequest) (*AuthCustomerResponse, error)
	mustEmbedUnimplementedCoreCustomerOnboardingSvcServer()
}

// UnimplementedCoreCustomerOnboardingSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreCustomerOnboardingSvcServer struct {
}

func (UnimplementedCoreCustomerOnboardingSvcServer) CreateCustomerAccount(context.Context, *CreateCustomerRequest) (*CustomerStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerAccount not implemented")
}
func (UnimplementedCoreCustomerOnboardingSvcServer) LoginCustomer(context.Context, *LoginCustomerRequest) (*AuthCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCustomer not implemented")
}
func (UnimplementedCoreCustomerOnboardingSvcServer) CheckIfCustomerAccountExist(context.Context, *CheckCustomerAccountRequest) (*AuthCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfCustomerAccountExist not implemented")
}
func (UnimplementedCoreCustomerOnboardingSvcServer) mustEmbedUnimplementedCoreCustomerOnboardingSvcServer() {
}

// UnsafeCoreCustomerOnboardingSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreCustomerOnboardingSvcServer will
// result in compilation errors.
type UnsafeCoreCustomerOnboardingSvcServer interface {
	mustEmbedUnimplementedCoreCustomerOnboardingSvcServer()
}

func RegisterCoreCustomerOnboardingSvcServer(s grpc.ServiceRegistrar, srv CoreCustomerOnboardingSvcServer) {
	s.RegisterService(&CoreCustomerOnboardingSvc_ServiceDesc, srv)
}

func _CoreCustomerOnboardingSvc_CreateCustomerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreCustomerOnboardingSvcServer).CreateCustomerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreCustomerOnboardingSvc_CreateCustomerAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreCustomerOnboardingSvcServer).CreateCustomerAccount(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreCustomerOnboardingSvc_LoginCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreCustomerOnboardingSvcServer).LoginCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreCustomerOnboardingSvc_LoginCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreCustomerOnboardingSvcServer).LoginCustomer(ctx, req.(*LoginCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreCustomerOnboardingSvc_CheckIfCustomerAccountExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCustomerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreCustomerOnboardingSvcServer).CheckIfCustomerAccountExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreCustomerOnboardingSvc_CheckIfCustomerAccountExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreCustomerOnboardingSvcServer).CheckIfCustomerAccountExist(ctx, req.(*CheckCustomerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreCustomerOnboardingSvc_ServiceDesc is the grpc.ServiceDesc for CoreCustomerOnboardingSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreCustomerOnboardingSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.customer.CoreCustomerOnboardingSvc",
	HandlerType: (*CoreCustomerOnboardingSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomerAccount",
			Handler:    _CoreCustomerOnboardingSvc_CreateCustomerAccount_Handler,
		},
		{
			MethodName: "LoginCustomer",
			Handler:    _CoreCustomerOnboardingSvc_LoginCustomer_Handler,
		},
		{
			MethodName: "CheckIfCustomerAccountExist",
			Handler:    _CoreCustomerOnboardingSvc_CheckIfCustomerAccountExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/customer/onboarding_service.proto",
}
