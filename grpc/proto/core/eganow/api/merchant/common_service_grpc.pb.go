// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/merchant/common_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreMerchantCommonSvc_GetActiveRegulators_FullMethodName = "/eganow.api.merchant.CoreMerchantCommonSvc/GetActiveRegulators"
	CoreMerchantCommonSvc_GetActiveIndustries_FullMethodName = "/eganow.api.merchant.CoreMerchantCommonSvc/GetActiveIndustries"
)

// CoreMerchantCommonSvcClient is the client API for CoreMerchantCommonSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreMerchantCommonSvcClient interface {
	GetActiveRegulators(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*MerchantRegulatorList, error)
	GetActiveIndustries(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*MerchantIndustryList, error)
}

type coreMerchantCommonSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreMerchantCommonSvcClient(cc grpc.ClientConnInterface) CoreMerchantCommonSvcClient {
	return &coreMerchantCommonSvcClient{cc}
}

func (c *coreMerchantCommonSvcClient) GetActiveRegulators(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*MerchantRegulatorList, error) {
	out := new(MerchantRegulatorList)
	err := c.cc.Invoke(ctx, CoreMerchantCommonSvc_GetActiveRegulators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreMerchantCommonSvcClient) GetActiveIndustries(ctx context.Context, in *MerchantEmpty, opts ...grpc.CallOption) (*MerchantIndustryList, error) {
	out := new(MerchantIndustryList)
	err := c.cc.Invoke(ctx, CoreMerchantCommonSvc_GetActiveIndustries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreMerchantCommonSvcServer is the server API for CoreMerchantCommonSvc service.
// All implementations must embed UnimplementedCoreMerchantCommonSvcServer
// for forward compatibility
type CoreMerchantCommonSvcServer interface {
	GetActiveRegulators(context.Context, *MerchantEmpty) (*MerchantRegulatorList, error)
	GetActiveIndustries(context.Context, *MerchantEmpty) (*MerchantIndustryList, error)
	mustEmbedUnimplementedCoreMerchantCommonSvcServer()
}

// UnimplementedCoreMerchantCommonSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreMerchantCommonSvcServer struct {
}

func (UnimplementedCoreMerchantCommonSvcServer) GetActiveRegulators(context.Context, *MerchantEmpty) (*MerchantRegulatorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveRegulators not implemented")
}
func (UnimplementedCoreMerchantCommonSvcServer) GetActiveIndustries(context.Context, *MerchantEmpty) (*MerchantIndustryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveIndustries not implemented")
}
func (UnimplementedCoreMerchantCommonSvcServer) mustEmbedUnimplementedCoreMerchantCommonSvcServer() {}

// UnsafeCoreMerchantCommonSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreMerchantCommonSvcServer will
// result in compilation errors.
type UnsafeCoreMerchantCommonSvcServer interface {
	mustEmbedUnimplementedCoreMerchantCommonSvcServer()
}

func RegisterCoreMerchantCommonSvcServer(s grpc.ServiceRegistrar, srv CoreMerchantCommonSvcServer) {
	s.RegisterService(&CoreMerchantCommonSvc_ServiceDesc, srv)
}

func _CoreMerchantCommonSvc_GetActiveRegulators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreMerchantCommonSvcServer).GetActiveRegulators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreMerchantCommonSvc_GetActiveRegulators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreMerchantCommonSvcServer).GetActiveRegulators(ctx, req.(*MerchantEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreMerchantCommonSvc_GetActiveIndustries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreMerchantCommonSvcServer).GetActiveIndustries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreMerchantCommonSvc_GetActiveIndustries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreMerchantCommonSvcServer).GetActiveIndustries(ctx, req.(*MerchantEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreMerchantCommonSvc_ServiceDesc is the grpc.ServiceDesc for CoreMerchantCommonSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreMerchantCommonSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.merchant.CoreMerchantCommonSvc",
	HandlerType: (*CoreMerchantCommonSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveRegulators",
			Handler:    _CoreMerchantCommonSvc_GetActiveRegulators_Handler,
		},
		{
			MethodName: "GetActiveIndustries",
			Handler:    _CoreMerchantCommonSvc_GetActiveIndustries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/merchant/common_service.proto",
}
