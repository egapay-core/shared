// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: eganow/api/merchant/account_payload.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BusinessLicenseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseNumber string `protobuf:"bytes,1,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"` // license number
	IssuedDate    string `protobuf:"bytes,2,opt,name=issued_date,json=issuedDate,proto3" json:"issued_date,omitempty"`          // date of issue (YYYY-MM-DD)
	ExpiryDate    string `protobuf:"bytes,3,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`          // date of expiry (YYYY-MM-DD)
}

func (x *BusinessLicenseInfo) Reset() {
	*x = BusinessLicenseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessLicenseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessLicenseInfo) ProtoMessage() {}

func (x *BusinessLicenseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessLicenseInfo.ProtoReflect.Descriptor instead.
func (*BusinessLicenseInfo) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{0}
}

func (x *BusinessLicenseInfo) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *BusinessLicenseInfo) GetIssuedDate() string {
	if x != nil {
		return x.IssuedDate
	}
	return ""
}

func (x *BusinessLicenseInfo) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

type DirectorShareholderIDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdNumber      string          `protobuf:"bytes,1,opt,name=id_number,json=idNumber,proto3" json:"id_number,omitempty"`                                     // ID number
	IdExpiryDate  string          `protobuf:"bytes,2,opt,name=id_expiry_date,json=idExpiryDate,proto3" json:"id_expiry_date,omitempty"`                       // ID expiry date (YYYY-MM-DD)
	PlaceOfIssue  string          `protobuf:"bytes,3,opt,name=place_of_issue,json=placeOfIssue,proto3" json:"place_of_issue,omitempty"`                       // place of issue
	IdType        CustomerIDTypes `protobuf:"varint,4,opt,name=id_type,json=idType,proto3,enum=eganow.api.merchant.CustomerIDTypes" json:"id_type,omitempty"` // type of ID
	IdFrontImage  []byte          `protobuf:"bytes,5,opt,name=id_front_image,json=idFrontImage,proto3" json:"id_front_image,omitempty"`                       // bytes/bas64 string of the ID front image
	IdBackImage   []byte          `protobuf:"bytes,6,opt,name=id_back_image,json=idBackImage,proto3" json:"id_back_image,omitempty"`                          // bytes/bas64 string of the ID back image
	PortraitImage []byte          `protobuf:"bytes,7,opt,name=portrait_image,json=portraitImage,proto3" json:"portrait_image,omitempty"`                      // bytes/bas64 string of the portrait image
}

func (x *DirectorShareholderIDInfo) Reset() {
	*x = DirectorShareholderIDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectorShareholderIDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectorShareholderIDInfo) ProtoMessage() {}

func (x *DirectorShareholderIDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectorShareholderIDInfo.ProtoReflect.Descriptor instead.
func (*DirectorShareholderIDInfo) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{1}
}

func (x *DirectorShareholderIDInfo) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *DirectorShareholderIDInfo) GetIdExpiryDate() string {
	if x != nil {
		return x.IdExpiryDate
	}
	return ""
}

func (x *DirectorShareholderIDInfo) GetPlaceOfIssue() string {
	if x != nil {
		return x.PlaceOfIssue
	}
	return ""
}

func (x *DirectorShareholderIDInfo) GetIdType() CustomerIDTypes {
	if x != nil {
		return x.IdType
	}
	return CustomerIDTypes_CUSTOMER_ID_TYPES_UNKNOWN
}

func (x *DirectorShareholderIDInfo) GetIdFrontImage() []byte {
	if x != nil {
		return x.IdFrontImage
	}
	return nil
}

func (x *DirectorShareholderIDInfo) GetIdBackImage() []byte {
	if x != nil {
		return x.IdBackImage
	}
	return nil
}

func (x *DirectorShareholderIDInfo) GetPortraitImage() []byte {
	if x != nil {
		return x.PortraitImage
	}
	return nil
}

type UpdateBusinessInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                      string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                           // name of the business
	TradingName               string                  `protobuf:"bytes,2,opt,name=trading_name,json=tradingName,proto3" json:"trading_name,omitempty"`                                                                                          // trading name of the business
	DateOfIncorporation       string                  `protobuf:"bytes,8,opt,name=date_of_incorporation,json=dateOfIncorporation,proto3" json:"date_of_incorporation,omitempty"`                                                                // date of incorporation (YYYY-MM-DD)
	IndustryId                string                  `protobuf:"bytes,9,opt,name=industry_id,json=industryId,proto3" json:"industry_id,omitempty"`                                                                                             // ID of business industry
	CompanyRegistrationNumber string                  `protobuf:"bytes,10,opt,name=company_registration_number,json=companyRegistrationNumber,proto3" json:"company_registration_number,omitempty"`                                             // business registration number
	Email                     string                  `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`                                                                                                                        // business email
	RegulatorId               string                  `protobuf:"bytes,13,opt,name=regulator_id,json=regulatorId,proto3" json:"regulator_id,omitempty"`                                                                                         // ID of the regulator
	CompanyRegistrationType   CompanyRegistrationType `protobuf:"varint,14,opt,name=company_registration_type,json=companyRegistrationType,proto3,enum=eganow.api.merchant.CompanyRegistrationType" json:"company_registration_type,omitempty"` // type of company registration
	LicenseInfo               *BusinessLicenseInfo    `protobuf:"bytes,15,opt,name=license_info,json=licenseInfo,proto3" json:"license_info,omitempty"`                                                                                         // license information
	TaxIdentificationNumber   string                  `protobuf:"bytes,17,opt,name=tax_identification_number,json=taxIdentificationNumber,proto3" json:"tax_identification_number,omitempty"`                                                   // tax identification number
	VatNumber                 string                  `protobuf:"bytes,18,opt,name=vat_number,json=vatNumber,proto3" json:"vat_number,omitempty"`                                                                                               // VAT number
}

func (x *UpdateBusinessInfoRequest) Reset() {
	*x = UpdateBusinessInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessInfoRequest) ProtoMessage() {}

func (x *UpdateBusinessInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessInfoRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateBusinessInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateBusinessInfoRequest) GetTradingName() string {
	if x != nil {
		return x.TradingName
	}
	return ""
}

func (x *UpdateBusinessInfoRequest) GetDateOfIncorporation() string {
	if x != nil {
		return x.DateOfIncorporation
	}
	return ""
}

func (x *UpdateBusinessInfoRequest) GetIndustryId() string {
	if x != nil {
		return x.IndustryId
	}
	return ""
}

func (x *UpdateBusinessInfoRequest) GetCompanyRegistrationNumber() string {
	if x != nil {
		return x.CompanyRegistrationNumber
	}
	return ""
}

func (x *UpdateBusinessInfoRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateBusinessInfoRequest) GetRegulatorId() string {
	if x != nil {
		return x.RegulatorId
	}
	return ""
}

func (x *UpdateBusinessInfoRequest) GetCompanyRegistrationType() CompanyRegistrationType {
	if x != nil {
		return x.CompanyRegistrationType
	}
	return CompanyRegistrationType_COMPANY_REGISTRATION_TYPE_UNKNOWN
}

func (x *UpdateBusinessInfoRequest) GetLicenseInfo() *BusinessLicenseInfo {
	if x != nil {
		return x.LicenseInfo
	}
	return nil
}

func (x *UpdateBusinessInfoRequest) GetTaxIdentificationNumber() string {
	if x != nil {
		return x.TaxIdentificationNumber
	}
	return ""
}

func (x *UpdateBusinessInfoRequest) GetVatNumber() string {
	if x != nil {
		return x.VatNumber
	}
	return ""
}

type BusinessInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName               string                  `protobuf:"bytes,1,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`                                                                                          // name of the business
	TradingName               string                  `protobuf:"bytes,2,opt,name=trading_name,json=tradingName,proto3" json:"trading_name,omitempty"`                                                                                          // trading name of the business
	DateOfIncorporation       string                  `protobuf:"bytes,8,opt,name=date_of_incorporation,json=dateOfIncorporation,proto3" json:"date_of_incorporation,omitempty"`                                                                // date of incorporation (YYYY-MM-DD)
	CompanyRegistrationNumber string                  `protobuf:"bytes,10,opt,name=company_registration_number,json=companyRegistrationNumber,proto3" json:"company_registration_number,omitempty"`                                             // business registration number
	Email                     string                  `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`                                                                                                                        // business email
	RegulatorId               string                  `protobuf:"bytes,13,opt,name=regulator_id,json=regulatorId,proto3" json:"regulator_id,omitempty"`                                                                                         // ID of the regulator
	CompanyRegistrationType   CompanyRegistrationType `protobuf:"varint,14,opt,name=company_registration_type,json=companyRegistrationType,proto3,enum=eganow.api.merchant.CompanyRegistrationType" json:"company_registration_type,omitempty"` // type of company registration
	LicenseInfo               *BusinessLicenseInfo    `protobuf:"bytes,15,opt,name=license_info,json=licenseInfo,proto3" json:"license_info,omitempty"`                                                                                         // license information
	TaxIdentificationNumber   string                  `protobuf:"bytes,17,opt,name=tax_identification_number,json=taxIdentificationNumber,proto3" json:"tax_identification_number,omitempty"`                                                   // tax identification number
	VatNumber                 string                  `protobuf:"bytes,18,opt,name=vat_number,json=vatNumber,proto3" json:"vat_number,omitempty"`                                                                                               // VAT number
	ProfilePicture            string                  `protobuf:"bytes,19,opt,name=profile_picture,json=profilePicture,proto3" json:"profile_picture,omitempty"`                                                                                // profile picture
	IndustryId                string                  `protobuf:"bytes,20,opt,name=industry_id,json=industryId,proto3" json:"industry_id,omitempty"`                                                                                            // ID of business industry
	IndustryName              string                  `protobuf:"bytes,21,opt,name=industry_name,json=industryName,proto3" json:"industry_name,omitempty"`                                                                                      // name of business industry
	AllowForEdit              bool                    `protobuf:"varint,22,opt,name=allow_for_edit,json=allowForEdit,proto3" json:"allow_for_edit,omitempty"`                                                                                   // allow this business entity to be edit from client-side
}

func (x *BusinessInfoResponse) Reset() {
	*x = BusinessInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessInfoResponse) ProtoMessage() {}

func (x *BusinessInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessInfoResponse.ProtoReflect.Descriptor instead.
func (*BusinessInfoResponse) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{3}
}

func (x *BusinessInfoResponse) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *BusinessInfoResponse) GetTradingName() string {
	if x != nil {
		return x.TradingName
	}
	return ""
}

func (x *BusinessInfoResponse) GetDateOfIncorporation() string {
	if x != nil {
		return x.DateOfIncorporation
	}
	return ""
}

func (x *BusinessInfoResponse) GetCompanyRegistrationNumber() string {
	if x != nil {
		return x.CompanyRegistrationNumber
	}
	return ""
}

func (x *BusinessInfoResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BusinessInfoResponse) GetRegulatorId() string {
	if x != nil {
		return x.RegulatorId
	}
	return ""
}

func (x *BusinessInfoResponse) GetCompanyRegistrationType() CompanyRegistrationType {
	if x != nil {
		return x.CompanyRegistrationType
	}
	return CompanyRegistrationType_COMPANY_REGISTRATION_TYPE_UNKNOWN
}

func (x *BusinessInfoResponse) GetLicenseInfo() *BusinessLicenseInfo {
	if x != nil {
		return x.LicenseInfo
	}
	return nil
}

func (x *BusinessInfoResponse) GetTaxIdentificationNumber() string {
	if x != nil {
		return x.TaxIdentificationNumber
	}
	return ""
}

func (x *BusinessInfoResponse) GetVatNumber() string {
	if x != nil {
		return x.VatNumber
	}
	return ""
}

func (x *BusinessInfoResponse) GetProfilePicture() string {
	if x != nil {
		return x.ProfilePicture
	}
	return ""
}

func (x *BusinessInfoResponse) GetIndustryId() string {
	if x != nil {
		return x.IndustryId
	}
	return ""
}

func (x *BusinessInfoResponse) GetIndustryName() string {
	if x != nil {
		return x.IndustryName
	}
	return ""
}

func (x *BusinessInfoResponse) GetAllowForEdit() bool {
	if x != nil {
		return x.AllowForEdit
	}
	return false
}

type AddBusinessContactInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostalZipCode      string          `protobuf:"bytes,3,opt,name=postal_zip_code,json=postalZipCode,proto3" json:"postal_zip_code,omitempty"`                                               // postal or zip code
	StreetAddress      string          `protobuf:"bytes,4,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`                                                 // street address
	City               string          `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`                                                                                        // city or town
	ProvinceState      string          `protobuf:"bytes,6,opt,name=province_state,json=provinceState,proto3" json:"province_state,omitempty"`                                                 // province or state or region
	DigitalAddress     string          `protobuf:"bytes,7,opt,name=digital_address,json=digitalAddress,proto3" json:"digital_address,omitempty"`                                              // digital address
	FirstOccupancyDate string          `protobuf:"bytes,10,opt,name=first_occupancy_date,json=firstOccupancyDate,proto3" json:"first_occupancy_date,omitempty"`                               // first occupancy date (YYYY-MM-DD)
	OfficeOwnership    OfficeOwnership `protobuf:"varint,8,opt,name=office_ownership,json=officeOwnership,proto3,enum=eganow.api.merchant.OfficeOwnership" json:"office_ownership,omitempty"` //
	PostalAddress      string          `protobuf:"bytes,9,opt,name=postal_address,json=postalAddress,proto3" json:"postal_address,omitempty"`                                                 // postal address
	OfficeMobileNumber string          `protobuf:"bytes,16,opt,name=office_mobile_number,json=officeMobileNumber,proto3" json:"office_mobile_number,omitempty"`                               // office mobile number
}

func (x *AddBusinessContactInfoRequest) Reset() {
	*x = AddBusinessContactInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBusinessContactInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBusinessContactInfoRequest) ProtoMessage() {}

func (x *AddBusinessContactInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBusinessContactInfoRequest.ProtoReflect.Descriptor instead.
func (*AddBusinessContactInfoRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{4}
}

func (x *AddBusinessContactInfoRequest) GetPostalZipCode() string {
	if x != nil {
		return x.PostalZipCode
	}
	return ""
}

func (x *AddBusinessContactInfoRequest) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *AddBusinessContactInfoRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AddBusinessContactInfoRequest) GetProvinceState() string {
	if x != nil {
		return x.ProvinceState
	}
	return ""
}

func (x *AddBusinessContactInfoRequest) GetDigitalAddress() string {
	if x != nil {
		return x.DigitalAddress
	}
	return ""
}

func (x *AddBusinessContactInfoRequest) GetFirstOccupancyDate() string {
	if x != nil {
		return x.FirstOccupancyDate
	}
	return ""
}

func (x *AddBusinessContactInfoRequest) GetOfficeOwnership() OfficeOwnership {
	if x != nil {
		return x.OfficeOwnership
	}
	return OfficeOwnership_OFFICE_OWNERSHIP_UNKNOWN
}

func (x *AddBusinessContactInfoRequest) GetPostalAddress() string {
	if x != nil {
		return x.PostalAddress
	}
	return ""
}

func (x *AddBusinessContactInfoRequest) GetOfficeMobileNumber() string {
	if x != nil {
		return x.OfficeMobileNumber
	}
	return ""
}

type UpdateBusinessContactInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostalZipCode      string          `protobuf:"bytes,3,opt,name=postal_zip_code,json=postalZipCode,proto3" json:"postal_zip_code,omitempty"`                                               // postal or zip code
	StreetAddress      string          `protobuf:"bytes,4,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`                                                 // street address
	City               string          `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`                                                                                        // city or town
	ProvinceState      string          `protobuf:"bytes,6,opt,name=province_state,json=provinceState,proto3" json:"province_state,omitempty"`                                                 // province or state or region
	DigitalAddress     string          `protobuf:"bytes,7,opt,name=digital_address,json=digitalAddress,proto3" json:"digital_address,omitempty"`                                              // digital address
	FirstOccupancyDate string          `protobuf:"bytes,10,opt,name=first_occupancy_date,json=firstOccupancyDate,proto3" json:"first_occupancy_date,omitempty"`                               // first occupancy date (YYYY-MM-DD)
	OfficeOwnership    OfficeOwnership `protobuf:"varint,8,opt,name=office_ownership,json=officeOwnership,proto3,enum=eganow.api.merchant.OfficeOwnership" json:"office_ownership,omitempty"` //
	PostalAddress      string          `protobuf:"bytes,9,opt,name=postal_address,json=postalAddress,proto3" json:"postal_address,omitempty"`                                                 // postal address
	OfficeMobileNumber string          `protobuf:"bytes,16,opt,name=office_mobile_number,json=officeMobileNumber,proto3" json:"office_mobile_number,omitempty"`                               // office mobile number
}

func (x *UpdateBusinessContactInfoRequest) Reset() {
	*x = UpdateBusinessContactInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessContactInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessContactInfoRequest) ProtoMessage() {}

func (x *UpdateBusinessContactInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessContactInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessContactInfoRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateBusinessContactInfoRequest) GetPostalZipCode() string {
	if x != nil {
		return x.PostalZipCode
	}
	return ""
}

func (x *UpdateBusinessContactInfoRequest) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *UpdateBusinessContactInfoRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateBusinessContactInfoRequest) GetProvinceState() string {
	if x != nil {
		return x.ProvinceState
	}
	return ""
}

func (x *UpdateBusinessContactInfoRequest) GetDigitalAddress() string {
	if x != nil {
		return x.DigitalAddress
	}
	return ""
}

func (x *UpdateBusinessContactInfoRequest) GetFirstOccupancyDate() string {
	if x != nil {
		return x.FirstOccupancyDate
	}
	return ""
}

func (x *UpdateBusinessContactInfoRequest) GetOfficeOwnership() OfficeOwnership {
	if x != nil {
		return x.OfficeOwnership
	}
	return OfficeOwnership_OFFICE_OWNERSHIP_UNKNOWN
}

func (x *UpdateBusinessContactInfoRequest) GetPostalAddress() string {
	if x != nil {
		return x.PostalAddress
	}
	return ""
}

func (x *UpdateBusinessContactInfoRequest) GetOfficeMobileNumber() string {
	if x != nil {
		return x.OfficeMobileNumber
	}
	return ""
}

type BusinessContactInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City               string          `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`                                                                                        // city or town
	ProvinceState      string          `protobuf:"bytes,2,opt,name=province_state,json=provinceState,proto3" json:"province_state,omitempty"`                                                 // province or state or region
	DigitalAddress     string          `protobuf:"bytes,3,opt,name=digital_address,json=digitalAddress,proto3" json:"digital_address,omitempty"`                                              // digital address
	PostalAddress      string          `protobuf:"bytes,4,opt,name=postal_address,json=postalAddress,proto3" json:"postal_address,omitempty"`                                                 // postal address
	PostalZipCode      string          `protobuf:"bytes,5,opt,name=postal_zip_code,json=postalZipCode,proto3" json:"postal_zip_code,omitempty"`                                               // postal or zip code
	FirstOccupancyDate string          `protobuf:"bytes,6,opt,name=first_occupancy_date,json=firstOccupancyDate,proto3" json:"first_occupancy_date,omitempty"`                                // first occupancy date (YYYY-MM-DD)
	OfficeOwnership    OfficeOwnership `protobuf:"varint,9,opt,name=office_ownership,json=officeOwnership,proto3,enum=eganow.api.merchant.OfficeOwnership" json:"office_ownership,omitempty"` // office ownership
	MobileNumber       string          `protobuf:"bytes,7,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`                                                    // office mobile number
	Email              string          `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`                                                                                      // business email
	StreetAddress      string          `protobuf:"bytes,10,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`                                                // street address
}

func (x *BusinessContactInfoResponse) Reset() {
	*x = BusinessContactInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContactInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContactInfoResponse) ProtoMessage() {}

func (x *BusinessContactInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContactInfoResponse.ProtoReflect.Descriptor instead.
func (*BusinessContactInfoResponse) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{6}
}

func (x *BusinessContactInfoResponse) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *BusinessContactInfoResponse) GetProvinceState() string {
	if x != nil {
		return x.ProvinceState
	}
	return ""
}

func (x *BusinessContactInfoResponse) GetDigitalAddress() string {
	if x != nil {
		return x.DigitalAddress
	}
	return ""
}

func (x *BusinessContactInfoResponse) GetPostalAddress() string {
	if x != nil {
		return x.PostalAddress
	}
	return ""
}

func (x *BusinessContactInfoResponse) GetPostalZipCode() string {
	if x != nil {
		return x.PostalZipCode
	}
	return ""
}

func (x *BusinessContactInfoResponse) GetFirstOccupancyDate() string {
	if x != nil {
		return x.FirstOccupancyDate
	}
	return ""
}

func (x *BusinessContactInfoResponse) GetOfficeOwnership() OfficeOwnership {
	if x != nil {
		return x.OfficeOwnership
	}
	return OfficeOwnership_OFFICE_OWNERSHIP_UNKNOWN
}

func (x *BusinessContactInfoResponse) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *BusinessContactInfoResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BusinessContactInfoResponse) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

type AddBusinessContactPersonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email        string           `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`                                                  // email of the contact person
	FirstName    string           `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                         // first name of the contact person
	LastName     string           `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`                            // last name of the contact person
	MobileNumber string           `protobuf:"bytes,4,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`                // mobile number of the contact person
	Position     DirectorPosition `protobuf:"varint,5,opt,name=position,proto3,enum=eganow.api.merchant.DirectorPosition" json:"position,omitempty"` // position of the director
}

func (x *AddBusinessContactPersonRequest) Reset() {
	*x = AddBusinessContactPersonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBusinessContactPersonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBusinessContactPersonRequest) ProtoMessage() {}

func (x *AddBusinessContactPersonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBusinessContactPersonRequest.ProtoReflect.Descriptor instead.
func (*AddBusinessContactPersonRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{7}
}

func (x *AddBusinessContactPersonRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddBusinessContactPersonRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *AddBusinessContactPersonRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *AddBusinessContactPersonRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *AddBusinessContactPersonRequest) GetPosition() DirectorPosition {
	if x != nil {
		return x.Position
	}
	return DirectorPosition_DIRECTOR_POSITION_UNKNOWN
}

type UpdateBusinessContactPersonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactId    string           `protobuf:"bytes,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	FirstName    string           `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName     string           `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Position     DirectorPosition `protobuf:"varint,4,opt,name=position,proto3,enum=eganow.api.merchant.DirectorPosition" json:"position,omitempty"`
	MobileNumber string           `protobuf:"bytes,5,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`
	Email        string           `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *UpdateBusinessContactPersonRequest) Reset() {
	*x = UpdateBusinessContactPersonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessContactPersonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessContactPersonRequest) ProtoMessage() {}

func (x *UpdateBusinessContactPersonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessContactPersonRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessContactPersonRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateBusinessContactPersonRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *UpdateBusinessContactPersonRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateBusinessContactPersonRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateBusinessContactPersonRequest) GetPosition() DirectorPosition {
	if x != nil {
		return x.Position
	}
	return DirectorPosition_DIRECTOR_POSITION_UNKNOWN
}

func (x *UpdateBusinessContactPersonRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *UpdateBusinessContactPersonRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type BusinessContactPersonPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName    string           `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                         // first name of the contact person
	LastName     string           `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`                            // last name of the contact person
	Position     DirectorPosition `protobuf:"varint,3,opt,name=position,proto3,enum=eganow.api.merchant.DirectorPosition" json:"position,omitempty"` // position of the person
	MobileNumber string           `protobuf:"bytes,4,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`                // mobile number of the contact person
	Email        string           `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`                                                  // email of the contact person
	ContactId    string           `protobuf:"bytes,6,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`                         // ID of the contact person
}

func (x *BusinessContactPersonPayload) Reset() {
	*x = BusinessContactPersonPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContactPersonPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContactPersonPayload) ProtoMessage() {}

func (x *BusinessContactPersonPayload) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContactPersonPayload.ProtoReflect.Descriptor instead.
func (*BusinessContactPersonPayload) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{9}
}

func (x *BusinessContactPersonPayload) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *BusinessContactPersonPayload) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *BusinessContactPersonPayload) GetPosition() DirectorPosition {
	if x != nil {
		return x.Position
	}
	return DirectorPosition_DIRECTOR_POSITION_UNKNOWN
}

func (x *BusinessContactPersonPayload) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *BusinessContactPersonPayload) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BusinessContactPersonPayload) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

type BusinessContactListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contacts []*BusinessContactPersonPayload `protobuf:"bytes,1,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *BusinessContactListResponse) Reset() {
	*x = BusinessContactListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessContactListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessContactListResponse) ProtoMessage() {}

func (x *BusinessContactListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessContactListResponse.ProtoReflect.Descriptor instead.
func (*BusinessContactListResponse) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{10}
}

func (x *BusinessContactListResponse) GetContacts() []*BusinessContactPersonPayload {
	if x != nil {
		return x.Contacts
	}
	return nil
}

type AddDirectorShareholderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName    string                     `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                         // first name of the director
	LastName     string                     `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`                            // last name of the director
	MobileNumber string                     `protobuf:"bytes,3,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`                // mobile number of the director
	Email        string                     `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`                                                  // email of the director
	Position     DirectorPosition           `protobuf:"varint,5,opt,name=position,proto3,enum=eganow.api.merchant.DirectorPosition" json:"position,omitempty"` // position of the director
	IdInfo       *DirectorShareholderIDInfo `protobuf:"bytes,7,opt,name=id_info,json=idInfo,proto3" json:"id_info,omitempty"`                                  // ID information of the director
}

func (x *AddDirectorShareholderRequest) Reset() {
	*x = AddDirectorShareholderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDirectorShareholderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDirectorShareholderRequest) ProtoMessage() {}

func (x *AddDirectorShareholderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDirectorShareholderRequest.ProtoReflect.Descriptor instead.
func (*AddDirectorShareholderRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{11}
}

func (x *AddDirectorShareholderRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *AddDirectorShareholderRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *AddDirectorShareholderRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *AddDirectorShareholderRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddDirectorShareholderRequest) GetPosition() DirectorPosition {
	if x != nil {
		return x.Position
	}
	return DirectorPosition_DIRECTOR_POSITION_UNKNOWN
}

func (x *AddDirectorShareholderRequest) GetIdInfo() *DirectorShareholderIDInfo {
	if x != nil {
		return x.IdInfo
	}
	return nil
}

type UpdateDirectorShareholderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectorId   string                     `protobuf:"bytes,1,opt,name=director_id,json=directorId,proto3" json:"director_id,omitempty"`                      // ID of the director
	FirstName    string                     `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                         // first name of the director
	LastName     string                     `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`                            // last name of the director
	MobileNumber string                     `protobuf:"bytes,4,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`                // mobile number of the director
	Email        string                     `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`                                                  // email of the director
	Position     DirectorPosition           `protobuf:"varint,6,opt,name=position,proto3,enum=eganow.api.merchant.DirectorPosition" json:"position,omitempty"` // position of the director
	IdInfo       *DirectorShareholderIDInfo `protobuf:"bytes,8,opt,name=id_info,json=idInfo,proto3" json:"id_info,omitempty"`                                  // ID information of the director
}

func (x *UpdateDirectorShareholderRequest) Reset() {
	*x = UpdateDirectorShareholderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDirectorShareholderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDirectorShareholderRequest) ProtoMessage() {}

func (x *UpdateDirectorShareholderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDirectorShareholderRequest.ProtoReflect.Descriptor instead.
func (*UpdateDirectorShareholderRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateDirectorShareholderRequest) GetDirectorId() string {
	if x != nil {
		return x.DirectorId
	}
	return ""
}

func (x *UpdateDirectorShareholderRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateDirectorShareholderRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateDirectorShareholderRequest) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *UpdateDirectorShareholderRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateDirectorShareholderRequest) GetPosition() DirectorPosition {
	if x != nil {
		return x.Position
	}
	return DirectorPosition_DIRECTOR_POSITION_UNKNOWN
}

func (x *UpdateDirectorShareholderRequest) GetIdInfo() *DirectorShareholderIDInfo {
	if x != nil {
		return x.IdInfo
	}
	return nil
}

type DirectorShareholderPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName               string                                                       `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                                                                                                        // first name of the director
	LastName                string                                                       `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`                                                                                                           // last name of the director
	MobileNumber            string                                                       `protobuf:"bytes,3,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`                                                                                               // mobile number of the director
	Email                   string                                                       `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`                                                                                                                                 // email of the director
	Position                DirectorPosition                                             `protobuf:"varint,5,opt,name=position,proto3,enum=eganow.api.merchant.DirectorPosition" json:"position,omitempty"`                                                                                // position of the director
	DirectorShareholderType DirectorOrShareholderOrOtherType                             `protobuf:"varint,6,opt,name=director_shareholder_type,json=directorShareholderType,proto3,enum=eganow.api.merchant.DirectorOrShareholderOrOtherType" json:"director_shareholder_type,omitempty"` // type of director
	IdInfo                  *DirectorShareholderPayload_DirectorShareholderIDInfoPayload `protobuf:"bytes,7,opt,name=id_info,json=idInfo,proto3" json:"id_info,omitempty"`                                                                                                                 // ID information of the director
	DirectorId              string                                                       `protobuf:"bytes,8,opt,name=director_id,json=directorId,proto3" json:"director_id,omitempty"`                                                                                                     // ID of the director
	PassedAmlCheck          bool                                                         `protobuf:"varint,9,opt,name=passed_aml_check,json=passedAmlCheck,proto3" json:"passed_aml_check,omitempty"`                                                                                      // passed AML check
}

func (x *DirectorShareholderPayload) Reset() {
	*x = DirectorShareholderPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectorShareholderPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectorShareholderPayload) ProtoMessage() {}

func (x *DirectorShareholderPayload) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectorShareholderPayload.ProtoReflect.Descriptor instead.
func (*DirectorShareholderPayload) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{13}
}

func (x *DirectorShareholderPayload) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *DirectorShareholderPayload) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *DirectorShareholderPayload) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *DirectorShareholderPayload) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DirectorShareholderPayload) GetPosition() DirectorPosition {
	if x != nil {
		return x.Position
	}
	return DirectorPosition_DIRECTOR_POSITION_UNKNOWN
}

func (x *DirectorShareholderPayload) GetDirectorShareholderType() DirectorOrShareholderOrOtherType {
	if x != nil {
		return x.DirectorShareholderType
	}
	return DirectorOrShareholderOrOtherType_DIRECTOR_OR_SHAREHOLDER_OR_OTHER_TYPE_UNKNOWN
}

func (x *DirectorShareholderPayload) GetIdInfo() *DirectorShareholderPayload_DirectorShareholderIDInfoPayload {
	if x != nil {
		return x.IdInfo
	}
	return nil
}

func (x *DirectorShareholderPayload) GetDirectorId() string {
	if x != nil {
		return x.DirectorId
	}
	return ""
}

func (x *DirectorShareholderPayload) GetPassedAmlCheck() bool {
	if x != nil {
		return x.PassedAmlCheck
	}
	return false
}

type DirectorShareholderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectorsShareholders []*DirectorShareholderPayload `protobuf:"bytes,1,rep,name=directors_shareholders,json=directorsShareholders,proto3" json:"directors_shareholders,omitempty"`
}

func (x *DirectorShareholderListResponse) Reset() {
	*x = DirectorShareholderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectorShareholderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectorShareholderListResponse) ProtoMessage() {}

func (x *DirectorShareholderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectorShareholderListResponse.ProtoReflect.Descriptor instead.
func (*DirectorShareholderListResponse) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{14}
}

func (x *DirectorShareholderListResponse) GetDirectorsShareholders() []*DirectorShareholderPayload {
	if x != nil {
		return x.DirectorsShareholders
	}
	return nil
}

type AddBusinessDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocImage []byte `protobuf:"bytes,1,opt,name=doc_image,json=docImage,proto3" json:"doc_image,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // a short description of what the image is about (e.g. business certificate)
}

func (x *AddBusinessDocumentRequest) Reset() {
	*x = AddBusinessDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBusinessDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBusinessDocumentRequest) ProtoMessage() {}

func (x *AddBusinessDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBusinessDocumentRequest.ProtoReflect.Descriptor instead.
func (*AddBusinessDocumentRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{15}
}

func (x *AddBusinessDocumentRequest) GetDocImage() []byte {
	if x != nil {
		return x.DocImage
	}
	return nil
}

func (x *AddBusinessDocumentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateBusinessDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId    int32  `protobuf:"varint,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	DocImage []byte `protobuf:"bytes,2,opt,name=doc_image,json=docImage,proto3" json:"doc_image,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // a short description of what the image is about (e.g. business certificate)
}

func (x *UpdateBusinessDocumentRequest) Reset() {
	*x = UpdateBusinessDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessDocumentRequest) ProtoMessage() {}

func (x *UpdateBusinessDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessDocumentRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessDocumentRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateBusinessDocumentRequest) GetDocId() int32 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *UpdateBusinessDocumentRequest) GetDocImage() []byte {
	if x != nil {
		return x.DocImage
	}
	return nil
}

func (x *UpdateBusinessDocumentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BusinessDocumentPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url   string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DocId int32  `protobuf:"varint,3,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
}

func (x *BusinessDocumentPayload) Reset() {
	*x = BusinessDocumentPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessDocumentPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessDocumentPayload) ProtoMessage() {}

func (x *BusinessDocumentPayload) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessDocumentPayload.ProtoReflect.Descriptor instead.
func (*BusinessDocumentPayload) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{17}
}

func (x *BusinessDocumentPayload) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BusinessDocumentPayload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BusinessDocumentPayload) GetDocId() int32 {
	if x != nil {
		return x.DocId
	}
	return 0
}

type BusinessDocumentListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents []*BusinessDocumentPayload `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (x *BusinessDocumentListResponse) Reset() {
	*x = BusinessDocumentListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessDocumentListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessDocumentListResponse) ProtoMessage() {}

func (x *BusinessDocumentListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessDocumentListResponse.ProtoReflect.Descriptor instead.
func (*BusinessDocumentListResponse) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{18}
}

func (x *BusinessDocumentListResponse) GetDocuments() []*BusinessDocumentPayload {
	if x != nil {
		return x.Documents
	}
	return nil
}

type DirectorShareholderPayload_DirectorShareholderIDInfoPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdNumber      string          `protobuf:"bytes,1,opt,name=id_number,json=idNumber,proto3" json:"id_number,omitempty"`                                     // ID number
	IdExpiryDate  string          `protobuf:"bytes,2,opt,name=id_expiry_date,json=idExpiryDate,proto3" json:"id_expiry_date,omitempty"`                       // ID expiry date (YYYY-MM-DD)
	PlaceOfIssue  string          `protobuf:"bytes,3,opt,name=place_of_issue,json=placeOfIssue,proto3" json:"place_of_issue,omitempty"`                       // place of issue
	IdType        CustomerIDTypes `protobuf:"varint,4,opt,name=id_type,json=idType,proto3,enum=eganow.api.merchant.CustomerIDTypes" json:"id_type,omitempty"` // type of ID
	IdFrontImage  string          `protobuf:"bytes,5,opt,name=id_front_image,json=idFrontImage,proto3" json:"id_front_image,omitempty"`                       // url of the ID front image
	IdBackImage   string          `protobuf:"bytes,6,opt,name=id_back_image,json=idBackImage,proto3" json:"id_back_image,omitempty"`                          // url of the ID back image
	PortraitImage string          `protobuf:"bytes,7,opt,name=portrait_image,json=portraitImage,proto3" json:"portrait_image,omitempty"`                      // url of the portrait image
}

func (x *DirectorShareholderPayload_DirectorShareholderIDInfoPayload) Reset() {
	*x = DirectorShareholderPayload_DirectorShareholderIDInfoPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectorShareholderPayload_DirectorShareholderIDInfoPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectorShareholderPayload_DirectorShareholderIDInfoPayload) ProtoMessage() {}

func (x *DirectorShareholderPayload_DirectorShareholderIDInfoPayload) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_merchant_account_payload_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectorShareholderPayload_DirectorShareholderIDInfoPayload.ProtoReflect.Descriptor instead.
func (*DirectorShareholderPayload_DirectorShareholderIDInfoPayload) Descriptor() ([]byte, []int) {
	return file_eganow_api_merchant_account_payload_proto_rawDescGZIP(), []int{13, 0}
}

func (x *DirectorShareholderPayload_DirectorShareholderIDInfoPayload) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *DirectorShareholderPayload_DirectorShareholderIDInfoPayload) GetIdExpiryDate() string {
	if x != nil {
		return x.IdExpiryDate
	}
	return ""
}

func (x *DirectorShareholderPayload_DirectorShareholderIDInfoPayload) GetPlaceOfIssue() string {
	if x != nil {
		return x.PlaceOfIssue
	}
	return ""
}

func (x *DirectorShareholderPayload_DirectorShareholderIDInfoPayload) GetIdType() CustomerIDTypes {
	if x != nil {
		return x.IdType
	}
	return CustomerIDTypes_CUSTOMER_ID_TYPES_UNKNOWN
}

func (x *DirectorShareholderPayload_DirectorShareholderIDInfoPayload) GetIdFrontImage() string {
	if x != nil {
		return x.IdFrontImage
	}
	return ""
}

func (x *DirectorShareholderPayload_DirectorShareholderIDInfoPayload) GetIdBackImage() string {
	if x != nil {
		return x.IdBackImage
	}
	return ""
}

func (x *DirectorShareholderPayload_DirectorShareholderIDInfoPayload) GetPortraitImage() string {
	if x != nil {
		return x.PortraitImage
	}
	return ""
}

var File_eganow_api_merchant_account_payload_proto protoreflect.FileDescriptor

var file_eganow_api_merchant_account_payload_proto_rawDesc = []byte{
	0x0a, 0x29, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x65, 0x67, 0x61,
	0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x1a, 0x2b, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e,
	0x0a, 0x13, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0xd2,
	0x02, 0x0a, 0x19, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x09,
	0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x69, 0x64, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0xe4, 0x04, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x49, 0x6e,
	0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x67, 0x61, 0x6e,
	0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x19, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x17, 0x74,
	0x61, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x76, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb0, 0x05, 0x0a, 0x14, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66,
	0x49, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x65, 0x67, 0x61, 0x6e,
	0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4b, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a,
	0x19, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x74, 0x61, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x45, 0x64, 0x69, 0x74, 0x22, 0xc7, 0x03,
	0x0a, 0x1d, 0x41, 0x64, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x54,
	0x0a, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f,
	0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x35, 0x0a, 0x14, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xca, 0x03, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5a, 0x69, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a,
	0x14, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x12, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xb5, 0x03, 0x0a, 0x1b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf4, 0x01, 0x0a,
	0x1f, 0x41, 0x64, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x02, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0xf7, 0x01, 0x0a, 0x1c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x1b, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65,
	0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x1d, 0x41, 0x64,
	0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f,
	0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x07, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe9, 0x02, 0x0a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x69, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x67,
	0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbd, 0x06, 0x0a, 0x1a, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x41,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x71, 0x0a, 0x19, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x4f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6c, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x41, 0x6d, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0xbb, 0x02, 0x0a, 0x20, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x4f, 0x66, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x67, 0x61, 0x6e,
	0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x16,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65,
	0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x15, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x22, 0x52, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x17, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x6a,
	0x0a, 0x1c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_eganow_api_merchant_account_payload_proto_rawDescOnce sync.Once
	file_eganow_api_merchant_account_payload_proto_rawDescData = file_eganow_api_merchant_account_payload_proto_rawDesc
)

func file_eganow_api_merchant_account_payload_proto_rawDescGZIP() []byte {
	file_eganow_api_merchant_account_payload_proto_rawDescOnce.Do(func() {
		file_eganow_api_merchant_account_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_eganow_api_merchant_account_payload_proto_rawDescData)
	})
	return file_eganow_api_merchant_account_payload_proto_rawDescData
}

var file_eganow_api_merchant_account_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_eganow_api_merchant_account_payload_proto_goTypes = []interface{}{
	(*BusinessLicenseInfo)(nil),                                         // 0: eganow.api.merchant.BusinessLicenseInfo
	(*DirectorShareholderIDInfo)(nil),                                   // 1: eganow.api.merchant.DirectorShareholderIDInfo
	(*UpdateBusinessInfoRequest)(nil),                                   // 2: eganow.api.merchant.UpdateBusinessInfoRequest
	(*BusinessInfoResponse)(nil),                                        // 3: eganow.api.merchant.BusinessInfoResponse
	(*AddBusinessContactInfoRequest)(nil),                               // 4: eganow.api.merchant.AddBusinessContactInfoRequest
	(*UpdateBusinessContactInfoRequest)(nil),                            // 5: eganow.api.merchant.UpdateBusinessContactInfoRequest
	(*BusinessContactInfoResponse)(nil),                                 // 6: eganow.api.merchant.BusinessContactInfoResponse
	(*AddBusinessContactPersonRequest)(nil),                             // 7: eganow.api.merchant.AddBusinessContactPersonRequest
	(*UpdateBusinessContactPersonRequest)(nil),                          // 8: eganow.api.merchant.UpdateBusinessContactPersonRequest
	(*BusinessContactPersonPayload)(nil),                                // 9: eganow.api.merchant.BusinessContactPersonPayload
	(*BusinessContactListResponse)(nil),                                 // 10: eganow.api.merchant.BusinessContactListResponse
	(*AddDirectorShareholderRequest)(nil),                               // 11: eganow.api.merchant.AddDirectorShareholderRequest
	(*UpdateDirectorShareholderRequest)(nil),                            // 12: eganow.api.merchant.UpdateDirectorShareholderRequest
	(*DirectorShareholderPayload)(nil),                                  // 13: eganow.api.merchant.DirectorShareholderPayload
	(*DirectorShareholderListResponse)(nil),                             // 14: eganow.api.merchant.DirectorShareholderListResponse
	(*AddBusinessDocumentRequest)(nil),                                  // 15: eganow.api.merchant.AddBusinessDocumentRequest
	(*UpdateBusinessDocumentRequest)(nil),                               // 16: eganow.api.merchant.UpdateBusinessDocumentRequest
	(*BusinessDocumentPayload)(nil),                                     // 17: eganow.api.merchant.BusinessDocumentPayload
	(*BusinessDocumentListResponse)(nil),                                // 18: eganow.api.merchant.BusinessDocumentListResponse
	(*DirectorShareholderPayload_DirectorShareholderIDInfoPayload)(nil), // 19: eganow.api.merchant.DirectorShareholderPayload.DirectorShareholderIDInfoPayload
	(CustomerIDTypes)(0),                                                // 20: eganow.api.merchant.CustomerIDTypes
	(CompanyRegistrationType)(0),                                        // 21: eganow.api.merchant.CompanyRegistrationType
	(OfficeOwnership)(0),                                                // 22: eganow.api.merchant.OfficeOwnership
	(DirectorPosition)(0),                                               // 23: eganow.api.merchant.DirectorPosition
	(DirectorOrShareholderOrOtherType)(0),                               // 24: eganow.api.merchant.DirectorOrShareholderOrOtherType
}
var file_eganow_api_merchant_account_payload_proto_depIdxs = []int32{
	20, // 0: eganow.api.merchant.DirectorShareholderIDInfo.id_type:type_name -> eganow.api.merchant.CustomerIDTypes
	21, // 1: eganow.api.merchant.UpdateBusinessInfoRequest.company_registration_type:type_name -> eganow.api.merchant.CompanyRegistrationType
	0,  // 2: eganow.api.merchant.UpdateBusinessInfoRequest.license_info:type_name -> eganow.api.merchant.BusinessLicenseInfo
	21, // 3: eganow.api.merchant.BusinessInfoResponse.company_registration_type:type_name -> eganow.api.merchant.CompanyRegistrationType
	0,  // 4: eganow.api.merchant.BusinessInfoResponse.license_info:type_name -> eganow.api.merchant.BusinessLicenseInfo
	22, // 5: eganow.api.merchant.AddBusinessContactInfoRequest.office_ownership:type_name -> eganow.api.merchant.OfficeOwnership
	22, // 6: eganow.api.merchant.UpdateBusinessContactInfoRequest.office_ownership:type_name -> eganow.api.merchant.OfficeOwnership
	22, // 7: eganow.api.merchant.BusinessContactInfoResponse.office_ownership:type_name -> eganow.api.merchant.OfficeOwnership
	23, // 8: eganow.api.merchant.AddBusinessContactPersonRequest.position:type_name -> eganow.api.merchant.DirectorPosition
	23, // 9: eganow.api.merchant.UpdateBusinessContactPersonRequest.position:type_name -> eganow.api.merchant.DirectorPosition
	23, // 10: eganow.api.merchant.BusinessContactPersonPayload.position:type_name -> eganow.api.merchant.DirectorPosition
	9,  // 11: eganow.api.merchant.BusinessContactListResponse.contacts:type_name -> eganow.api.merchant.BusinessContactPersonPayload
	23, // 12: eganow.api.merchant.AddDirectorShareholderRequest.position:type_name -> eganow.api.merchant.DirectorPosition
	1,  // 13: eganow.api.merchant.AddDirectorShareholderRequest.id_info:type_name -> eganow.api.merchant.DirectorShareholderIDInfo
	23, // 14: eganow.api.merchant.UpdateDirectorShareholderRequest.position:type_name -> eganow.api.merchant.DirectorPosition
	1,  // 15: eganow.api.merchant.UpdateDirectorShareholderRequest.id_info:type_name -> eganow.api.merchant.DirectorShareholderIDInfo
	23, // 16: eganow.api.merchant.DirectorShareholderPayload.position:type_name -> eganow.api.merchant.DirectorPosition
	24, // 17: eganow.api.merchant.DirectorShareholderPayload.director_shareholder_type:type_name -> eganow.api.merchant.DirectorOrShareholderOrOtherType
	19, // 18: eganow.api.merchant.DirectorShareholderPayload.id_info:type_name -> eganow.api.merchant.DirectorShareholderPayload.DirectorShareholderIDInfoPayload
	13, // 19: eganow.api.merchant.DirectorShareholderListResponse.directors_shareholders:type_name -> eganow.api.merchant.DirectorShareholderPayload
	17, // 20: eganow.api.merchant.BusinessDocumentListResponse.documents:type_name -> eganow.api.merchant.BusinessDocumentPayload
	20, // 21: eganow.api.merchant.DirectorShareholderPayload.DirectorShareholderIDInfoPayload.id_type:type_name -> eganow.api.merchant.CustomerIDTypes
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_eganow_api_merchant_account_payload_proto_init() }
func file_eganow_api_merchant_account_payload_proto_init() {
	if File_eganow_api_merchant_account_payload_proto != nil {
		return
	}
	file_eganow_api_merchant_onboarding_entity_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eganow_api_merchant_account_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessLicenseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectorShareholderIDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBusinessContactInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessContactInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessContactInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBusinessContactPersonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessContactPersonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessContactPersonPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessContactListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDirectorShareholderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDirectorShareholderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectorShareholderPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectorShareholderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBusinessDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessDocumentPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessDocumentListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_merchant_account_payload_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectorShareholderPayload_DirectorShareholderIDInfoPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eganow_api_merchant_account_payload_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eganow_api_merchant_account_payload_proto_goTypes,
		DependencyIndexes: file_eganow_api_merchant_account_payload_proto_depIdxs,
		MessageInfos:      file_eganow_api_merchant_account_payload_proto_msgTypes,
	}.Build()
	File_eganow_api_merchant_account_payload_proto = out.File
	file_eganow_api_merchant_account_payload_proto_rawDesc = nil
	file_eganow_api_merchant_account_payload_proto_goTypes = nil
	file_eganow_api_merchant_account_payload_proto_depIdxs = nil
}
