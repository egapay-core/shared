// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/merchant/onboarding_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreMerchantOnboardingSvc_CreateMerchantAccount_FullMethodName        = "/eganow.api.merchant.CoreMerchantOnboardingSvc/CreateMerchantAccount"
	CoreMerchantOnboardingSvc_CheckIfMerchantAccountExists_FullMethodName = "/eganow.api.merchant.CoreMerchantOnboardingSvc/CheckIfMerchantAccountExists"
	CoreMerchantOnboardingSvc_LoginMerchant_FullMethodName                = "/eganow.api.merchant.CoreMerchantOnboardingSvc/LoginMerchant"
	CoreMerchantOnboardingSvc_RequestPasswordReset_FullMethodName         = "/eganow.api.merchant.CoreMerchantOnboardingSvc/RequestPasswordReset"
	CoreMerchantOnboardingSvc_ResetPassword_FullMethodName                = "/eganow.api.merchant.CoreMerchantOnboardingSvc/ResetPassword"
)

// CoreMerchantOnboardingSvcClient is the client API for CoreMerchantOnboardingSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreMerchantOnboardingSvcClient interface {
	// CreateMerchantAccount is a remote procedure call (RPC) that creates a new merchant account.
	// It takes a CreateMerchantRequest message as input and returns an AuthMerchantResponse message.
	// The CreateMerchantRequest message should contain the necessary information to create a new merchant account.
	// The AuthMerchantResponse message will contain the authentication details for the newly created merchant account.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/register" endpoint.
	// The body of the HTTP request should contain the CreateMerchantRequest message.
	CreateMerchantAccount(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*AuthMerchantResponse, error)
	// CheckIfMerchantAccountExists is a remote procedure call (RPC) that checks if a merchant account exists.
	// It takes a CheckMerchantAccountRequest message as input and returns a MerchantStringValue message.
	// The CheckMerchantAccountRequest message should contain the necessary information to check the existence of a merchant account.
	// The MerchantStringValue message will contain the result of the check.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/check-account" endpoint.
	// The body of the HTTP request should contain the CheckMerchantAccountRequest message.
	CheckIfMerchantAccountExists(ctx context.Context, in *CheckMerchantAccountRequest, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// LoginMerchant is a remote procedure call (RPC) that logs in a merchant.
	// It takes a LoginMerchantRequest message as input and returns an AuthMerchantResponse message.
	// The LoginMerchantRequest message should contain the necessary information to log in a merchant.
	// The AuthMerchantResponse message will contain the authentication details for the logged in merchant.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/login" endpoint.
	// The body of the HTTP request should contain the LoginMerchantRequest message.
	LoginMerchant(ctx context.Context, in *LoginMerchantRequest, opts ...grpc.CallOption) (*AuthMerchantResponse, error)
	// RequestPasswordReset is a remote procedure call (RPC) that requests a password reset for a merchant.
	// It takes a MerchantStringValue message as input and returns a MerchantStringValue message.
	// The MerchantStringValue message should contain the necessary information to request a password reset for a merchant.
	// The returned MerchantStringValue message will contain the result of the password reset request.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/request-password-reset" endpoint.
	// The body of the HTTP request should contain the MerchantStringValue message.
	RequestPasswordReset(ctx context.Context, in *MerchantStringValue, opts ...grpc.CallOption) (*MerchantStringValue, error)
	// ResetPassword is a remote procedure call (RPC) that resets a merchant's password.
	// It takes a ResetPasswordRequest message as input and returns an AuthMerchantResponse message.
	// The ResetPasswordRequest message should contain the necessary information to reset a merchant's password.
	// The AuthMerchantResponse message will contain the authentication details for the merchant after the password reset.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/reset-password" endpoint.
	// The body of the HTTP request should contain the ResetPasswordRequest message.
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*AuthMerchantResponse, error)
}

type coreMerchantOnboardingSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreMerchantOnboardingSvcClient(cc grpc.ClientConnInterface) CoreMerchantOnboardingSvcClient {
	return &coreMerchantOnboardingSvcClient{cc}
}

func (c *coreMerchantOnboardingSvcClient) CreateMerchantAccount(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*AuthMerchantResponse, error) {
	out := new(AuthMerchantResponse)
	err := c.cc.Invoke(ctx, CoreMerchantOnboardingSvc_CreateMerchantAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreMerchantOnboardingSvcClient) CheckIfMerchantAccountExists(ctx context.Context, in *CheckMerchantAccountRequest, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, CoreMerchantOnboardingSvc_CheckIfMerchantAccountExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreMerchantOnboardingSvcClient) LoginMerchant(ctx context.Context, in *LoginMerchantRequest, opts ...grpc.CallOption) (*AuthMerchantResponse, error) {
	out := new(AuthMerchantResponse)
	err := c.cc.Invoke(ctx, CoreMerchantOnboardingSvc_LoginMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreMerchantOnboardingSvcClient) RequestPasswordReset(ctx context.Context, in *MerchantStringValue, opts ...grpc.CallOption) (*MerchantStringValue, error) {
	out := new(MerchantStringValue)
	err := c.cc.Invoke(ctx, CoreMerchantOnboardingSvc_RequestPasswordReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreMerchantOnboardingSvcClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*AuthMerchantResponse, error) {
	out := new(AuthMerchantResponse)
	err := c.cc.Invoke(ctx, CoreMerchantOnboardingSvc_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreMerchantOnboardingSvcServer is the server API for CoreMerchantOnboardingSvc service.
// All implementations must embed UnimplementedCoreMerchantOnboardingSvcServer
// for forward compatibility
type CoreMerchantOnboardingSvcServer interface {
	// CreateMerchantAccount is a remote procedure call (RPC) that creates a new merchant account.
	// It takes a CreateMerchantRequest message as input and returns an AuthMerchantResponse message.
	// The CreateMerchantRequest message should contain the necessary information to create a new merchant account.
	// The AuthMerchantResponse message will contain the authentication details for the newly created merchant account.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/register" endpoint.
	// The body of the HTTP request should contain the CreateMerchantRequest message.
	CreateMerchantAccount(context.Context, *CreateMerchantRequest) (*AuthMerchantResponse, error)
	// CheckIfMerchantAccountExists is a remote procedure call (RPC) that checks if a merchant account exists.
	// It takes a CheckMerchantAccountRequest message as input and returns a MerchantStringValue message.
	// The CheckMerchantAccountRequest message should contain the necessary information to check the existence of a merchant account.
	// The MerchantStringValue message will contain the result of the check.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/check-account" endpoint.
	// The body of the HTTP request should contain the CheckMerchantAccountRequest message.
	CheckIfMerchantAccountExists(context.Context, *CheckMerchantAccountRequest) (*MerchantStringValue, error)
	// LoginMerchant is a remote procedure call (RPC) that logs in a merchant.
	// It takes a LoginMerchantRequest message as input and returns an AuthMerchantResponse message.
	// The LoginMerchantRequest message should contain the necessary information to log in a merchant.
	// The AuthMerchantResponse message will contain the authentication details for the logged in merchant.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/login" endpoint.
	// The body of the HTTP request should contain the LoginMerchantRequest message.
	LoginMerchant(context.Context, *LoginMerchantRequest) (*AuthMerchantResponse, error)
	// RequestPasswordReset is a remote procedure call (RPC) that requests a password reset for a merchant.
	// It takes a MerchantStringValue message as input and returns a MerchantStringValue message.
	// The MerchantStringValue message should contain the necessary information to request a password reset for a merchant.
	// The returned MerchantStringValue message will contain the result of the password reset request.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/request-password-reset" endpoint.
	// The body of the HTTP request should contain the MerchantStringValue message.
	RequestPasswordReset(context.Context, *MerchantStringValue) (*MerchantStringValue, error)
	// ResetPassword is a remote procedure call (RPC) that resets a merchant's password.
	// It takes a ResetPasswordRequest message as input and returns an AuthMerchantResponse message.
	// The ResetPasswordRequest message should contain the necessary information to reset a merchant's password.
	// The AuthMerchantResponse message will contain the authentication details for the merchant after the password reset.
	//
	// This RPC is accessible via a HTTP POST request to the "/api/v1/merchants/reset-password" endpoint.
	// The body of the HTTP request should contain the ResetPasswordRequest message.
	ResetPassword(context.Context, *ResetPasswordRequest) (*AuthMerchantResponse, error)
	mustEmbedUnimplementedCoreMerchantOnboardingSvcServer()
}

// UnimplementedCoreMerchantOnboardingSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreMerchantOnboardingSvcServer struct {
}

func (UnimplementedCoreMerchantOnboardingSvcServer) CreateMerchantAccount(context.Context, *CreateMerchantRequest) (*AuthMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchantAccount not implemented")
}
func (UnimplementedCoreMerchantOnboardingSvcServer) CheckIfMerchantAccountExists(context.Context, *CheckMerchantAccountRequest) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfMerchantAccountExists not implemented")
}
func (UnimplementedCoreMerchantOnboardingSvcServer) LoginMerchant(context.Context, *LoginMerchantRequest) (*AuthMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginMerchant not implemented")
}
func (UnimplementedCoreMerchantOnboardingSvcServer) RequestPasswordReset(context.Context, *MerchantStringValue) (*MerchantStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordReset not implemented")
}
func (UnimplementedCoreMerchantOnboardingSvcServer) ResetPassword(context.Context, *ResetPasswordRequest) (*AuthMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedCoreMerchantOnboardingSvcServer) mustEmbedUnimplementedCoreMerchantOnboardingSvcServer() {
}

// UnsafeCoreMerchantOnboardingSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreMerchantOnboardingSvcServer will
// result in compilation errors.
type UnsafeCoreMerchantOnboardingSvcServer interface {
	mustEmbedUnimplementedCoreMerchantOnboardingSvcServer()
}

func RegisterCoreMerchantOnboardingSvcServer(s grpc.ServiceRegistrar, srv CoreMerchantOnboardingSvcServer) {
	s.RegisterService(&CoreMerchantOnboardingSvc_ServiceDesc, srv)
}

func _CoreMerchantOnboardingSvc_CreateMerchantAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreMerchantOnboardingSvcServer).CreateMerchantAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreMerchantOnboardingSvc_CreateMerchantAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreMerchantOnboardingSvcServer).CreateMerchantAccount(ctx, req.(*CreateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreMerchantOnboardingSvc_CheckIfMerchantAccountExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMerchantAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreMerchantOnboardingSvcServer).CheckIfMerchantAccountExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreMerchantOnboardingSvc_CheckIfMerchantAccountExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreMerchantOnboardingSvcServer).CheckIfMerchantAccountExists(ctx, req.(*CheckMerchantAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreMerchantOnboardingSvc_LoginMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreMerchantOnboardingSvcServer).LoginMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreMerchantOnboardingSvc_LoginMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreMerchantOnboardingSvcServer).LoginMerchant(ctx, req.(*LoginMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreMerchantOnboardingSvc_RequestPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantStringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreMerchantOnboardingSvcServer).RequestPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreMerchantOnboardingSvc_RequestPasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreMerchantOnboardingSvcServer).RequestPasswordReset(ctx, req.(*MerchantStringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreMerchantOnboardingSvc_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreMerchantOnboardingSvcServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreMerchantOnboardingSvc_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreMerchantOnboardingSvcServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreMerchantOnboardingSvc_ServiceDesc is the grpc.ServiceDesc for CoreMerchantOnboardingSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreMerchantOnboardingSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.merchant.CoreMerchantOnboardingSvc",
	HandlerType: (*CoreMerchantOnboardingSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMerchantAccount",
			Handler:    _CoreMerchantOnboardingSvc_CreateMerchantAccount_Handler,
		},
		{
			MethodName: "CheckIfMerchantAccountExists",
			Handler:    _CoreMerchantOnboardingSvc_CheckIfMerchantAccountExists_Handler,
		},
		{
			MethodName: "LoginMerchant",
			Handler:    _CoreMerchantOnboardingSvc_LoginMerchant_Handler,
		},
		{
			MethodName: "RequestPasswordReset",
			Handler:    _CoreMerchantOnboardingSvc_RequestPasswordReset_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _CoreMerchantOnboardingSvc_ResetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/merchant/onboarding_service.proto",
}
