// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/payment/payment_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreEgaPayDeveloperApiSvc_GetAccessToken_FullMethodName           = "/eganow.api.payment.CoreEgaPayDeveloperApiSvc/GetAccessToken"
	CoreEgaPayDeveloperApiSvc_GetAccountHolderInfo_FullMethodName     = "/eganow.api.payment.CoreEgaPayDeveloperApiSvc/GetAccountHolderInfo"
	CoreEgaPayDeveloperApiSvc_GetCollectionServiceList_FullMethodName = "/eganow.api.payment.CoreEgaPayDeveloperApiSvc/GetCollectionServiceList"
	CoreEgaPayDeveloperApiSvc_GetPayoutServiceList_FullMethodName     = "/eganow.api.payment.CoreEgaPayDeveloperApiSvc/GetPayoutServiceList"
	CoreEgaPayDeveloperApiSvc_PayoutCreditAccount_FullMethodName      = "/eganow.api.payment.CoreEgaPayDeveloperApiSvc/PayoutCreditAccount"
	CoreEgaPayDeveloperApiSvc_CollectionDebitAccount_FullMethodName   = "/eganow.api.payment.CoreEgaPayDeveloperApiSvc/CollectionDebitAccount"
	CoreEgaPayDeveloperApiSvc_TransactionStatusQuery_FullMethodName   = "/eganow.api.payment.CoreEgaPayDeveloperApiSvc/TransactionStatusQuery"
)

// CoreEgaPayDeveloperApiSvcClient is the client API for CoreEgaPayDeveloperApiSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreEgaPayDeveloperApiSvcClient interface {
	GetAccessToken(ctx context.Context, in *EgaPayEmpty, opts ...grpc.CallOption) (*AccessTokenResponse, error)
	GetAccountHolderInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error)
	GetCollectionServiceList(ctx context.Context, in *GetServiceListRequest, opts ...grpc.CallOption) (*GetServiceListResponse, error)
	GetPayoutServiceList(ctx context.Context, in *GetServiceListRequest, opts ...grpc.CallOption) (*GetServiceListResponse, error)
	PayoutCreditAccount(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	CollectionDebitAccount(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	TransactionStatusQuery(ctx context.Context, in *QueryTransferStatusRequest, opts ...grpc.CallOption) (*QueryTransferStatusTransferResponse, error)
}

type coreEgaPayDeveloperApiSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreEgaPayDeveloperApiSvcClient(cc grpc.ClientConnInterface) CoreEgaPayDeveloperApiSvcClient {
	return &coreEgaPayDeveloperApiSvcClient{cc}
}

func (c *coreEgaPayDeveloperApiSvcClient) GetAccessToken(ctx context.Context, in *EgaPayEmpty, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	out := new(AccessTokenResponse)
	err := c.cc.Invoke(ctx, CoreEgaPayDeveloperApiSvc_GetAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreEgaPayDeveloperApiSvcClient) GetAccountHolderInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error) {
	out := new(GetAccountInfoResponse)
	err := c.cc.Invoke(ctx, CoreEgaPayDeveloperApiSvc_GetAccountHolderInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreEgaPayDeveloperApiSvcClient) GetCollectionServiceList(ctx context.Context, in *GetServiceListRequest, opts ...grpc.CallOption) (*GetServiceListResponse, error) {
	out := new(GetServiceListResponse)
	err := c.cc.Invoke(ctx, CoreEgaPayDeveloperApiSvc_GetCollectionServiceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreEgaPayDeveloperApiSvcClient) GetPayoutServiceList(ctx context.Context, in *GetServiceListRequest, opts ...grpc.CallOption) (*GetServiceListResponse, error) {
	out := new(GetServiceListResponse)
	err := c.cc.Invoke(ctx, CoreEgaPayDeveloperApiSvc_GetPayoutServiceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreEgaPayDeveloperApiSvcClient) PayoutCreditAccount(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, CoreEgaPayDeveloperApiSvc_PayoutCreditAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreEgaPayDeveloperApiSvcClient) CollectionDebitAccount(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, CoreEgaPayDeveloperApiSvc_CollectionDebitAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreEgaPayDeveloperApiSvcClient) TransactionStatusQuery(ctx context.Context, in *QueryTransferStatusRequest, opts ...grpc.CallOption) (*QueryTransferStatusTransferResponse, error) {
	out := new(QueryTransferStatusTransferResponse)
	err := c.cc.Invoke(ctx, CoreEgaPayDeveloperApiSvc_TransactionStatusQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreEgaPayDeveloperApiSvcServer is the server API for CoreEgaPayDeveloperApiSvc service.
// All implementations must embed UnimplementedCoreEgaPayDeveloperApiSvcServer
// for forward compatibility
type CoreEgaPayDeveloperApiSvcServer interface {
	GetAccessToken(context.Context, *EgaPayEmpty) (*AccessTokenResponse, error)
	GetAccountHolderInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error)
	GetCollectionServiceList(context.Context, *GetServiceListRequest) (*GetServiceListResponse, error)
	GetPayoutServiceList(context.Context, *GetServiceListRequest) (*GetServiceListResponse, error)
	PayoutCreditAccount(context.Context, *TransferRequest) (*TransferResponse, error)
	CollectionDebitAccount(context.Context, *TransferRequest) (*TransferResponse, error)
	TransactionStatusQuery(context.Context, *QueryTransferStatusRequest) (*QueryTransferStatusTransferResponse, error)
	mustEmbedUnimplementedCoreEgaPayDeveloperApiSvcServer()
}

// UnimplementedCoreEgaPayDeveloperApiSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreEgaPayDeveloperApiSvcServer struct {
}

func (UnimplementedCoreEgaPayDeveloperApiSvcServer) GetAccessToken(context.Context, *EgaPayEmpty) (*AccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedCoreEgaPayDeveloperApiSvcServer) GetAccountHolderInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountHolderInfo not implemented")
}
func (UnimplementedCoreEgaPayDeveloperApiSvcServer) GetCollectionServiceList(context.Context, *GetServiceListRequest) (*GetServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionServiceList not implemented")
}
func (UnimplementedCoreEgaPayDeveloperApiSvcServer) GetPayoutServiceList(context.Context, *GetServiceListRequest) (*GetServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayoutServiceList not implemented")
}
func (UnimplementedCoreEgaPayDeveloperApiSvcServer) PayoutCreditAccount(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayoutCreditAccount not implemented")
}
func (UnimplementedCoreEgaPayDeveloperApiSvcServer) CollectionDebitAccount(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionDebitAccount not implemented")
}
func (UnimplementedCoreEgaPayDeveloperApiSvcServer) TransactionStatusQuery(context.Context, *QueryTransferStatusRequest) (*QueryTransferStatusTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionStatusQuery not implemented")
}
func (UnimplementedCoreEgaPayDeveloperApiSvcServer) mustEmbedUnimplementedCoreEgaPayDeveloperApiSvcServer() {
}

// UnsafeCoreEgaPayDeveloperApiSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreEgaPayDeveloperApiSvcServer will
// result in compilation errors.
type UnsafeCoreEgaPayDeveloperApiSvcServer interface {
	mustEmbedUnimplementedCoreEgaPayDeveloperApiSvcServer()
}

func RegisterCoreEgaPayDeveloperApiSvcServer(s grpc.ServiceRegistrar, srv CoreEgaPayDeveloperApiSvcServer) {
	s.RegisterService(&CoreEgaPayDeveloperApiSvc_ServiceDesc, srv)
}

func _CoreEgaPayDeveloperApiSvc_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EgaPayEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreEgaPayDeveloperApiSvcServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreEgaPayDeveloperApiSvc_GetAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreEgaPayDeveloperApiSvcServer).GetAccessToken(ctx, req.(*EgaPayEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreEgaPayDeveloperApiSvc_GetAccountHolderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreEgaPayDeveloperApiSvcServer).GetAccountHolderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreEgaPayDeveloperApiSvc_GetAccountHolderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreEgaPayDeveloperApiSvcServer).GetAccountHolderInfo(ctx, req.(*GetAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreEgaPayDeveloperApiSvc_GetCollectionServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreEgaPayDeveloperApiSvcServer).GetCollectionServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreEgaPayDeveloperApiSvc_GetCollectionServiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreEgaPayDeveloperApiSvcServer).GetCollectionServiceList(ctx, req.(*GetServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreEgaPayDeveloperApiSvc_GetPayoutServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreEgaPayDeveloperApiSvcServer).GetPayoutServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreEgaPayDeveloperApiSvc_GetPayoutServiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreEgaPayDeveloperApiSvcServer).GetPayoutServiceList(ctx, req.(*GetServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreEgaPayDeveloperApiSvc_PayoutCreditAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreEgaPayDeveloperApiSvcServer).PayoutCreditAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreEgaPayDeveloperApiSvc_PayoutCreditAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreEgaPayDeveloperApiSvcServer).PayoutCreditAccount(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreEgaPayDeveloperApiSvc_CollectionDebitAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreEgaPayDeveloperApiSvcServer).CollectionDebitAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreEgaPayDeveloperApiSvc_CollectionDebitAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreEgaPayDeveloperApiSvcServer).CollectionDebitAccount(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreEgaPayDeveloperApiSvc_TransactionStatusQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreEgaPayDeveloperApiSvcServer).TransactionStatusQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreEgaPayDeveloperApiSvc_TransactionStatusQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreEgaPayDeveloperApiSvcServer).TransactionStatusQuery(ctx, req.(*QueryTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreEgaPayDeveloperApiSvc_ServiceDesc is the grpc.ServiceDesc for CoreEgaPayDeveloperApiSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreEgaPayDeveloperApiSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.payment.CoreEgaPayDeveloperApiSvc",
	HandlerType: (*CoreEgaPayDeveloperApiSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccessToken",
			Handler:    _CoreEgaPayDeveloperApiSvc_GetAccessToken_Handler,
		},
		{
			MethodName: "GetAccountHolderInfo",
			Handler:    _CoreEgaPayDeveloperApiSvc_GetAccountHolderInfo_Handler,
		},
		{
			MethodName: "GetCollectionServiceList",
			Handler:    _CoreEgaPayDeveloperApiSvc_GetCollectionServiceList_Handler,
		},
		{
			MethodName: "GetPayoutServiceList",
			Handler:    _CoreEgaPayDeveloperApiSvc_GetPayoutServiceList_Handler,
		},
		{
			MethodName: "PayoutCreditAccount",
			Handler:    _CoreEgaPayDeveloperApiSvc_PayoutCreditAccount_Handler,
		},
		{
			MethodName: "CollectionDebitAccount",
			Handler:    _CoreEgaPayDeveloperApiSvc_CollectionDebitAccount_Handler,
		},
		{
			MethodName: "TransactionStatusQuery",
			Handler:    _CoreEgaPayDeveloperApiSvc_TransactionStatusQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/payment/payment_service.proto",
}

const (
	CoreMoneyTransferSvc_SendMoney_FullMethodName = "/eganow.api.payment.CoreMoneyTransferSvc/SendMoney"
)

// CoreMoneyTransferSvcClient is the client API for CoreMoneyTransferSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreMoneyTransferSvcClient interface {
	SendMoney(ctx context.Context, in *MoneyTransferRequest, opts ...grpc.CallOption) (*MoneyTransferResponse, error)
}

type coreMoneyTransferSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreMoneyTransferSvcClient(cc grpc.ClientConnInterface) CoreMoneyTransferSvcClient {
	return &coreMoneyTransferSvcClient{cc}
}

func (c *coreMoneyTransferSvcClient) SendMoney(ctx context.Context, in *MoneyTransferRequest, opts ...grpc.CallOption) (*MoneyTransferResponse, error) {
	out := new(MoneyTransferResponse)
	err := c.cc.Invoke(ctx, CoreMoneyTransferSvc_SendMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreMoneyTransferSvcServer is the server API for CoreMoneyTransferSvc service.
// All implementations must embed UnimplementedCoreMoneyTransferSvcServer
// for forward compatibility
type CoreMoneyTransferSvcServer interface {
	SendMoney(context.Context, *MoneyTransferRequest) (*MoneyTransferResponse, error)
	mustEmbedUnimplementedCoreMoneyTransferSvcServer()
}

// UnimplementedCoreMoneyTransferSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreMoneyTransferSvcServer struct {
}

func (UnimplementedCoreMoneyTransferSvcServer) SendMoney(context.Context, *MoneyTransferRequest) (*MoneyTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMoney not implemented")
}
func (UnimplementedCoreMoneyTransferSvcServer) mustEmbedUnimplementedCoreMoneyTransferSvcServer() {}

// UnsafeCoreMoneyTransferSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreMoneyTransferSvcServer will
// result in compilation errors.
type UnsafeCoreMoneyTransferSvcServer interface {
	mustEmbedUnimplementedCoreMoneyTransferSvcServer()
}

func RegisterCoreMoneyTransferSvcServer(s grpc.ServiceRegistrar, srv CoreMoneyTransferSvcServer) {
	s.RegisterService(&CoreMoneyTransferSvc_ServiceDesc, srv)
}

func _CoreMoneyTransferSvc_SendMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoneyTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreMoneyTransferSvcServer).SendMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreMoneyTransferSvc_SendMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreMoneyTransferSvcServer).SendMoney(ctx, req.(*MoneyTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreMoneyTransferSvc_ServiceDesc is the grpc.ServiceDesc for CoreMoneyTransferSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreMoneyTransferSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.payment.CoreMoneyTransferSvc",
	HandlerType: (*CoreMoneyTransferSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMoney",
			Handler:    _CoreMoneyTransferSvc_SendMoney_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/payment/payment_service.proto",
}

const (
	CoreNameEnquirySvc_GetAccountHolderName_FullMethodName = "/eganow.api.payment.CoreNameEnquirySvc/GetAccountHolderName"
)

// CoreNameEnquirySvcClient is the client API for CoreNameEnquirySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreNameEnquirySvcClient interface {
	GetAccountHolderName(ctx context.Context, in *NameEnquiryRequest, opts ...grpc.CallOption) (*NameEnquiryResponse, error)
}

type coreNameEnquirySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreNameEnquirySvcClient(cc grpc.ClientConnInterface) CoreNameEnquirySvcClient {
	return &coreNameEnquirySvcClient{cc}
}

func (c *coreNameEnquirySvcClient) GetAccountHolderName(ctx context.Context, in *NameEnquiryRequest, opts ...grpc.CallOption) (*NameEnquiryResponse, error) {
	out := new(NameEnquiryResponse)
	err := c.cc.Invoke(ctx, CoreNameEnquirySvc_GetAccountHolderName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreNameEnquirySvcServer is the server API for CoreNameEnquirySvc service.
// All implementations must embed UnimplementedCoreNameEnquirySvcServer
// for forward compatibility
type CoreNameEnquirySvcServer interface {
	GetAccountHolderName(context.Context, *NameEnquiryRequest) (*NameEnquiryResponse, error)
	mustEmbedUnimplementedCoreNameEnquirySvcServer()
}

// UnimplementedCoreNameEnquirySvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreNameEnquirySvcServer struct {
}

func (UnimplementedCoreNameEnquirySvcServer) GetAccountHolderName(context.Context, *NameEnquiryRequest) (*NameEnquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountHolderName not implemented")
}
func (UnimplementedCoreNameEnquirySvcServer) mustEmbedUnimplementedCoreNameEnquirySvcServer() {}

// UnsafeCoreNameEnquirySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreNameEnquirySvcServer will
// result in compilation errors.
type UnsafeCoreNameEnquirySvcServer interface {
	mustEmbedUnimplementedCoreNameEnquirySvcServer()
}

func RegisterCoreNameEnquirySvcServer(s grpc.ServiceRegistrar, srv CoreNameEnquirySvcServer) {
	s.RegisterService(&CoreNameEnquirySvc_ServiceDesc, srv)
}

func _CoreNameEnquirySvc_GetAccountHolderName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameEnquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreNameEnquirySvcServer).GetAccountHolderName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreNameEnquirySvc_GetAccountHolderName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreNameEnquirySvcServer).GetAccountHolderName(ctx, req.(*NameEnquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreNameEnquirySvc_ServiceDesc is the grpc.ServiceDesc for CoreNameEnquirySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreNameEnquirySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.payment.CoreNameEnquirySvc",
	HandlerType: (*CoreNameEnquirySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountHolderName",
			Handler:    _CoreNameEnquirySvc_GetAccountHolderName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/payment/payment_service.proto",
}
