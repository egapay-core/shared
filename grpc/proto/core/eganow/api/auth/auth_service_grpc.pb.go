// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/auth/auth_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreTokenSvc_CreateToken_FullMethodName   = "/eganow.api.auth.CoreTokenSvc/CreateToken"
	CoreTokenSvc_ValidateToken_FullMethodName = "/eganow.api.auth.CoreTokenSvc/ValidateToken"
	CoreTokenSvc_RevokeToken_FullMethodName   = "/eganow.api.auth.CoreTokenSvc/RevokeToken"
)

// CoreTokenSvcClient is the client API for CoreTokenSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreTokenSvcClient interface {
	CreateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AuthStringValue, error)
	ValidateToken(ctx context.Context, in *AuthStringValue, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	RevokeToken(ctx context.Context, in *AuthStringValue, opts ...grpc.CallOption) (*AuthStringValue, error)
}

type coreTokenSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreTokenSvcClient(cc grpc.ClientConnInterface) CoreTokenSvcClient {
	return &coreTokenSvcClient{cc}
}

func (c *coreTokenSvcClient) CreateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AuthStringValue, error) {
	out := new(AuthStringValue)
	err := c.cc.Invoke(ctx, CoreTokenSvc_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreTokenSvcClient) ValidateToken(ctx context.Context, in *AuthStringValue, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, CoreTokenSvc_ValidateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreTokenSvcClient) RevokeToken(ctx context.Context, in *AuthStringValue, opts ...grpc.CallOption) (*AuthStringValue, error) {
	out := new(AuthStringValue)
	err := c.cc.Invoke(ctx, CoreTokenSvc_RevokeToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreTokenSvcServer is the server API for CoreTokenSvc service.
// All implementations must embed UnimplementedCoreTokenSvcServer
// for forward compatibility
type CoreTokenSvcServer interface {
	CreateToken(context.Context, *TokenRequest) (*AuthStringValue, error)
	ValidateToken(context.Context, *AuthStringValue) (*ValidateTokenResponse, error)
	RevokeToken(context.Context, *AuthStringValue) (*AuthStringValue, error)
	mustEmbedUnimplementedCoreTokenSvcServer()
}

// UnimplementedCoreTokenSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreTokenSvcServer struct {
}

func (UnimplementedCoreTokenSvcServer) CreateToken(context.Context, *TokenRequest) (*AuthStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedCoreTokenSvcServer) ValidateToken(context.Context, *AuthStringValue) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedCoreTokenSvcServer) RevokeToken(context.Context, *AuthStringValue) (*AuthStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedCoreTokenSvcServer) mustEmbedUnimplementedCoreTokenSvcServer() {}

// UnsafeCoreTokenSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreTokenSvcServer will
// result in compilation errors.
type UnsafeCoreTokenSvcServer interface {
	mustEmbedUnimplementedCoreTokenSvcServer()
}

func RegisterCoreTokenSvcServer(s grpc.ServiceRegistrar, srv CoreTokenSvcServer) {
	s.RegisterService(&CoreTokenSvc_ServiceDesc, srv)
}

func _CoreTokenSvc_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreTokenSvcServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreTokenSvc_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreTokenSvcServer).CreateToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreTokenSvc_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthStringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreTokenSvcServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreTokenSvc_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreTokenSvcServer).ValidateToken(ctx, req.(*AuthStringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreTokenSvc_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthStringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreTokenSvcServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreTokenSvc_RevokeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreTokenSvcServer).RevokeToken(ctx, req.(*AuthStringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreTokenSvc_ServiceDesc is the grpc.ServiceDesc for CoreTokenSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreTokenSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.auth.CoreTokenSvc",
	HandlerType: (*CoreTokenSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _CoreTokenSvc_CreateToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _CoreTokenSvc_ValidateToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _CoreTokenSvc_RevokeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/auth/auth_service.proto",
}

const ()

// CoreAuthSvcClient is the client API for CoreAuthSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreAuthSvcClient interface {
}

type coreAuthSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreAuthSvcClient(cc grpc.ClientConnInterface) CoreAuthSvcClient {
	return &coreAuthSvcClient{cc}
}

// CoreAuthSvcServer is the server API for CoreAuthSvc service.
// All implementations must embed UnimplementedCoreAuthSvcServer
// for forward compatibility
type CoreAuthSvcServer interface {
	mustEmbedUnimplementedCoreAuthSvcServer()
}

// UnimplementedCoreAuthSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreAuthSvcServer struct {
}

func (UnimplementedCoreAuthSvcServer) mustEmbedUnimplementedCoreAuthSvcServer() {}

// UnsafeCoreAuthSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreAuthSvcServer will
// result in compilation errors.
type UnsafeCoreAuthSvcServer interface {
	mustEmbedUnimplementedCoreAuthSvcServer()
}

func RegisterCoreAuthSvcServer(s grpc.ServiceRegistrar, srv CoreAuthSvcServer) {
	s.RegisterService(&CoreAuthSvc_ServiceDesc, srv)
}

// CoreAuthSvc_ServiceDesc is the grpc.ServiceDesc for CoreAuthSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreAuthSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.auth.CoreAuthSvc",
	HandlerType: (*CoreAuthSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "eganow/api/auth/auth_service.proto",
}
