// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/common/otp_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreOtpSvc_SendOTP_FullMethodName   = "/eganow.api.common.CoreOtpSvc/SendOTP"
	CoreOtpSvc_VerifyOTP_FullMethodName = "/eganow.api.common.CoreOtpSvc/VerifyOTP"
)

// CoreOtpSvcClient is the client API for CoreOtpSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreOtpSvcClient interface {
	// send OTP to a given phone number or email
	SendOTP(ctx context.Context, in *SendOTPRequest, opts ...grpc.CallOption) (*CommonStringValue, error)
	// verify OTP for a given phone number or email
	VerifyOTP(ctx context.Context, in *VerifyOTPRequest, opts ...grpc.CallOption) (*CommonStringValue, error)
}

type coreOtpSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreOtpSvcClient(cc grpc.ClientConnInterface) CoreOtpSvcClient {
	return &coreOtpSvcClient{cc}
}

func (c *coreOtpSvcClient) SendOTP(ctx context.Context, in *SendOTPRequest, opts ...grpc.CallOption) (*CommonStringValue, error) {
	out := new(CommonStringValue)
	err := c.cc.Invoke(ctx, CoreOtpSvc_SendOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreOtpSvcClient) VerifyOTP(ctx context.Context, in *VerifyOTPRequest, opts ...grpc.CallOption) (*CommonStringValue, error) {
	out := new(CommonStringValue)
	err := c.cc.Invoke(ctx, CoreOtpSvc_VerifyOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreOtpSvcServer is the server API for CoreOtpSvc service.
// All implementations must embed UnimplementedCoreOtpSvcServer
// for forward compatibility
type CoreOtpSvcServer interface {
	// send OTP to a given phone number or email
	SendOTP(context.Context, *SendOTPRequest) (*CommonStringValue, error)
	// verify OTP for a given phone number or email
	VerifyOTP(context.Context, *VerifyOTPRequest) (*CommonStringValue, error)
	mustEmbedUnimplementedCoreOtpSvcServer()
}

// UnimplementedCoreOtpSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreOtpSvcServer struct {
}

func (UnimplementedCoreOtpSvcServer) SendOTP(context.Context, *SendOTPRequest) (*CommonStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOTP not implemented")
}
func (UnimplementedCoreOtpSvcServer) VerifyOTP(context.Context, *VerifyOTPRequest) (*CommonStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOTP not implemented")
}
func (UnimplementedCoreOtpSvcServer) mustEmbedUnimplementedCoreOtpSvcServer() {}

// UnsafeCoreOtpSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreOtpSvcServer will
// result in compilation errors.
type UnsafeCoreOtpSvcServer interface {
	mustEmbedUnimplementedCoreOtpSvcServer()
}

func RegisterCoreOtpSvcServer(s grpc.ServiceRegistrar, srv CoreOtpSvcServer) {
	s.RegisterService(&CoreOtpSvc_ServiceDesc, srv)
}

func _CoreOtpSvc_SendOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreOtpSvcServer).SendOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreOtpSvc_SendOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreOtpSvcServer).SendOTP(ctx, req.(*SendOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreOtpSvc_VerifyOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreOtpSvcServer).VerifyOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreOtpSvc_VerifyOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreOtpSvcServer).VerifyOTP(ctx, req.(*VerifyOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreOtpSvc_ServiceDesc is the grpc.ServiceDesc for CoreOtpSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreOtpSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.common.CoreOtpSvc",
	HandlerType: (*CoreOtpSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOTP",
			Handler:    _CoreOtpSvc_SendOTP_Handler,
		},
		{
			MethodName: "VerifyOTP",
			Handler:    _CoreOtpSvc_VerifyOTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/common/otp_service.proto",
}
