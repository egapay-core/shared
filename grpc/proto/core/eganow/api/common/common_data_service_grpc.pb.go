// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/common/common_data_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreCommonDataSvc_GetCountries_FullMethodName = "/eganow.api.common.CoreCommonDataSvc/GetCountries"
)

// CoreCommonDataSvcClient is the client API for CoreCommonDataSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreCommonDataSvcClient interface {
	// get countries list
	GetCountries(ctx context.Context, in *GetCountriesRequest, opts ...grpc.CallOption) (*GetCountriesResponse, error)
}

type coreCommonDataSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreCommonDataSvcClient(cc grpc.ClientConnInterface) CoreCommonDataSvcClient {
	return &coreCommonDataSvcClient{cc}
}

func (c *coreCommonDataSvcClient) GetCountries(ctx context.Context, in *GetCountriesRequest, opts ...grpc.CallOption) (*GetCountriesResponse, error) {
	out := new(GetCountriesResponse)
	err := c.cc.Invoke(ctx, CoreCommonDataSvc_GetCountries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreCommonDataSvcServer is the server API for CoreCommonDataSvc service.
// All implementations must embed UnimplementedCoreCommonDataSvcServer
// for forward compatibility
type CoreCommonDataSvcServer interface {
	// get countries list
	GetCountries(context.Context, *GetCountriesRequest) (*GetCountriesResponse, error)
	mustEmbedUnimplementedCoreCommonDataSvcServer()
}

// UnimplementedCoreCommonDataSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreCommonDataSvcServer struct {
}

func (UnimplementedCoreCommonDataSvcServer) GetCountries(context.Context, *GetCountriesRequest) (*GetCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountries not implemented")
}
func (UnimplementedCoreCommonDataSvcServer) mustEmbedUnimplementedCoreCommonDataSvcServer() {}

// UnsafeCoreCommonDataSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreCommonDataSvcServer will
// result in compilation errors.
type UnsafeCoreCommonDataSvcServer interface {
	mustEmbedUnimplementedCoreCommonDataSvcServer()
}

func RegisterCoreCommonDataSvcServer(s grpc.ServiceRegistrar, srv CoreCommonDataSvcServer) {
	s.RegisterService(&CoreCommonDataSvc_ServiceDesc, srv)
}

func _CoreCommonDataSvc_GetCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreCommonDataSvcServer).GetCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreCommonDataSvc_GetCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreCommonDataSvcServer).GetCountries(ctx, req.(*GetCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreCommonDataSvc_ServiceDesc is the grpc.ServiceDesc for CoreCommonDataSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreCommonDataSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.common.CoreCommonDataSvc",
	HandlerType: (*CoreCommonDataSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCountries",
			Handler:    _CoreCommonDataSvc_GetCountries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/common/common_data_service.proto",
}

const (
	CoreCommonPaymentDataSvc_GetPaymentTypes_FullMethodName = "/eganow.api.common.CoreCommonPaymentDataSvc/GetPaymentTypes"
)

// CoreCommonPaymentDataSvcClient is the client API for CoreCommonPaymentDataSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreCommonPaymentDataSvcClient interface {
	GetPaymentTypes(ctx context.Context, in *GetPaymentTypesRequest, opts ...grpc.CallOption) (*GetPaymentTypesResponse, error)
}

type coreCommonPaymentDataSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreCommonPaymentDataSvcClient(cc grpc.ClientConnInterface) CoreCommonPaymentDataSvcClient {
	return &coreCommonPaymentDataSvcClient{cc}
}

func (c *coreCommonPaymentDataSvcClient) GetPaymentTypes(ctx context.Context, in *GetPaymentTypesRequest, opts ...grpc.CallOption) (*GetPaymentTypesResponse, error) {
	out := new(GetPaymentTypesResponse)
	err := c.cc.Invoke(ctx, CoreCommonPaymentDataSvc_GetPaymentTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreCommonPaymentDataSvcServer is the server API for CoreCommonPaymentDataSvc service.
// All implementations must embed UnimplementedCoreCommonPaymentDataSvcServer
// for forward compatibility
type CoreCommonPaymentDataSvcServer interface {
	GetPaymentTypes(context.Context, *GetPaymentTypesRequest) (*GetPaymentTypesResponse, error)
	mustEmbedUnimplementedCoreCommonPaymentDataSvcServer()
}

// UnimplementedCoreCommonPaymentDataSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreCommonPaymentDataSvcServer struct {
}

func (UnimplementedCoreCommonPaymentDataSvcServer) GetPaymentTypes(context.Context, *GetPaymentTypesRequest) (*GetPaymentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentTypes not implemented")
}
func (UnimplementedCoreCommonPaymentDataSvcServer) mustEmbedUnimplementedCoreCommonPaymentDataSvcServer() {
}

// UnsafeCoreCommonPaymentDataSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreCommonPaymentDataSvcServer will
// result in compilation errors.
type UnsafeCoreCommonPaymentDataSvcServer interface {
	mustEmbedUnimplementedCoreCommonPaymentDataSvcServer()
}

func RegisterCoreCommonPaymentDataSvcServer(s grpc.ServiceRegistrar, srv CoreCommonPaymentDataSvcServer) {
	s.RegisterService(&CoreCommonPaymentDataSvc_ServiceDesc, srv)
}

func _CoreCommonPaymentDataSvc_GetPaymentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreCommonPaymentDataSvcServer).GetPaymentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreCommonPaymentDataSvc_GetPaymentTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreCommonPaymentDataSvcServer).GetPaymentTypes(ctx, req.(*GetPaymentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreCommonPaymentDataSvc_ServiceDesc is the grpc.ServiceDesc for CoreCommonPaymentDataSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreCommonPaymentDataSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.common.CoreCommonPaymentDataSvc",
	HandlerType: (*CoreCommonPaymentDataSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaymentTypes",
			Handler:    _CoreCommonPaymentDataSvc_GetPaymentTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/common/common_data_service.proto",
}
