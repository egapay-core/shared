// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/media/media_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreMediaSvc_UploadMedia_FullMethodName = "/eganow.api.media.CoreMediaSvc/UploadMedia"
)

// CoreMediaSvcClient is the client API for CoreMediaSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreMediaSvcClient interface {
	UploadMedia(ctx context.Context, in *MediaUploadRequest, opts ...grpc.CallOption) (*MediaStringValue, error)
}

type coreMediaSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreMediaSvcClient(cc grpc.ClientConnInterface) CoreMediaSvcClient {
	return &coreMediaSvcClient{cc}
}

func (c *coreMediaSvcClient) UploadMedia(ctx context.Context, in *MediaUploadRequest, opts ...grpc.CallOption) (*MediaStringValue, error) {
	out := new(MediaStringValue)
	err := c.cc.Invoke(ctx, CoreMediaSvc_UploadMedia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreMediaSvcServer is the server API for CoreMediaSvc service.
// All implementations must embed UnimplementedCoreMediaSvcServer
// for forward compatibility
type CoreMediaSvcServer interface {
	UploadMedia(context.Context, *MediaUploadRequest) (*MediaStringValue, error)
	mustEmbedUnimplementedCoreMediaSvcServer()
}

// UnimplementedCoreMediaSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCoreMediaSvcServer struct {
}

func (UnimplementedCoreMediaSvcServer) UploadMedia(context.Context, *MediaUploadRequest) (*MediaStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMedia not implemented")
}
func (UnimplementedCoreMediaSvcServer) mustEmbedUnimplementedCoreMediaSvcServer() {}

// UnsafeCoreMediaSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreMediaSvcServer will
// result in compilation errors.
type UnsafeCoreMediaSvcServer interface {
	mustEmbedUnimplementedCoreMediaSvcServer()
}

func RegisterCoreMediaSvcServer(s grpc.ServiceRegistrar, srv CoreMediaSvcServer) {
	s.RegisterService(&CoreMediaSvc_ServiceDesc, srv)
}

func _CoreMediaSvc_UploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreMediaSvcServer).UploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreMediaSvc_UploadMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreMediaSvcServer).UploadMedia(ctx, req.(*MediaUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreMediaSvc_ServiceDesc is the grpc.ServiceDesc for CoreMediaSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreMediaSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.media.CoreMediaSvc",
	HandlerType: (*CoreMediaSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadMedia",
			Handler:    _CoreMediaSvc_UploadMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/media/media_service.proto",
}
