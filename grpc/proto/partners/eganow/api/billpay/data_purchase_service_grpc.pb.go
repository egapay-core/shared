// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/billpay/data_purchase_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataPurchaseSvc_GetAvailableBundles_FullMethodName = "/eganow.api.billpay.DataPurchaseSvc/GetAvailableBundles"
	DataPurchaseSvc_Purchase_FullMethodName            = "/eganow.api.billpay.DataPurchaseSvc/Purchase"
	DataPurchaseSvc_HubtelDataCallback_FullMethodName  = "/eganow.api.billpay.DataPurchaseSvc/HubtelDataCallback"
)

// DataPurchaseSvcClient is the client API for DataPurchaseSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataPurchaseSvcClient interface {
	// GetAvailableBundles is called to get the available data bundles for a given provider
	GetAvailableBundles(ctx context.Context, in *GetAvailableBundlesRequest, opts ...grpc.CallOption) (*GetAvailableBundlesResponse, error)
	// Purchase is called to initiate a data purchase transaction
	Purchase(ctx context.Context, in *DataPurchaseRequest, opts ...grpc.CallOption) (*BillPayStringValue, error)
	// Callback is called by the partner to notify us of the status of the transaction
	HubtelDataCallback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*BillPayEmpty, error)
}

type dataPurchaseSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewDataPurchaseSvcClient(cc grpc.ClientConnInterface) DataPurchaseSvcClient {
	return &dataPurchaseSvcClient{cc}
}

func (c *dataPurchaseSvcClient) GetAvailableBundles(ctx context.Context, in *GetAvailableBundlesRequest, opts ...grpc.CallOption) (*GetAvailableBundlesResponse, error) {
	out := new(GetAvailableBundlesResponse)
	err := c.cc.Invoke(ctx, DataPurchaseSvc_GetAvailableBundles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPurchaseSvcClient) Purchase(ctx context.Context, in *DataPurchaseRequest, opts ...grpc.CallOption) (*BillPayStringValue, error) {
	out := new(BillPayStringValue)
	err := c.cc.Invoke(ctx, DataPurchaseSvc_Purchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPurchaseSvcClient) HubtelDataCallback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*BillPayEmpty, error) {
	out := new(BillPayEmpty)
	err := c.cc.Invoke(ctx, DataPurchaseSvc_HubtelDataCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataPurchaseSvcServer is the server API for DataPurchaseSvc service.
// All implementations must embed UnimplementedDataPurchaseSvcServer
// for forward compatibility
type DataPurchaseSvcServer interface {
	// GetAvailableBundles is called to get the available data bundles for a given provider
	GetAvailableBundles(context.Context, *GetAvailableBundlesRequest) (*GetAvailableBundlesResponse, error)
	// Purchase is called to initiate a data purchase transaction
	Purchase(context.Context, *DataPurchaseRequest) (*BillPayStringValue, error)
	// Callback is called by the partner to notify us of the status of the transaction
	HubtelDataCallback(context.Context, *CallbackRequest) (*BillPayEmpty, error)
	mustEmbedUnimplementedDataPurchaseSvcServer()
}

// UnimplementedDataPurchaseSvcServer must be embedded to have forward compatible implementations.
type UnimplementedDataPurchaseSvcServer struct {
}

func (UnimplementedDataPurchaseSvcServer) GetAvailableBundles(context.Context, *GetAvailableBundlesRequest) (*GetAvailableBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableBundles not implemented")
}
func (UnimplementedDataPurchaseSvcServer) Purchase(context.Context, *DataPurchaseRequest) (*BillPayStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchase not implemented")
}
func (UnimplementedDataPurchaseSvcServer) HubtelDataCallback(context.Context, *CallbackRequest) (*BillPayEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HubtelDataCallback not implemented")
}
func (UnimplementedDataPurchaseSvcServer) mustEmbedUnimplementedDataPurchaseSvcServer() {}

// UnsafeDataPurchaseSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataPurchaseSvcServer will
// result in compilation errors.
type UnsafeDataPurchaseSvcServer interface {
	mustEmbedUnimplementedDataPurchaseSvcServer()
}

func RegisterDataPurchaseSvcServer(s grpc.ServiceRegistrar, srv DataPurchaseSvcServer) {
	s.RegisterService(&DataPurchaseSvc_ServiceDesc, srv)
}

func _DataPurchaseSvc_GetAvailableBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPurchaseSvcServer).GetAvailableBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPurchaseSvc_GetAvailableBundles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPurchaseSvcServer).GetAvailableBundles(ctx, req.(*GetAvailableBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPurchaseSvc_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPurchaseSvcServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPurchaseSvc_Purchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPurchaseSvcServer).Purchase(ctx, req.(*DataPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPurchaseSvc_HubtelDataCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPurchaseSvcServer).HubtelDataCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataPurchaseSvc_HubtelDataCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPurchaseSvcServer).HubtelDataCallback(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataPurchaseSvc_ServiceDesc is the grpc.ServiceDesc for DataPurchaseSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataPurchaseSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.billpay.DataPurchaseSvc",
	HandlerType: (*DataPurchaseSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableBundles",
			Handler:    _DataPurchaseSvc_GetAvailableBundles_Handler,
		},
		{
			MethodName: "Purchase",
			Handler:    _DataPurchaseSvc_Purchase_Handler,
		},
		{
			MethodName: "HubtelDataCallback",
			Handler:    _DataPurchaseSvc_HubtelDataCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/billpay/data_purchase_service.proto",
}
