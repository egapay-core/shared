// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/pay_partner/card_transaction_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CardTransactionSvc_InitiatePay_FullMethodName           = "/eganow.api.pay_partner.CardTransactionSvc/InitiatePay"
	CardTransactionSvc_HandleMpgsPayCallback_FullMethodName = "/eganow.api.pay_partner.CardTransactionSvc/HandleMpgsPayCallback"
)

// CardTransactionSvcClient is the client API for CardTransactionSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardTransactionSvcClient interface {
	// Initiate a payment transaction, returns a webview URL to complete the payment
	InitiatePay(ctx context.Context, in *PayTransactionRequest, opts ...grpc.CallOption) (*PayPartnerStringValue, error)
	// Callback to confirm payment transaction
	HandleMpgsPayCallback(ctx context.Context, in *MpgsPayCallbackRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error)
}

type cardTransactionSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCardTransactionSvcClient(cc grpc.ClientConnInterface) CardTransactionSvcClient {
	return &cardTransactionSvcClient{cc}
}

func (c *cardTransactionSvcClient) InitiatePay(ctx context.Context, in *PayTransactionRequest, opts ...grpc.CallOption) (*PayPartnerStringValue, error) {
	out := new(PayPartnerStringValue)
	err := c.cc.Invoke(ctx, CardTransactionSvc_InitiatePay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardTransactionSvcClient) HandleMpgsPayCallback(ctx context.Context, in *MpgsPayCallbackRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error) {
	out := new(PayPartnerEmpty)
	err := c.cc.Invoke(ctx, CardTransactionSvc_HandleMpgsPayCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardTransactionSvcServer is the server API for CardTransactionSvc service.
// All implementations must embed UnimplementedCardTransactionSvcServer
// for forward compatibility
type CardTransactionSvcServer interface {
	// Initiate a payment transaction, returns a webview URL to complete the payment
	InitiatePay(context.Context, *PayTransactionRequest) (*PayPartnerStringValue, error)
	// Callback to confirm payment transaction
	HandleMpgsPayCallback(context.Context, *MpgsPayCallbackRequest) (*PayPartnerEmpty, error)
	mustEmbedUnimplementedCardTransactionSvcServer()
}

// UnimplementedCardTransactionSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCardTransactionSvcServer struct {
}

func (UnimplementedCardTransactionSvcServer) InitiatePay(context.Context, *PayTransactionRequest) (*PayPartnerStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePay not implemented")
}
func (UnimplementedCardTransactionSvcServer) HandleMpgsPayCallback(context.Context, *MpgsPayCallbackRequest) (*PayPartnerEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMpgsPayCallback not implemented")
}
func (UnimplementedCardTransactionSvcServer) mustEmbedUnimplementedCardTransactionSvcServer() {}

// UnsafeCardTransactionSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardTransactionSvcServer will
// result in compilation errors.
type UnsafeCardTransactionSvcServer interface {
	mustEmbedUnimplementedCardTransactionSvcServer()
}

func RegisterCardTransactionSvcServer(s grpc.ServiceRegistrar, srv CardTransactionSvcServer) {
	s.RegisterService(&CardTransactionSvc_ServiceDesc, srv)
}

func _CardTransactionSvc_InitiatePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardTransactionSvcServer).InitiatePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardTransactionSvc_InitiatePay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardTransactionSvcServer).InitiatePay(ctx, req.(*PayTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardTransactionSvc_HandleMpgsPayCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MpgsPayCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardTransactionSvcServer).HandleMpgsPayCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardTransactionSvc_HandleMpgsPayCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardTransactionSvcServer).HandleMpgsPayCallback(ctx, req.(*MpgsPayCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardTransactionSvc_ServiceDesc is the grpc.ServiceDesc for CardTransactionSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardTransactionSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.pay_partner.CardTransactionSvc",
	HandlerType: (*CardTransactionSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiatePay",
			Handler:    _CardTransactionSvc_InitiatePay_Handler,
		},
		{
			MethodName: "HandleMpgsPayCallback",
			Handler:    _CardTransactionSvc_HandleMpgsPayCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/pay_partner/card_transaction_service.proto",
}
