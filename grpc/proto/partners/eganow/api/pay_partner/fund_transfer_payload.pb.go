// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: eganow/api/pay_partner/fund_transfer_payload.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TransferFundsRequest is the request message for the TransferFunds RPC.
type FundTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionAmount float32 `protobuf:"fixed32,1,opt,name=transaction_amount,json=transactionAmount,proto3" json:"transaction_amount,omitempty"`
	TaxAmount         float32 `protobuf:"fixed32,8,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	// Types that are assignable to FundTransferAccount:
	//
	//	*FundTransferRequest_BankDetails
	//	*FundTransferRequest_MobileNumber
	FundTransferAccount        isFundTransferRequest_FundTransferAccount `protobuf_oneof:"fund_transfer_account"`
	Narration                  string                                    `protobuf:"bytes,7,opt,name=narration,proto3" json:"narration,omitempty"`                                                                        // optional
	CurrencyIso                string                                    `protobuf:"bytes,9,opt,name=currency_iso,json=currencyIso,proto3" json:"currency_iso,omitempty"`                                                 // optional (defaults to GHS)
	TransactionReferenceNumber string                                    `protobuf:"bytes,10,opt,name=transaction_reference_number,json=transactionReferenceNumber,proto3" json:"transaction_reference_number,omitempty"` // optional
	PayPartnerId               string                                    `protobuf:"bytes,12,opt,name=pay_partner_id,json=payPartnerId,proto3" json:"pay_partner_id,omitempty"`
	MerchantServiceName        string                                    `protobuf:"bytes,13,opt,name=merchant_service_name,json=merchantServiceName,proto3" json:"merchant_service_name,omitempty"` // required by MTN
	MerchantName               string                                    `protobuf:"bytes,14,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`                        // required by MTN
}

func (x *FundTransferRequest) Reset() {
	*x = FundTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundTransferRequest) ProtoMessage() {}

func (x *FundTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundTransferRequest.ProtoReflect.Descriptor instead.
func (*FundTransferRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{0}
}

func (x *FundTransferRequest) GetTransactionAmount() float32 {
	if x != nil {
		return x.TransactionAmount
	}
	return 0
}

func (x *FundTransferRequest) GetTaxAmount() float32 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (m *FundTransferRequest) GetFundTransferAccount() isFundTransferRequest_FundTransferAccount {
	if m != nil {
		return m.FundTransferAccount
	}
	return nil
}

func (x *FundTransferRequest) GetBankDetails() *FundTransferRequest_BankFundTransferRequest {
	if x, ok := x.GetFundTransferAccount().(*FundTransferRequest_BankDetails); ok {
		return x.BankDetails
	}
	return nil
}

func (x *FundTransferRequest) GetMobileNumber() string {
	if x, ok := x.GetFundTransferAccount().(*FundTransferRequest_MobileNumber); ok {
		return x.MobileNumber
	}
	return ""
}

func (x *FundTransferRequest) GetNarration() string {
	if x != nil {
		return x.Narration
	}
	return ""
}

func (x *FundTransferRequest) GetCurrencyIso() string {
	if x != nil {
		return x.CurrencyIso
	}
	return ""
}

func (x *FundTransferRequest) GetTransactionReferenceNumber() string {
	if x != nil {
		return x.TransactionReferenceNumber
	}
	return ""
}

func (x *FundTransferRequest) GetPayPartnerId() string {
	if x != nil {
		return x.PayPartnerId
	}
	return ""
}

func (x *FundTransferRequest) GetMerchantServiceName() string {
	if x != nil {
		return x.MerchantServiceName
	}
	return ""
}

func (x *FundTransferRequest) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

type isFundTransferRequest_FundTransferAccount interface {
	isFundTransferRequest_FundTransferAccount()
}

type FundTransferRequest_BankDetails struct {
	BankDetails *FundTransferRequest_BankFundTransferRequest `protobuf:"bytes,2,opt,name=bank_details,json=bankDetails,proto3,oneof"` // use this for GHIPSS
}

type FundTransferRequest_MobileNumber struct {
	MobileNumber string `protobuf:"bytes,3,opt,name=mobile_number,json=mobileNumber,proto3,oneof"` // use this for MTN, VODAFONE, AIRTEL-TIGO
}

func (*FundTransferRequest_BankDetails) isFundTransferRequest_FundTransferAccount() {}

func (*FundTransferRequest_MobileNumber) isFundTransferRequest_FundTransferAccount() {}

// TransferFundsResponse is the response message for the TransferFunds RPC.
type FundTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionStatus   string `protobuf:"bytes,1,opt,name=transaction_status,json=transactionStatus,proto3" json:"transaction_status,omitempty"`
	ReferenceNumber     string `protobuf:"bytes,2,opt,name=reference_number,json=referenceNumber,proto3" json:"reference_number,omitempty"`
	ResponsePayloadJson string `protobuf:"bytes,3,opt,name=response_payload_json,json=responsePayloadJson,proto3" json:"response_payload_json,omitempty"` // JSON string of the response payload (required by Eganow Merchant API)
	ApiResponseMessage  string `protobuf:"bytes,5,opt,name=api_response_message,json=apiResponseMessage,proto3" json:"api_response_message,omitempty"`    // response message from the API
}

func (x *FundTransferResponse) Reset() {
	*x = FundTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundTransferResponse) ProtoMessage() {}

func (x *FundTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundTransferResponse.ProtoReflect.Descriptor instead.
func (*FundTransferResponse) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{1}
}

func (x *FundTransferResponse) GetTransactionStatus() string {
	if x != nil {
		return x.TransactionStatus
	}
	return ""
}

func (x *FundTransferResponse) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

func (x *FundTransferResponse) GetResponsePayloadJson() string {
	if x != nil {
		return x.ResponsePayloadJson
	}
	return ""
}

func (x *FundTransferResponse) GetApiResponseMessage() string {
	if x != nil {
		return x.ApiResponseMessage
	}
	return ""
}

// StatusQueryRequest is the request message for the StatusQuery RPC.
type StatusQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*StatusQueryRequest_BankDetails
	//	*StatusQueryRequest_MobileDetails
	Payload isStatusQueryRequest_Payload `protobuf_oneof:"payload"`
}

func (x *StatusQueryRequest) Reset() {
	*x = StatusQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusQueryRequest) ProtoMessage() {}

func (x *StatusQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusQueryRequest.ProtoReflect.Descriptor instead.
func (*StatusQueryRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{2}
}

func (m *StatusQueryRequest) GetPayload() isStatusQueryRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StatusQueryRequest) GetBankDetails() *StatusQueryRequest_BankStatusQueryRequest {
	if x, ok := x.GetPayload().(*StatusQueryRequest_BankDetails); ok {
		return x.BankDetails
	}
	return nil
}

func (x *StatusQueryRequest) GetMobileDetails() *StatusQueryRequest_MobileStatusQueryRequest {
	if x, ok := x.GetPayload().(*StatusQueryRequest_MobileDetails); ok {
		return x.MobileDetails
	}
	return nil
}

type isStatusQueryRequest_Payload interface {
	isStatusQueryRequest_Payload()
}

type StatusQueryRequest_BankDetails struct {
	BankDetails *StatusQueryRequest_BankStatusQueryRequest `protobuf:"bytes,1,opt,name=bank_details,json=bankDetails,proto3,oneof"`
}

type StatusQueryRequest_MobileDetails struct {
	MobileDetails *StatusQueryRequest_MobileStatusQueryRequest `protobuf:"bytes,2,opt,name=mobile_details,json=mobileDetails,proto3,oneof"`
}

func (*StatusQueryRequest_BankDetails) isStatusQueryRequest_Payload() {}

func (*StatusQueryRequest_MobileDetails) isStatusQueryRequest_Payload() {}

// StatusQueryResponse is the response message for the StatusQuery RPC.
type StatusQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Status        string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // status iof the transaction
}

func (x *StatusQueryResponse) Reset() {
	*x = StatusQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusQueryResponse) ProtoMessage() {}

func (x *StatusQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusQueryResponse.ProtoReflect.Descriptor instead.
func (*StatusQueryResponse) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{3}
}

func (x *StatusQueryResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *StatusQueryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// RemittanceTransferFundsRequest is the request message for the RemittanceTransferFunds RPC.
type RemittanceTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionAmount          float32 `protobuf:"fixed32,1,opt,name=transaction_amount,json=transactionAmount,proto3" json:"transaction_amount,omitempty"`
	SourceAccountNumber        string  `protobuf:"bytes,2,opt,name=source_account_number,json=sourceAccountNumber,proto3" json:"source_account_number,omitempty"`
	SourceAccountName          string  `protobuf:"bytes,3,opt,name=source_account_name,json=sourceAccountName,proto3" json:"source_account_name,omitempty"` // optional
	DestinationAccountNumber   string  `protobuf:"bytes,4,opt,name=destination_account_number,json=destinationAccountNumber,proto3" json:"destination_account_number,omitempty"`
	DestinationAccountName     string  `protobuf:"bytes,5,opt,name=destination_account_name,json=destinationAccountName,proto3" json:"destination_account_name,omitempty"` // optional
	CountryName                string  `protobuf:"bytes,6,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`                                    // must be FRA,ITL,ENG,GHA. (3 characters)
	BankCode                   string  `protobuf:"bytes,7,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`
	Narration                  string  `protobuf:"bytes,8,opt,name=narration,proto3" json:"narration,omitempty"` // optional
	TransactionReferenceNumber string  `protobuf:"bytes,9,opt,name=transaction_reference_number,json=transactionReferenceNumber,proto3" json:"transaction_reference_number,omitempty"`
}

func (x *RemittanceTransferRequest) Reset() {
	*x = RemittanceTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemittanceTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemittanceTransferRequest) ProtoMessage() {}

func (x *RemittanceTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemittanceTransferRequest.ProtoReflect.Descriptor instead.
func (*RemittanceTransferRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{4}
}

func (x *RemittanceTransferRequest) GetTransactionAmount() float32 {
	if x != nil {
		return x.TransactionAmount
	}
	return 0
}

func (x *RemittanceTransferRequest) GetSourceAccountNumber() string {
	if x != nil {
		return x.SourceAccountNumber
	}
	return ""
}

func (x *RemittanceTransferRequest) GetSourceAccountName() string {
	if x != nil {
		return x.SourceAccountName
	}
	return ""
}

func (x *RemittanceTransferRequest) GetDestinationAccountNumber() string {
	if x != nil {
		return x.DestinationAccountNumber
	}
	return ""
}

func (x *RemittanceTransferRequest) GetDestinationAccountName() string {
	if x != nil {
		return x.DestinationAccountName
	}
	return ""
}

func (x *RemittanceTransferRequest) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *RemittanceTransferRequest) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *RemittanceTransferRequest) GetNarration() string {
	if x != nil {
		return x.Narration
	}
	return ""
}

func (x *RemittanceTransferRequest) GetTransactionReferenceNumber() string {
	if x != nil {
		return x.TransactionReferenceNumber
	}
	return ""
}

// MtnMomoTransactionCallbackRequest is the request message for the MtnMomoTransactionCallback RPC.
type MtnMomoTransactionCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverInfo          *MtnMomoTransactionCallbackRequest_ReceiverInfo `protobuf:"bytes,1,opt,name=receiverInfo,proto3" json:"receiverInfo,omitempty"`
	Transactionid         string                                          `protobuf:"bytes,2,opt,name=transactionid,proto3" json:"transactionid,omitempty"`
	Externaltransactionid string                                          `protobuf:"bytes,3,opt,name=externaltransactionid,proto3" json:"externaltransactionid,omitempty"`
}

func (x *MtnMomoTransactionCallbackRequest) Reset() {
	*x = MtnMomoTransactionCallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MtnMomoTransactionCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MtnMomoTransactionCallbackRequest) ProtoMessage() {}

func (x *MtnMomoTransactionCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MtnMomoTransactionCallbackRequest.ProtoReflect.Descriptor instead.
func (*MtnMomoTransactionCallbackRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{5}
}

func (x *MtnMomoTransactionCallbackRequest) GetReceiverInfo() *MtnMomoTransactionCallbackRequest_ReceiverInfo {
	if x != nil {
		return x.ReceiverInfo
	}
	return nil
}

func (x *MtnMomoTransactionCallbackRequest) GetTransactionid() string {
	if x != nil {
		return x.Transactionid
	}
	return ""
}

func (x *MtnMomoTransactionCallbackRequest) GetExternaltransactionid() string {
	if x != nil {
		return x.Externaltransactionid
	}
	return ""
}

type MtnMomoOpenApiTransactionCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinancialTransactionId string                                          `protobuf:"bytes,1,opt,name=financialTransactionId,proto3" json:"financialTransactionId,omitempty"`
	ExternalId             string                                          `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty"`
	Amount                 string                                          `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency               string                                          `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Payer                  *MtnMomoOpenApiTransactionCallbackRequest_Payer `protobuf:"bytes,5,opt,name=payer,proto3" json:"payer,omitempty"`
	PayerMessage           string                                          `protobuf:"bytes,6,opt,name=payerMessage,proto3" json:"payerMessage,omitempty"`
	PayeeNote              string                                          `protobuf:"bytes,7,opt,name=payeeNote,proto3" json:"payeeNote,omitempty"`
	Status                 string                                          `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MtnMomoOpenApiTransactionCallbackRequest) Reset() {
	*x = MtnMomoOpenApiTransactionCallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MtnMomoOpenApiTransactionCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MtnMomoOpenApiTransactionCallbackRequest) ProtoMessage() {}

func (x *MtnMomoOpenApiTransactionCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MtnMomoOpenApiTransactionCallbackRequest.ProtoReflect.Descriptor instead.
func (*MtnMomoOpenApiTransactionCallbackRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{6}
}

func (x *MtnMomoOpenApiTransactionCallbackRequest) GetFinancialTransactionId() string {
	if x != nil {
		return x.FinancialTransactionId
	}
	return ""
}

func (x *MtnMomoOpenApiTransactionCallbackRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *MtnMomoOpenApiTransactionCallbackRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *MtnMomoOpenApiTransactionCallbackRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *MtnMomoOpenApiTransactionCallbackRequest) GetPayer() *MtnMomoOpenApiTransactionCallbackRequest_Payer {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *MtnMomoOpenApiTransactionCallbackRequest) GetPayerMessage() string {
	if x != nil {
		return x.PayerMessage
	}
	return ""
}

func (x *MtnMomoOpenApiTransactionCallbackRequest) GetPayeeNote() string {
	if x != nil {
		return x.PayeeNote
	}
	return ""
}

func (x *MtnMomoOpenApiTransactionCallbackRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// GhipssRTPTransactionCallbackRequest is the request message for the MtnMomoTransactionCallback RPC.
type GhipssRTPTransactionCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillerId           string `protobuf:"bytes,1,opt,name=billerId,proto3" json:"billerId,omitempty"`
	BillId             string `protobuf:"bytes,2,opt,name=billId,proto3" json:"billId,omitempty"`
	BillDate           string `protobuf:"bytes,3,opt,name=billDate,proto3" json:"billDate,omitempty"`
	BillAmount         uint32 `protobuf:"varint,4,opt,name=billAmount,proto3" json:"billAmount,omitempty"`
	BillDescription    string `protobuf:"bytes,5,opt,name=billDescription,proto3" json:"billDescription,omitempty"`
	PayerName          string `protobuf:"bytes,6,opt,name=payerName,proto3" json:"payerName,omitempty"`
	PayerInstitutionId string `protobuf:"bytes,7,opt,name=payerInstitutionId,proto3" json:"payerInstitutionId,omitempty"`
	PayerAccountNumber string `protobuf:"bytes,8,opt,name=payerAccountNumber,proto3" json:"payerAccountNumber,omitempty"`
	Status             string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	RequestTimestamp   string `protobuf:"bytes,10,opt,name=requestTimestamp,proto3" json:"requestTimestamp,omitempty"`
	RequestSignature   string `protobuf:"bytes,11,opt,name=requestSignature,proto3" json:"requestSignature,omitempty"`
}

func (x *GhipssRTPTransactionCallbackRequest) Reset() {
	*x = GhipssRTPTransactionCallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GhipssRTPTransactionCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GhipssRTPTransactionCallbackRequest) ProtoMessage() {}

func (x *GhipssRTPTransactionCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GhipssRTPTransactionCallbackRequest.ProtoReflect.Descriptor instead.
func (*GhipssRTPTransactionCallbackRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{7}
}

func (x *GhipssRTPTransactionCallbackRequest) GetBillerId() string {
	if x != nil {
		return x.BillerId
	}
	return ""
}

func (x *GhipssRTPTransactionCallbackRequest) GetBillId() string {
	if x != nil {
		return x.BillId
	}
	return ""
}

func (x *GhipssRTPTransactionCallbackRequest) GetBillDate() string {
	if x != nil {
		return x.BillDate
	}
	return ""
}

func (x *GhipssRTPTransactionCallbackRequest) GetBillAmount() uint32 {
	if x != nil {
		return x.BillAmount
	}
	return 0
}

func (x *GhipssRTPTransactionCallbackRequest) GetBillDescription() string {
	if x != nil {
		return x.BillDescription
	}
	return ""
}

func (x *GhipssRTPTransactionCallbackRequest) GetPayerName() string {
	if x != nil {
		return x.PayerName
	}
	return ""
}

func (x *GhipssRTPTransactionCallbackRequest) GetPayerInstitutionId() string {
	if x != nil {
		return x.PayerInstitutionId
	}
	return ""
}

func (x *GhipssRTPTransactionCallbackRequest) GetPayerAccountNumber() string {
	if x != nil {
		return x.PayerAccountNumber
	}
	return ""
}

func (x *GhipssRTPTransactionCallbackRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GhipssRTPTransactionCallbackRequest) GetRequestTimestamp() string {
	if x != nil {
		return x.RequestTimestamp
	}
	return ""
}

func (x *GhipssRTPTransactionCallbackRequest) GetRequestSignature() string {
	if x != nil {
		return x.RequestSignature
	}
	return ""
}

// AtMoneyTransactionCallbackRequest is the request message for the AtMoneyTransactionCallback RPC.
type AtMoneyTransactionCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransId     string `protobuf:"bytes,1,opt,name=trans_id,json=transId,proto3" json:"trans_id,omitempty"` // numeric transaction id sent to the partner
	TransStatus string `protobuf:"bytes,2,opt,name=trans_status,json=transStatus,proto3" json:"trans_status,omitempty"`
	TransRef    string `protobuf:"bytes,3,opt,name=trans_ref,json=transRef,proto3" json:"trans_ref,omitempty"` // external reference (from initial request)
	Message     string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AtMoneyTransactionCallbackRequest) Reset() {
	*x = AtMoneyTransactionCallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtMoneyTransactionCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtMoneyTransactionCallbackRequest) ProtoMessage() {}

func (x *AtMoneyTransactionCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtMoneyTransactionCallbackRequest.ProtoReflect.Descriptor instead.
func (*AtMoneyTransactionCallbackRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{8}
}

func (x *AtMoneyTransactionCallbackRequest) GetTransId() string {
	if x != nil {
		return x.TransId
	}
	return ""
}

func (x *AtMoneyTransactionCallbackRequest) GetTransStatus() string {
	if x != nil {
		return x.TransStatus
	}
	return ""
}

func (x *AtMoneyTransactionCallbackRequest) GetTransRef() string {
	if x != nil {
		return x.TransRef
	}
	return ""
}

func (x *AtMoneyTransactionCallbackRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ReverseTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderInstitution string `protobuf:"bytes,1,opt,name=senderInstitution,proto3" json:"senderInstitution,omitempty"`
	TransactionAmount string `protobuf:"bytes,2,opt,name=transactionAmount,proto3" json:"transactionAmount,omitempty"`
	ExternalRef       string `protobuf:"bytes,3,opt,name=externalRef,proto3" json:"externalRef,omitempty"`
	TrackingNum       string `protobuf:"bytes,4,opt,name=trackingNum,proto3" json:"trackingNum,omitempty"`
	ReversalDate      string `protobuf:"bytes,5,opt,name=reversalDate,proto3" json:"reversalDate,omitempty"`
	TransactionId     string `protobuf:"bytes,6,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *ReverseTransactionRequest) Reset() {
	*x = ReverseTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseTransactionRequest) ProtoMessage() {}

func (x *ReverseTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseTransactionRequest.ProtoReflect.Descriptor instead.
func (*ReverseTransactionRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{9}
}

func (x *ReverseTransactionRequest) GetSenderInstitution() string {
	if x != nil {
		return x.SenderInstitution
	}
	return ""
}

func (x *ReverseTransactionRequest) GetTransactionAmount() string {
	if x != nil {
		return x.TransactionAmount
	}
	return ""
}

func (x *ReverseTransactionRequest) GetExternalRef() string {
	if x != nil {
		return x.ExternalRef
	}
	return ""
}

func (x *ReverseTransactionRequest) GetTrackingNum() string {
	if x != nil {
		return x.TrackingNum
	}
	return ""
}

func (x *ReverseTransactionRequest) GetReversalDate() string {
	if x != nil {
		return x.ReversalDate
	}
	return ""
}

func (x *ReverseTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type QrCreditTransactionWebServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderAccount     string `protobuf:"bytes,1,opt,name=senderAccount,proto3" json:"senderAccount,omitempty"`
	Sendername        string `protobuf:"bytes,10,opt,name=Sendername,proto3" json:"Sendername,omitempty"`
	SenderInstitution string `protobuf:"bytes,2,opt,name=senderInstitution,proto3" json:"senderInstitution,omitempty"`
	ReceiverAccount   string `protobuf:"bytes,3,opt,name=receiverAccount,proto3" json:"receiverAccount,omitempty"`
	TransactionAmount string `protobuf:"bytes,4,opt,name=transactionAmount,proto3" json:"transactionAmount,omitempty"`
	Narration         string `protobuf:"bytes,5,opt,name=narration,proto3" json:"narration,omitempty"`
	ExternalRef       string `protobuf:"bytes,6,opt,name=externalRef,proto3" json:"externalRef,omitempty"`
	TrackingNum       string `protobuf:"bytes,7,opt,name=trackingNum,proto3" json:"trackingNum,omitempty"`
	TransactionDate   string `protobuf:"bytes,8,opt,name=transactionDate,proto3" json:"transactionDate,omitempty"`
	QrCode            string `protobuf:"bytes,9,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
}

func (x *QrCreditTransactionWebServiceRequest) Reset() {
	*x = QrCreditTransactionWebServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QrCreditTransactionWebServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QrCreditTransactionWebServiceRequest) ProtoMessage() {}

func (x *QrCreditTransactionWebServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QrCreditTransactionWebServiceRequest.ProtoReflect.Descriptor instead.
func (*QrCreditTransactionWebServiceRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{10}
}

func (x *QrCreditTransactionWebServiceRequest) GetSenderAccount() string {
	if x != nil {
		return x.SenderAccount
	}
	return ""
}

func (x *QrCreditTransactionWebServiceRequest) GetSendername() string {
	if x != nil {
		return x.Sendername
	}
	return ""
}

func (x *QrCreditTransactionWebServiceRequest) GetSenderInstitution() string {
	if x != nil {
		return x.SenderInstitution
	}
	return ""
}

func (x *QrCreditTransactionWebServiceRequest) GetReceiverAccount() string {
	if x != nil {
		return x.ReceiverAccount
	}
	return ""
}

func (x *QrCreditTransactionWebServiceRequest) GetTransactionAmount() string {
	if x != nil {
		return x.TransactionAmount
	}
	return ""
}

func (x *QrCreditTransactionWebServiceRequest) GetNarration() string {
	if x != nil {
		return x.Narration
	}
	return ""
}

func (x *QrCreditTransactionWebServiceRequest) GetExternalRef() string {
	if x != nil {
		return x.ExternalRef
	}
	return ""
}

func (x *QrCreditTransactionWebServiceRequest) GetTrackingNum() string {
	if x != nil {
		return x.TrackingNum
	}
	return ""
}

func (x *QrCreditTransactionWebServiceRequest) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *QrCreditTransactionWebServiceRequest) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

type CollectionDebitTransactionWebServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillerId           string `protobuf:"bytes,1,opt,name=billerId,proto3" json:"billerId,omitempty"`
	BillId             string `protobuf:"bytes,2,opt,name=billId,proto3" json:"billId,omitempty"`
	BillDate           string `protobuf:"bytes,3,opt,name=billDate,proto3" json:"billDate,omitempty"`
	BillAmount         string `protobuf:"bytes,4,opt,name=billAmount,proto3" json:"billAmount,omitempty"`
	BillDescription    string `protobuf:"bytes,5,opt,name=billDescription,proto3" json:"billDescription,omitempty"`
	PayerName          string `protobuf:"bytes,6,opt,name=payerName,proto3" json:"payerName,omitempty"`
	PayerInstitutionId string `protobuf:"bytes,7,opt,name=payerInstitutionId,proto3" json:"payerInstitutionId,omitempty"`
	PayerAccountNumber string `protobuf:"bytes,8,opt,name=payerAccountNumber,proto3" json:"payerAccountNumber,omitempty"`
	Status             string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	RequestTimestamp   string `protobuf:"bytes,10,opt,name=requestTimestamp,proto3" json:"requestTimestamp,omitempty"`
	RequestSignature   string `protobuf:"bytes,11,opt,name=requestSignature,proto3" json:"requestSignature,omitempty"`
}

func (x *CollectionDebitTransactionWebServiceRequest) Reset() {
	*x = CollectionDebitTransactionWebServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionDebitTransactionWebServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionDebitTransactionWebServiceRequest) ProtoMessage() {}

func (x *CollectionDebitTransactionWebServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionDebitTransactionWebServiceRequest.ProtoReflect.Descriptor instead.
func (*CollectionDebitTransactionWebServiceRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{11}
}

func (x *CollectionDebitTransactionWebServiceRequest) GetBillerId() string {
	if x != nil {
		return x.BillerId
	}
	return ""
}

func (x *CollectionDebitTransactionWebServiceRequest) GetBillId() string {
	if x != nil {
		return x.BillId
	}
	return ""
}

func (x *CollectionDebitTransactionWebServiceRequest) GetBillDate() string {
	if x != nil {
		return x.BillDate
	}
	return ""
}

func (x *CollectionDebitTransactionWebServiceRequest) GetBillAmount() string {
	if x != nil {
		return x.BillAmount
	}
	return ""
}

func (x *CollectionDebitTransactionWebServiceRequest) GetBillDescription() string {
	if x != nil {
		return x.BillDescription
	}
	return ""
}

func (x *CollectionDebitTransactionWebServiceRequest) GetPayerName() string {
	if x != nil {
		return x.PayerName
	}
	return ""
}

func (x *CollectionDebitTransactionWebServiceRequest) GetPayerInstitutionId() string {
	if x != nil {
		return x.PayerInstitutionId
	}
	return ""
}

func (x *CollectionDebitTransactionWebServiceRequest) GetPayerAccountNumber() string {
	if x != nil {
		return x.PayerAccountNumber
	}
	return ""
}

func (x *CollectionDebitTransactionWebServiceRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CollectionDebitTransactionWebServiceRequest) GetRequestTimestamp() string {
	if x != nil {
		return x.RequestTimestamp
	}
	return ""
}

func (x *CollectionDebitTransactionWebServiceRequest) GetRequestSignature() string {
	if x != nil {
		return x.RequestSignature
	}
	return ""
}

type WebServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode     string `protobuf:"bytes,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMessage  string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	ExternalRef   string `protobuf:"bytes,3,opt,name=externalRef,proto3" json:"externalRef,omitempty"`
	TransactionId string `protobuf:"bytes,4,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *WebServiceResponse) Reset() {
	*x = WebServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebServiceResponse) ProtoMessage() {}

func (x *WebServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebServiceResponse.ProtoReflect.Descriptor instead.
func (*WebServiceResponse) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{12}
}

func (x *WebServiceResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *WebServiceResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *WebServiceResponse) GetExternalRef() string {
	if x != nil {
		return x.ExternalRef
	}
	return ""
}

func (x *WebServiceResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type FundTransferRequest_BankFundTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccountNumber      string `protobuf:"bytes,2,opt,name=source_account_number,json=sourceAccountNumber,proto3" json:"source_account_number,omitempty"`                // aka payer account number (for RTP)
	SourceAccountName        string `protobuf:"bytes,3,opt,name=source_account_name,json=sourceAccountName,proto3" json:"source_account_name,omitempty"`                      // optional // aka payer name (for RTP)
	DestinationAccountNumber string `protobuf:"bytes,4,opt,name=destination_account_number,json=destinationAccountNumber,proto3" json:"destination_account_number,omitempty"` // required for FTC
	DestinationAccountName   string `protobuf:"bytes,5,opt,name=destination_account_name,json=destinationAccountName,proto3" json:"destination_account_name,omitempty"`       // optional
	BankCode                 string `protobuf:"bytes,6,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`
	// additional fields for GHQR
	//
	// Types that are assignable to QrData:
	//
	//	*FundTransferRequest_BankFundTransferRequest_Qrcode
	//	*FundTransferRequest_BankFundTransferRequest_TerminalId
	QrData isFundTransferRequest_BankFundTransferRequest_QrData `protobuf_oneof:"qr_data"`
	// additional field for RTP
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // aka biller ID (required for RTP)
}

func (x *FundTransferRequest_BankFundTransferRequest) Reset() {
	*x = FundTransferRequest_BankFundTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundTransferRequest_BankFundTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundTransferRequest_BankFundTransferRequest) ProtoMessage() {}

func (x *FundTransferRequest_BankFundTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundTransferRequest_BankFundTransferRequest.ProtoReflect.Descriptor instead.
func (*FundTransferRequest_BankFundTransferRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FundTransferRequest_BankFundTransferRequest) GetSourceAccountNumber() string {
	if x != nil {
		return x.SourceAccountNumber
	}
	return ""
}

func (x *FundTransferRequest_BankFundTransferRequest) GetSourceAccountName() string {
	if x != nil {
		return x.SourceAccountName
	}
	return ""
}

func (x *FundTransferRequest_BankFundTransferRequest) GetDestinationAccountNumber() string {
	if x != nil {
		return x.DestinationAccountNumber
	}
	return ""
}

func (x *FundTransferRequest_BankFundTransferRequest) GetDestinationAccountName() string {
	if x != nil {
		return x.DestinationAccountName
	}
	return ""
}

func (x *FundTransferRequest_BankFundTransferRequest) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (m *FundTransferRequest_BankFundTransferRequest) GetQrData() isFundTransferRequest_BankFundTransferRequest_QrData {
	if m != nil {
		return m.QrData
	}
	return nil
}

func (x *FundTransferRequest_BankFundTransferRequest) GetQrcode() string {
	if x, ok := x.GetQrData().(*FundTransferRequest_BankFundTransferRequest_Qrcode); ok {
		return x.Qrcode
	}
	return ""
}

func (x *FundTransferRequest_BankFundTransferRequest) GetTerminalId() string {
	if x, ok := x.GetQrData().(*FundTransferRequest_BankFundTransferRequest_TerminalId); ok {
		return x.TerminalId
	}
	return ""
}

func (x *FundTransferRequest_BankFundTransferRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type isFundTransferRequest_BankFundTransferRequest_QrData interface {
	isFundTransferRequest_BankFundTransferRequest_QrData()
}

type FundTransferRequest_BankFundTransferRequest_Qrcode struct {
	Qrcode string `protobuf:"bytes,7,opt,name=qrcode,proto3,oneof"` // optional (required for GHQR - GHIPSS)
}

type FundTransferRequest_BankFundTransferRequest_TerminalId struct {
	TerminalId string `protobuf:"bytes,8,opt,name=terminal_id,json=terminalId,proto3,oneof"` // optional (required for GHIPSS)
}

func (*FundTransferRequest_BankFundTransferRequest_Qrcode) isFundTransferRequest_BankFundTransferRequest_QrData() {
}

func (*FundTransferRequest_BankFundTransferRequest_TerminalId) isFundTransferRequest_BankFundTransferRequest_QrData() {
}

type StatusQueryRequest_BankStatusQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionReferenceNumber string `protobuf:"bytes,4,opt,name=transaction_reference_number,json=transactionReferenceNumber,proto3" json:"transaction_reference_number,omitempty"`
}

func (x *StatusQueryRequest_BankStatusQueryRequest) Reset() {
	*x = StatusQueryRequest_BankStatusQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusQueryRequest_BankStatusQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusQueryRequest_BankStatusQueryRequest) ProtoMessage() {}

func (x *StatusQueryRequest_BankStatusQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusQueryRequest_BankStatusQueryRequest.ProtoReflect.Descriptor instead.
func (*StatusQueryRequest_BankStatusQueryRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{2, 0}
}

func (x *StatusQueryRequest_BankStatusQueryRequest) GetTransactionReferenceNumber() string {
	if x != nil {
		return x.TransactionReferenceNumber
	}
	return ""
}

type StatusQueryRequest_MobileStatusQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId   string          `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TransactionType TransactionType `protobuf:"varint,3,opt,name=transaction_type,json=transactionType,proto3,enum=eganow.api.pay_partner.TransactionType" json:"transaction_type,omitempty"`
}

func (x *StatusQueryRequest_MobileStatusQueryRequest) Reset() {
	*x = StatusQueryRequest_MobileStatusQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusQueryRequest_MobileStatusQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusQueryRequest_MobileStatusQueryRequest) ProtoMessage() {}

func (x *StatusQueryRequest_MobileStatusQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusQueryRequest_MobileStatusQueryRequest.ProtoReflect.Descriptor instead.
func (*StatusQueryRequest_MobileStatusQueryRequest) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{2, 1}
}

func (x *StatusQueryRequest_MobileStatusQueryRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *StatusQueryRequest_MobileStatusQueryRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_COLLECTION
}

type MtnMomoTransactionCallbackRequest_ReceiverInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromFri              string `protobuf:"bytes,1,opt,name=fromFri,proto3" json:"fromFri,omitempty"`
	Status               string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Referenceid          string `protobuf:"bytes,3,opt,name=referenceid,proto3" json:"referenceid,omitempty"`
	Communicationchannel string `protobuf:"bytes,4,opt,name=communicationchannel,proto3" json:"communicationchannel,omitempty"`
}

func (x *MtnMomoTransactionCallbackRequest_ReceiverInfo) Reset() {
	*x = MtnMomoTransactionCallbackRequest_ReceiverInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MtnMomoTransactionCallbackRequest_ReceiverInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MtnMomoTransactionCallbackRequest_ReceiverInfo) ProtoMessage() {}

func (x *MtnMomoTransactionCallbackRequest_ReceiverInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MtnMomoTransactionCallbackRequest_ReceiverInfo.ProtoReflect.Descriptor instead.
func (*MtnMomoTransactionCallbackRequest_ReceiverInfo) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{5, 0}
}

func (x *MtnMomoTransactionCallbackRequest_ReceiverInfo) GetFromFri() string {
	if x != nil {
		return x.FromFri
	}
	return ""
}

func (x *MtnMomoTransactionCallbackRequest_ReceiverInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MtnMomoTransactionCallbackRequest_ReceiverInfo) GetReferenceid() string {
	if x != nil {
		return x.Referenceid
	}
	return ""
}

func (x *MtnMomoTransactionCallbackRequest_ReceiverInfo) GetCommunicationchannel() string {
	if x != nil {
		return x.Communicationchannel
	}
	return ""
}

type MtnMomoOpenApiTransactionCallbackRequest_Payer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyIdType string `protobuf:"bytes,1,opt,name=partyIdType,proto3" json:"partyIdType,omitempty"`
	PartyId     string `protobuf:"bytes,2,opt,name=partyId,proto3" json:"partyId,omitempty"`
}

func (x *MtnMomoOpenApiTransactionCallbackRequest_Payer) Reset() {
	*x = MtnMomoOpenApiTransactionCallbackRequest_Payer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MtnMomoOpenApiTransactionCallbackRequest_Payer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MtnMomoOpenApiTransactionCallbackRequest_Payer) ProtoMessage() {}

func (x *MtnMomoOpenApiTransactionCallbackRequest_Payer) ProtoReflect() protoreflect.Message {
	mi := &file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MtnMomoOpenApiTransactionCallbackRequest_Payer.ProtoReflect.Descriptor instead.
func (*MtnMomoOpenApiTransactionCallbackRequest_Payer) Descriptor() ([]byte, []int) {
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP(), []int{6, 0}
}

func (x *MtnMomoOpenApiTransactionCallbackRequest_Payer) GetPartyIdType() string {
	if x != nil {
		return x.PartyIdType
	}
	return ""
}

func (x *MtnMomoOpenApiTransactionCallbackRequest_Payer) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

var File_eganow_api_pay_partner_fund_transfer_payload_proto protoreflect.FileDescriptor

var file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDesc = []byte{
	0x0a, 0x32, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x79,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x65,
	0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa1, 0x07, 0x0a, 0x13, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x0c, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x61, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x73, 0x6f, 0x12, 0x40, 0x0a,
	0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x70, 0x61,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x85, 0x03, 0x0a, 0x17, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x75, 0x6e, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x71, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x17, 0x0a, 0x15, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x82, 0x04,
	0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x67, 0x61,
	0x6e, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x71, 0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x65, 0x67, 0x61, 0x6e,
	0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x1a, 0x5f, 0x0a, 0x16, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x9f, 0x01, 0x0a, 0x18, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x57,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f,
	0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x54, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdf, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x18, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x84, 0x03, 0x0a, 0x21, 0x4d,
	0x74, 0x6e, 0x4d, 0x6f, 0x6d, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x6a, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x65, 0x67, 0x61, 0x6e, 0x6f, 0x77, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x4d, 0x74, 0x6e, 0x4d, 0x6f, 0x6d, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x1a, 0x96, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x46, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d,
	0x46, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0xb3, 0x03, 0x0a, 0x28, 0x4d, 0x74, 0x6e, 0x4d, 0x6f, 0x6d, 0x6f, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x70, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5c, 0x0a, 0x05, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x65, 0x67, 0x61, 0x6e,
	0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x4d, 0x74, 0x6e, 0x4d, 0x6f, 0x6d, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70,
	0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x79, 0x65, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x65, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x43, 0x0a, 0x05, 0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0xad, 0x03, 0x0a, 0x23, 0x47, 0x68, 0x69, 0x70,
	0x73, 0x73, 0x52, 0x54, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x21, 0x41, 0x74, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x25, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4e, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc8, 0x03, 0x0a, 0x24, 0x51, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0a,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66,
	0x12, 0x25, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x71, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xb5, 0x03, 0x0a, 0x2b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x69,
	0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x12,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x23, 0x5a, 0x21,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x67, 0x61, 0x6e, 0x6f,
	0x77, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescOnce sync.Once
	file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescData = file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDesc
)

func file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescGZIP() []byte {
	file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescOnce.Do(func() {
		file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescData)
	})
	return file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDescData
}

var file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_eganow_api_pay_partner_fund_transfer_payload_proto_goTypes = []interface{}{
	(*FundTransferRequest)(nil),                            // 0: eganow.api.pay_partner.FundTransferRequest
	(*FundTransferResponse)(nil),                           // 1: eganow.api.pay_partner.FundTransferResponse
	(*StatusQueryRequest)(nil),                             // 2: eganow.api.pay_partner.StatusQueryRequest
	(*StatusQueryResponse)(nil),                            // 3: eganow.api.pay_partner.StatusQueryResponse
	(*RemittanceTransferRequest)(nil),                      // 4: eganow.api.pay_partner.RemittanceTransferRequest
	(*MtnMomoTransactionCallbackRequest)(nil),              // 5: eganow.api.pay_partner.MtnMomoTransactionCallbackRequest
	(*MtnMomoOpenApiTransactionCallbackRequest)(nil),       // 6: eganow.api.pay_partner.MtnMomoOpenApiTransactionCallbackRequest
	(*GhipssRTPTransactionCallbackRequest)(nil),            // 7: eganow.api.pay_partner.GhipssRTPTransactionCallbackRequest
	(*AtMoneyTransactionCallbackRequest)(nil),              // 8: eganow.api.pay_partner.AtMoneyTransactionCallbackRequest
	(*ReverseTransactionRequest)(nil),                      // 9: eganow.api.pay_partner.ReverseTransactionRequest
	(*QrCreditTransactionWebServiceRequest)(nil),           // 10: eganow.api.pay_partner.QrCreditTransactionWebServiceRequest
	(*CollectionDebitTransactionWebServiceRequest)(nil),    // 11: eganow.api.pay_partner.CollectionDebitTransactionWebServiceRequest
	(*WebServiceResponse)(nil),                             // 12: eganow.api.pay_partner.WebServiceResponse
	(*FundTransferRequest_BankFundTransferRequest)(nil),    // 13: eganow.api.pay_partner.FundTransferRequest.BankFundTransferRequest
	(*StatusQueryRequest_BankStatusQueryRequest)(nil),      // 14: eganow.api.pay_partner.StatusQueryRequest.BankStatusQueryRequest
	(*StatusQueryRequest_MobileStatusQueryRequest)(nil),    // 15: eganow.api.pay_partner.StatusQueryRequest.MobileStatusQueryRequest
	(*MtnMomoTransactionCallbackRequest_ReceiverInfo)(nil), // 16: eganow.api.pay_partner.MtnMomoTransactionCallbackRequest.ReceiverInfo
	(*MtnMomoOpenApiTransactionCallbackRequest_Payer)(nil), // 17: eganow.api.pay_partner.MtnMomoOpenApiTransactionCallbackRequest.Payer
	(TransactionType)(0),                                   // 18: eganow.api.pay_partner.TransactionType
}
var file_eganow_api_pay_partner_fund_transfer_payload_proto_depIdxs = []int32{
	13, // 0: eganow.api.pay_partner.FundTransferRequest.bank_details:type_name -> eganow.api.pay_partner.FundTransferRequest.BankFundTransferRequest
	14, // 1: eganow.api.pay_partner.StatusQueryRequest.bank_details:type_name -> eganow.api.pay_partner.StatusQueryRequest.BankStatusQueryRequest
	15, // 2: eganow.api.pay_partner.StatusQueryRequest.mobile_details:type_name -> eganow.api.pay_partner.StatusQueryRequest.MobileStatusQueryRequest
	16, // 3: eganow.api.pay_partner.MtnMomoTransactionCallbackRequest.receiverInfo:type_name -> eganow.api.pay_partner.MtnMomoTransactionCallbackRequest.ReceiverInfo
	17, // 4: eganow.api.pay_partner.MtnMomoOpenApiTransactionCallbackRequest.payer:type_name -> eganow.api.pay_partner.MtnMomoOpenApiTransactionCallbackRequest.Payer
	18, // 5: eganow.api.pay_partner.StatusQueryRequest.MobileStatusQueryRequest.transaction_type:type_name -> eganow.api.pay_partner.TransactionType
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_eganow_api_pay_partner_fund_transfer_payload_proto_init() }
func file_eganow_api_pay_partner_fund_transfer_payload_proto_init() {
	if File_eganow_api_pay_partner_fund_transfer_payload_proto != nil {
		return
	}
	file_eganow_api_pay_partner_fund_transfer_entity_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemittanceTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MtnMomoTransactionCallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MtnMomoOpenApiTransactionCallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GhipssRTPTransactionCallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtMoneyTransactionCallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QrCreditTransactionWebServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionDebitTransactionWebServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundTransferRequest_BankFundTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusQueryRequest_BankStatusQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusQueryRequest_MobileStatusQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MtnMomoTransactionCallbackRequest_ReceiverInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MtnMomoOpenApiTransactionCallbackRequest_Payer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*FundTransferRequest_BankDetails)(nil),
		(*FundTransferRequest_MobileNumber)(nil),
	}
	file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*StatusQueryRequest_BankDetails)(nil),
		(*StatusQueryRequest_MobileDetails)(nil),
	}
	file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*FundTransferRequest_BankFundTransferRequest_Qrcode)(nil),
		(*FundTransferRequest_BankFundTransferRequest_TerminalId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eganow_api_pay_partner_fund_transfer_payload_proto_goTypes,
		DependencyIndexes: file_eganow_api_pay_partner_fund_transfer_payload_proto_depIdxs,
		MessageInfos:      file_eganow_api_pay_partner_fund_transfer_payload_proto_msgTypes,
	}.Build()
	File_eganow_api_pay_partner_fund_transfer_payload_proto = out.File
	file_eganow_api_pay_partner_fund_transfer_payload_proto_rawDesc = nil
	file_eganow_api_pay_partner_fund_transfer_payload_proto_goTypes = nil
	file_eganow_api_pay_partner_fund_transfer_payload_proto_depIdxs = nil
}
