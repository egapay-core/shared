// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/pay_partner/fund_transfer_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FundTransferSvc_QrCreditTransaction_FullMethodName               = "/eganow.api.pay_partner.FundTransferSvc/QrCreditTransaction"
	FundTransferSvc_CollectionDebitTransaction_FullMethodName        = "/eganow.api.pay_partner.FundTransferSvc/CollectionDebitTransaction"
	FundTransferSvc_PayoutCreditTransaction_FullMethodName           = "/eganow.api.pay_partner.FundTransferSvc/PayoutCreditTransaction"
	FundTransferSvc_QueryTransactionStatus_FullMethodName            = "/eganow.api.pay_partner.FundTransferSvc/QueryTransactionStatus"
	FundTransferSvc_RemittanceTransferFunds_FullMethodName           = "/eganow.api.pay_partner.FundTransferSvc/RemittanceTransferFunds"
	FundTransferSvc_MtnMomoTransactionCallback_FullMethodName        = "/eganow.api.pay_partner.FundTransferSvc/MtnMomoTransactionCallback"
	FundTransferSvc_MtnMomoOpenApiTransactionCallback_FullMethodName = "/eganow.api.pay_partner.FundTransferSvc/MtnMomoOpenApiTransactionCallback"
	FundTransferSvc_AtMoneyTransactionCallback_FullMethodName        = "/eganow.api.pay_partner.FundTransferSvc/AtMoneyTransactionCallback"
	FundTransferSvc_ReverseTransaction_FullMethodName                = "/eganow.api.pay_partner.FundTransferSvc/ReverseTransaction"
	FundTransferSvc_QrCreditTransactionWebService_FullMethodName     = "/eganow.api.pay_partner.FundTransferSvc/QrCreditTransactionWebService"
	FundTransferSvc_GhipssRTPTransactionCallback_FullMethodName      = "/eganow.api.pay_partner.FundTransferSvc/GhipssRTPTransactionCallback"
)

// FundTransferSvcClient is the client API for FundTransferSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FundTransferSvcClient interface {
	QrCreditTransaction(ctx context.Context, in *FundTransferRequest, opts ...grpc.CallOption) (*FundTransferResponse, error)
	// Receive money from a customer.
	CollectionDebitTransaction(ctx context.Context, in *FundTransferRequest, opts ...grpc.CallOption) (*FundTransferResponse, error)
	// Send money to a customer.
	PayoutCreditTransaction(ctx context.Context, in *FundTransferRequest, opts ...grpc.CallOption) (*FundTransferResponse, error)
	// Query transaction status.
	QueryTransactionStatus(ctx context.Context, in *StatusQueryRequest, opts ...grpc.CallOption) (*StatusQueryResponse, error)
	// Remittance transfer funds.
	RemittanceTransferFunds(ctx context.Context, in *RemittanceTransferRequest, opts ...grpc.CallOption) (*FundTransferResponse, error)
	// MtnMomoTransactionCallback callback from the partner.
	MtnMomoTransactionCallback(ctx context.Context, in *MtnMomoTransactionCallbackRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error)
	// MtnMomoTransactionCallback callback from the partner.
	MtnMomoOpenApiTransactionCallback(ctx context.Context, in *MtnMomoOpenApiTransactionCallbackRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error)
	AtMoneyTransactionCallback(ctx context.Context, in *AtMoneyTransactionCallbackRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error)
	ReverseTransaction(ctx context.Context, in *ReverseTransactionRequest, opts ...grpc.CallOption) (*WebServiceResponse, error)
	// QRC
	QrCreditTransactionWebService(ctx context.Context, in *QrCreditTransactionWebServiceRequest, opts ...grpc.CallOption) (*WebServiceResponse, error)
	// GhipssRTPTransactionCallback callback from the partner.
	GhipssRTPTransactionCallback(ctx context.Context, in *GhipssRTPTransactionCallbackRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error)
}

type fundTransferSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFundTransferSvcClient(cc grpc.ClientConnInterface) FundTransferSvcClient {
	return &fundTransferSvcClient{cc}
}

func (c *fundTransferSvcClient) QrCreditTransaction(ctx context.Context, in *FundTransferRequest, opts ...grpc.CallOption) (*FundTransferResponse, error) {
	out := new(FundTransferResponse)
	err := c.cc.Invoke(ctx, FundTransferSvc_QrCreditTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundTransferSvcClient) CollectionDebitTransaction(ctx context.Context, in *FundTransferRequest, opts ...grpc.CallOption) (*FundTransferResponse, error) {
	out := new(FundTransferResponse)
	err := c.cc.Invoke(ctx, FundTransferSvc_CollectionDebitTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundTransferSvcClient) PayoutCreditTransaction(ctx context.Context, in *FundTransferRequest, opts ...grpc.CallOption) (*FundTransferResponse, error) {
	out := new(FundTransferResponse)
	err := c.cc.Invoke(ctx, FundTransferSvc_PayoutCreditTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundTransferSvcClient) QueryTransactionStatus(ctx context.Context, in *StatusQueryRequest, opts ...grpc.CallOption) (*StatusQueryResponse, error) {
	out := new(StatusQueryResponse)
	err := c.cc.Invoke(ctx, FundTransferSvc_QueryTransactionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundTransferSvcClient) RemittanceTransferFunds(ctx context.Context, in *RemittanceTransferRequest, opts ...grpc.CallOption) (*FundTransferResponse, error) {
	out := new(FundTransferResponse)
	err := c.cc.Invoke(ctx, FundTransferSvc_RemittanceTransferFunds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundTransferSvcClient) MtnMomoTransactionCallback(ctx context.Context, in *MtnMomoTransactionCallbackRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error) {
	out := new(PayPartnerEmpty)
	err := c.cc.Invoke(ctx, FundTransferSvc_MtnMomoTransactionCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundTransferSvcClient) MtnMomoOpenApiTransactionCallback(ctx context.Context, in *MtnMomoOpenApiTransactionCallbackRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error) {
	out := new(PayPartnerEmpty)
	err := c.cc.Invoke(ctx, FundTransferSvc_MtnMomoOpenApiTransactionCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundTransferSvcClient) AtMoneyTransactionCallback(ctx context.Context, in *AtMoneyTransactionCallbackRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error) {
	out := new(PayPartnerEmpty)
	err := c.cc.Invoke(ctx, FundTransferSvc_AtMoneyTransactionCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundTransferSvcClient) ReverseTransaction(ctx context.Context, in *ReverseTransactionRequest, opts ...grpc.CallOption) (*WebServiceResponse, error) {
	out := new(WebServiceResponse)
	err := c.cc.Invoke(ctx, FundTransferSvc_ReverseTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundTransferSvcClient) QrCreditTransactionWebService(ctx context.Context, in *QrCreditTransactionWebServiceRequest, opts ...grpc.CallOption) (*WebServiceResponse, error) {
	out := new(WebServiceResponse)
	err := c.cc.Invoke(ctx, FundTransferSvc_QrCreditTransactionWebService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundTransferSvcClient) GhipssRTPTransactionCallback(ctx context.Context, in *GhipssRTPTransactionCallbackRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error) {
	out := new(PayPartnerEmpty)
	err := c.cc.Invoke(ctx, FundTransferSvc_GhipssRTPTransactionCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundTransferSvcServer is the server API for FundTransferSvc service.
// All implementations must embed UnimplementedFundTransferSvcServer
// for forward compatibility
type FundTransferSvcServer interface {
	QrCreditTransaction(context.Context, *FundTransferRequest) (*FundTransferResponse, error)
	// Receive money from a customer.
	CollectionDebitTransaction(context.Context, *FundTransferRequest) (*FundTransferResponse, error)
	// Send money to a customer.
	PayoutCreditTransaction(context.Context, *FundTransferRequest) (*FundTransferResponse, error)
	// Query transaction status.
	QueryTransactionStatus(context.Context, *StatusQueryRequest) (*StatusQueryResponse, error)
	// Remittance transfer funds.
	RemittanceTransferFunds(context.Context, *RemittanceTransferRequest) (*FundTransferResponse, error)
	// MtnMomoTransactionCallback callback from the partner.
	MtnMomoTransactionCallback(context.Context, *MtnMomoTransactionCallbackRequest) (*PayPartnerEmpty, error)
	// MtnMomoTransactionCallback callback from the partner.
	MtnMomoOpenApiTransactionCallback(context.Context, *MtnMomoOpenApiTransactionCallbackRequest) (*PayPartnerEmpty, error)
	AtMoneyTransactionCallback(context.Context, *AtMoneyTransactionCallbackRequest) (*PayPartnerEmpty, error)
	ReverseTransaction(context.Context, *ReverseTransactionRequest) (*WebServiceResponse, error)
	// QRC
	QrCreditTransactionWebService(context.Context, *QrCreditTransactionWebServiceRequest) (*WebServiceResponse, error)
	// GhipssRTPTransactionCallback callback from the partner.
	GhipssRTPTransactionCallback(context.Context, *GhipssRTPTransactionCallbackRequest) (*PayPartnerEmpty, error)
	mustEmbedUnimplementedFundTransferSvcServer()
}

// UnimplementedFundTransferSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFundTransferSvcServer struct {
}

func (UnimplementedFundTransferSvcServer) QrCreditTransaction(context.Context, *FundTransferRequest) (*FundTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QrCreditTransaction not implemented")
}
func (UnimplementedFundTransferSvcServer) CollectionDebitTransaction(context.Context, *FundTransferRequest) (*FundTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionDebitTransaction not implemented")
}
func (UnimplementedFundTransferSvcServer) PayoutCreditTransaction(context.Context, *FundTransferRequest) (*FundTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayoutCreditTransaction not implemented")
}
func (UnimplementedFundTransferSvcServer) QueryTransactionStatus(context.Context, *StatusQueryRequest) (*StatusQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTransactionStatus not implemented")
}
func (UnimplementedFundTransferSvcServer) RemittanceTransferFunds(context.Context, *RemittanceTransferRequest) (*FundTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemittanceTransferFunds not implemented")
}
func (UnimplementedFundTransferSvcServer) MtnMomoTransactionCallback(context.Context, *MtnMomoTransactionCallbackRequest) (*PayPartnerEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MtnMomoTransactionCallback not implemented")
}
func (UnimplementedFundTransferSvcServer) MtnMomoOpenApiTransactionCallback(context.Context, *MtnMomoOpenApiTransactionCallbackRequest) (*PayPartnerEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MtnMomoOpenApiTransactionCallback not implemented")
}
func (UnimplementedFundTransferSvcServer) AtMoneyTransactionCallback(context.Context, *AtMoneyTransactionCallbackRequest) (*PayPartnerEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtMoneyTransactionCallback not implemented")
}
func (UnimplementedFundTransferSvcServer) ReverseTransaction(context.Context, *ReverseTransactionRequest) (*WebServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseTransaction not implemented")
}
func (UnimplementedFundTransferSvcServer) QrCreditTransactionWebService(context.Context, *QrCreditTransactionWebServiceRequest) (*WebServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QrCreditTransactionWebService not implemented")
}
func (UnimplementedFundTransferSvcServer) GhipssRTPTransactionCallback(context.Context, *GhipssRTPTransactionCallbackRequest) (*PayPartnerEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GhipssRTPTransactionCallback not implemented")
}
func (UnimplementedFundTransferSvcServer) mustEmbedUnimplementedFundTransferSvcServer() {}

// UnsafeFundTransferSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundTransferSvcServer will
// result in compilation errors.
type UnsafeFundTransferSvcServer interface {
	mustEmbedUnimplementedFundTransferSvcServer()
}

func RegisterFundTransferSvcServer(s grpc.ServiceRegistrar, srv FundTransferSvcServer) {
	s.RegisterService(&FundTransferSvc_ServiceDesc, srv)
}

func _FundTransferSvc_QrCreditTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTransferSvcServer).QrCreditTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTransferSvc_QrCreditTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTransferSvcServer).QrCreditTransaction(ctx, req.(*FundTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundTransferSvc_CollectionDebitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTransferSvcServer).CollectionDebitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTransferSvc_CollectionDebitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTransferSvcServer).CollectionDebitTransaction(ctx, req.(*FundTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundTransferSvc_PayoutCreditTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTransferSvcServer).PayoutCreditTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTransferSvc_PayoutCreditTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTransferSvcServer).PayoutCreditTransaction(ctx, req.(*FundTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundTransferSvc_QueryTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTransferSvcServer).QueryTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTransferSvc_QueryTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTransferSvcServer).QueryTransactionStatus(ctx, req.(*StatusQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundTransferSvc_RemittanceTransferFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemittanceTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTransferSvcServer).RemittanceTransferFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTransferSvc_RemittanceTransferFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTransferSvcServer).RemittanceTransferFunds(ctx, req.(*RemittanceTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundTransferSvc_MtnMomoTransactionCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtnMomoTransactionCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTransferSvcServer).MtnMomoTransactionCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTransferSvc_MtnMomoTransactionCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTransferSvcServer).MtnMomoTransactionCallback(ctx, req.(*MtnMomoTransactionCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundTransferSvc_MtnMomoOpenApiTransactionCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MtnMomoOpenApiTransactionCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTransferSvcServer).MtnMomoOpenApiTransactionCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTransferSvc_MtnMomoOpenApiTransactionCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTransferSvcServer).MtnMomoOpenApiTransactionCallback(ctx, req.(*MtnMomoOpenApiTransactionCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundTransferSvc_AtMoneyTransactionCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtMoneyTransactionCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTransferSvcServer).AtMoneyTransactionCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTransferSvc_AtMoneyTransactionCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTransferSvcServer).AtMoneyTransactionCallback(ctx, req.(*AtMoneyTransactionCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundTransferSvc_ReverseTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTransferSvcServer).ReverseTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTransferSvc_ReverseTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTransferSvcServer).ReverseTransaction(ctx, req.(*ReverseTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundTransferSvc_QrCreditTransactionWebService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QrCreditTransactionWebServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTransferSvcServer).QrCreditTransactionWebService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTransferSvc_QrCreditTransactionWebService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTransferSvcServer).QrCreditTransactionWebService(ctx, req.(*QrCreditTransactionWebServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundTransferSvc_GhipssRTPTransactionCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GhipssRTPTransactionCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTransferSvcServer).GhipssRTPTransactionCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTransferSvc_GhipssRTPTransactionCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTransferSvcServer).GhipssRTPTransactionCallback(ctx, req.(*GhipssRTPTransactionCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FundTransferSvc_ServiceDesc is the grpc.ServiceDesc for FundTransferSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FundTransferSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.pay_partner.FundTransferSvc",
	HandlerType: (*FundTransferSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QrCreditTransaction",
			Handler:    _FundTransferSvc_QrCreditTransaction_Handler,
		},
		{
			MethodName: "CollectionDebitTransaction",
			Handler:    _FundTransferSvc_CollectionDebitTransaction_Handler,
		},
		{
			MethodName: "PayoutCreditTransaction",
			Handler:    _FundTransferSvc_PayoutCreditTransaction_Handler,
		},
		{
			MethodName: "QueryTransactionStatus",
			Handler:    _FundTransferSvc_QueryTransactionStatus_Handler,
		},
		{
			MethodName: "RemittanceTransferFunds",
			Handler:    _FundTransferSvc_RemittanceTransferFunds_Handler,
		},
		{
			MethodName: "MtnMomoTransactionCallback",
			Handler:    _FundTransferSvc_MtnMomoTransactionCallback_Handler,
		},
		{
			MethodName: "MtnMomoOpenApiTransactionCallback",
			Handler:    _FundTransferSvc_MtnMomoOpenApiTransactionCallback_Handler,
		},
		{
			MethodName: "AtMoneyTransactionCallback",
			Handler:    _FundTransferSvc_AtMoneyTransactionCallback_Handler,
		},
		{
			MethodName: "ReverseTransaction",
			Handler:    _FundTransferSvc_ReverseTransaction_Handler,
		},
		{
			MethodName: "QrCreditTransactionWebService",
			Handler:    _FundTransferSvc_QrCreditTransactionWebService_Handler,
		},
		{
			MethodName: "GhipssRTPTransactionCallback",
			Handler:    _FundTransferSvc_GhipssRTPTransactionCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/pay_partner/fund_transfer_service.proto",
}
