// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/pay_partner/merchant_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MerchantSvc_CreateMerchant_FullMethodName   = "/eganow.api.pay_partner.MerchantSvc/CreateMerchant"
	MerchantSvc_UpdateMerchant_FullMethodName   = "/eganow.api.pay_partner.MerchantSvc/UpdateMerchant"
	MerchantSvc_DeleteMerchant_FullMethodName   = "/eganow.api.pay_partner.MerchantSvc/DeleteMerchant"
	MerchantSvc_GetMerchant_FullMethodName      = "/eganow.api.pay_partner.MerchantSvc/GetMerchant"
	MerchantSvc_ListAllMerchants_FullMethodName = "/eganow.api.pay_partner.MerchantSvc/ListAllMerchants"
)

// MerchantSvcClient is the client API for MerchantSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantSvcClient interface {
	CreateMerchant(ctx context.Context, in *CreateOrUpdateMerchantRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error)
	UpdateMerchant(ctx context.Context, in *CreateOrUpdateMerchantRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error)
	DeleteMerchant(ctx context.Context, in *PayPartnerStringValue, opts ...grpc.CallOption) (*PayPartnerEmpty, error)
	GetMerchant(ctx context.Context, in *PayPartnerStringValue, opts ...grpc.CallOption) (*MerchantPayload, error)
	ListAllMerchants(ctx context.Context, in *PayPartnerEmpty, opts ...grpc.CallOption) (*ListMerchantsResponse, error)
}

type merchantSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantSvcClient(cc grpc.ClientConnInterface) MerchantSvcClient {
	return &merchantSvcClient{cc}
}

func (c *merchantSvcClient) CreateMerchant(ctx context.Context, in *CreateOrUpdateMerchantRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error) {
	out := new(PayPartnerEmpty)
	err := c.cc.Invoke(ctx, MerchantSvc_CreateMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantSvcClient) UpdateMerchant(ctx context.Context, in *CreateOrUpdateMerchantRequest, opts ...grpc.CallOption) (*PayPartnerEmpty, error) {
	out := new(PayPartnerEmpty)
	err := c.cc.Invoke(ctx, MerchantSvc_UpdateMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantSvcClient) DeleteMerchant(ctx context.Context, in *PayPartnerStringValue, opts ...grpc.CallOption) (*PayPartnerEmpty, error) {
	out := new(PayPartnerEmpty)
	err := c.cc.Invoke(ctx, MerchantSvc_DeleteMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantSvcClient) GetMerchant(ctx context.Context, in *PayPartnerStringValue, opts ...grpc.CallOption) (*MerchantPayload, error) {
	out := new(MerchantPayload)
	err := c.cc.Invoke(ctx, MerchantSvc_GetMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantSvcClient) ListAllMerchants(ctx context.Context, in *PayPartnerEmpty, opts ...grpc.CallOption) (*ListMerchantsResponse, error) {
	out := new(ListMerchantsResponse)
	err := c.cc.Invoke(ctx, MerchantSvc_ListAllMerchants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantSvcServer is the server API for MerchantSvc service.
// All implementations must embed UnimplementedMerchantSvcServer
// for forward compatibility
type MerchantSvcServer interface {
	CreateMerchant(context.Context, *CreateOrUpdateMerchantRequest) (*PayPartnerEmpty, error)
	UpdateMerchant(context.Context, *CreateOrUpdateMerchantRequest) (*PayPartnerEmpty, error)
	DeleteMerchant(context.Context, *PayPartnerStringValue) (*PayPartnerEmpty, error)
	GetMerchant(context.Context, *PayPartnerStringValue) (*MerchantPayload, error)
	ListAllMerchants(context.Context, *PayPartnerEmpty) (*ListMerchantsResponse, error)
	mustEmbedUnimplementedMerchantSvcServer()
}

// UnimplementedMerchantSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMerchantSvcServer struct {
}

func (UnimplementedMerchantSvcServer) CreateMerchant(context.Context, *CreateOrUpdateMerchantRequest) (*PayPartnerEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchant not implemented")
}
func (UnimplementedMerchantSvcServer) UpdateMerchant(context.Context, *CreateOrUpdateMerchantRequest) (*PayPartnerEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchant not implemented")
}
func (UnimplementedMerchantSvcServer) DeleteMerchant(context.Context, *PayPartnerStringValue) (*PayPartnerEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMerchant not implemented")
}
func (UnimplementedMerchantSvcServer) GetMerchant(context.Context, *PayPartnerStringValue) (*MerchantPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchant not implemented")
}
func (UnimplementedMerchantSvcServer) ListAllMerchants(context.Context, *PayPartnerEmpty) (*ListMerchantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllMerchants not implemented")
}
func (UnimplementedMerchantSvcServer) mustEmbedUnimplementedMerchantSvcServer() {}

// UnsafeMerchantSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantSvcServer will
// result in compilation errors.
type UnsafeMerchantSvcServer interface {
	mustEmbedUnimplementedMerchantSvcServer()
}

func RegisterMerchantSvcServer(s grpc.ServiceRegistrar, srv MerchantSvcServer) {
	s.RegisterService(&MerchantSvc_ServiceDesc, srv)
}

func _MerchantSvc_CreateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantSvcServer).CreateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantSvc_CreateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantSvcServer).CreateMerchant(ctx, req.(*CreateOrUpdateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantSvc_UpdateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantSvcServer).UpdateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantSvc_UpdateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantSvcServer).UpdateMerchant(ctx, req.(*CreateOrUpdateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantSvc_DeleteMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayPartnerStringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantSvcServer).DeleteMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantSvc_DeleteMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantSvcServer).DeleteMerchant(ctx, req.(*PayPartnerStringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantSvc_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayPartnerStringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantSvcServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantSvc_GetMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantSvcServer).GetMerchant(ctx, req.(*PayPartnerStringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantSvc_ListAllMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayPartnerEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantSvcServer).ListAllMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantSvc_ListAllMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantSvcServer).ListAllMerchants(ctx, req.(*PayPartnerEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantSvc_ServiceDesc is the grpc.ServiceDesc for MerchantSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.pay_partner.MerchantSvc",
	HandlerType: (*MerchantSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMerchant",
			Handler:    _MerchantSvc_CreateMerchant_Handler,
		},
		{
			MethodName: "UpdateMerchant",
			Handler:    _MerchantSvc_UpdateMerchant_Handler,
		},
		{
			MethodName: "DeleteMerchant",
			Handler:    _MerchantSvc_DeleteMerchant_Handler,
		},
		{
			MethodName: "GetMerchant",
			Handler:    _MerchantSvc_GetMerchant_Handler,
		},
		{
			MethodName: "ListAllMerchants",
			Handler:    _MerchantSvc_ListAllMerchants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/pay_partner/merchant_service.proto",
}
