// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/pay_partner/name_enquiry_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NameEnquirySvc_GetAccountHolderName_FullMethodName   = "/eganow.api.pay_partner.NameEnquirySvc/GetAccountHolderName"
	NameEnquirySvc_GetQrAccountHolderName_FullMethodName = "/eganow.api.pay_partner.NameEnquirySvc/GetQrAccountHolderName"
)

// NameEnquirySvcClient is the client API for NameEnquirySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameEnquirySvcClient interface {
	// GetCustomerName returns the name of the account holder
	GetAccountHolderName(ctx context.Context, in *NameEnquiryRequest, opts ...grpc.CallOption) (*PayPartnerStringValue, error)
	GetQrAccountHolderName(ctx context.Context, in *NameEnquiryRequest, opts ...grpc.CallOption) (*QrNameEnquiryResponse, error)
}

type nameEnquirySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewNameEnquirySvcClient(cc grpc.ClientConnInterface) NameEnquirySvcClient {
	return &nameEnquirySvcClient{cc}
}

func (c *nameEnquirySvcClient) GetAccountHolderName(ctx context.Context, in *NameEnquiryRequest, opts ...grpc.CallOption) (*PayPartnerStringValue, error) {
	out := new(PayPartnerStringValue)
	err := c.cc.Invoke(ctx, NameEnquirySvc_GetAccountHolderName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameEnquirySvcClient) GetQrAccountHolderName(ctx context.Context, in *NameEnquiryRequest, opts ...grpc.CallOption) (*QrNameEnquiryResponse, error) {
	out := new(QrNameEnquiryResponse)
	err := c.cc.Invoke(ctx, NameEnquirySvc_GetQrAccountHolderName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameEnquirySvcServer is the server API for NameEnquirySvc service.
// All implementations must embed UnimplementedNameEnquirySvcServer
// for forward compatibility
type NameEnquirySvcServer interface {
	// GetCustomerName returns the name of the account holder
	GetAccountHolderName(context.Context, *NameEnquiryRequest) (*PayPartnerStringValue, error)
	GetQrAccountHolderName(context.Context, *NameEnquiryRequest) (*QrNameEnquiryResponse, error)
	mustEmbedUnimplementedNameEnquirySvcServer()
}

// UnimplementedNameEnquirySvcServer must be embedded to have forward compatible implementations.
type UnimplementedNameEnquirySvcServer struct {
}

func (UnimplementedNameEnquirySvcServer) GetAccountHolderName(context.Context, *NameEnquiryRequest) (*PayPartnerStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountHolderName not implemented")
}
func (UnimplementedNameEnquirySvcServer) GetQrAccountHolderName(context.Context, *NameEnquiryRequest) (*QrNameEnquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQrAccountHolderName not implemented")
}
func (UnimplementedNameEnquirySvcServer) mustEmbedUnimplementedNameEnquirySvcServer() {}

// UnsafeNameEnquirySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameEnquirySvcServer will
// result in compilation errors.
type UnsafeNameEnquirySvcServer interface {
	mustEmbedUnimplementedNameEnquirySvcServer()
}

func RegisterNameEnquirySvcServer(s grpc.ServiceRegistrar, srv NameEnquirySvcServer) {
	s.RegisterService(&NameEnquirySvc_ServiceDesc, srv)
}

func _NameEnquirySvc_GetAccountHolderName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameEnquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameEnquirySvcServer).GetAccountHolderName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameEnquirySvc_GetAccountHolderName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameEnquirySvcServer).GetAccountHolderName(ctx, req.(*NameEnquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameEnquirySvc_GetQrAccountHolderName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameEnquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameEnquirySvcServer).GetQrAccountHolderName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameEnquirySvc_GetQrAccountHolderName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameEnquirySvcServer).GetQrAccountHolderName(ctx, req.(*NameEnquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameEnquirySvc_ServiceDesc is the grpc.ServiceDesc for NameEnquirySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameEnquirySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.pay_partner.NameEnquirySvc",
	HandlerType: (*NameEnquirySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountHolderName",
			Handler:    _NameEnquirySvc_GetAccountHolderName_Handler,
		},
		{
			MethodName: "GetQrAccountHolderName",
			Handler:    _NameEnquirySvc_GetQrAccountHolderName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/pay_partner/name_enquiry_service.proto",
}
