// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/pay_partner/card_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CardSvc_GetCardDetails_FullMethodName      = "/eganow.api.pay_partner.CardSvc/GetCardDetails"
	CardSvc_CreateCard_FullMethodName          = "/eganow.api.pay_partner.CardSvc/CreateCard"
	CardSvc_GetCardTransactions_FullMethodName = "/eganow.api.pay_partner.CardSvc/GetCardTransactions"
)

// CardSvcClient is the client API for CardSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardSvcClient interface {
	// GetCardDetails returns the details of a card
	GetCardDetails(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*GetCardResponse, error)
	// CreateCard creates a new card (create client, create account and then create card)
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error)
	// GetCardTransactions returns the transactions made on a card
	GetCardTransactions(ctx context.Context, in *GetCardTransactionsRequest, opts ...grpc.CallOption) (*CardTransactionList, error)
}

type cardSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCardSvcClient(cc grpc.ClientConnInterface) CardSvcClient {
	return &cardSvcClient{cc}
}

func (c *cardSvcClient) GetCardDetails(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*GetCardResponse, error) {
	out := new(GetCardResponse)
	err := c.cc.Invoke(ctx, CardSvc_GetCardDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardSvcClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error) {
	out := new(CreateCardResponse)
	err := c.cc.Invoke(ctx, CardSvc_CreateCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardSvcClient) GetCardTransactions(ctx context.Context, in *GetCardTransactionsRequest, opts ...grpc.CallOption) (*CardTransactionList, error) {
	out := new(CardTransactionList)
	err := c.cc.Invoke(ctx, CardSvc_GetCardTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardSvcServer is the server API for CardSvc service.
// All implementations must embed UnimplementedCardSvcServer
// for forward compatibility
type CardSvcServer interface {
	// GetCardDetails returns the details of a card
	GetCardDetails(context.Context, *GetCardRequest) (*GetCardResponse, error)
	// CreateCard creates a new card (create client, create account and then create card)
	CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error)
	// GetCardTransactions returns the transactions made on a card
	GetCardTransactions(context.Context, *GetCardTransactionsRequest) (*CardTransactionList, error)
	mustEmbedUnimplementedCardSvcServer()
}

// UnimplementedCardSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCardSvcServer struct {
}

func (UnimplementedCardSvcServer) GetCardDetails(context.Context, *GetCardRequest) (*GetCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardDetails not implemented")
}
func (UnimplementedCardSvcServer) CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedCardSvcServer) GetCardTransactions(context.Context, *GetCardTransactionsRequest) (*CardTransactionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardTransactions not implemented")
}
func (UnimplementedCardSvcServer) mustEmbedUnimplementedCardSvcServer() {}

// UnsafeCardSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardSvcServer will
// result in compilation errors.
type UnsafeCardSvcServer interface {
	mustEmbedUnimplementedCardSvcServer()
}

func RegisterCardSvcServer(s grpc.ServiceRegistrar, srv CardSvcServer) {
	s.RegisterService(&CardSvc_ServiceDesc, srv)
}

func _CardSvc_GetCardDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardSvcServer).GetCardDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardSvc_GetCardDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardSvcServer).GetCardDetails(ctx, req.(*GetCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardSvc_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardSvcServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardSvc_CreateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardSvcServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardSvc_GetCardTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardSvcServer).GetCardTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardSvc_GetCardTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardSvcServer).GetCardTransactions(ctx, req.(*GetCardTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardSvc_ServiceDesc is the grpc.ServiceDesc for CardSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.pay_partner.CardSvc",
	HandlerType: (*CardSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCardDetails",
			Handler:    _CardSvc_GetCardDetails_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _CardSvc_CreateCard_Handler,
		},
		{
			MethodName: "GetCardTransactions",
			Handler:    _CardSvc_GetCardTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/pay_partner/card_service.proto",
}
