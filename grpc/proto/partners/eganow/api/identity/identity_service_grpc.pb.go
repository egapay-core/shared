// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/identity/identity_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QoreIdentitySvc_QoreIdCallback_FullMethodName = "/eganow.api.identity.QoreIdentitySvc/QoreIdCallback"
)

// QoreIdentitySvcClient is the client API for QoreIdentitySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QoreIdentitySvcClient interface {
	QoreIdCallback(ctx context.Context, in *QoreIdCallbackRequest, opts ...grpc.CallOption) (*IdentityStringValue, error)
}

type qoreIdentitySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewQoreIdentitySvcClient(cc grpc.ClientConnInterface) QoreIdentitySvcClient {
	return &qoreIdentitySvcClient{cc}
}

func (c *qoreIdentitySvcClient) QoreIdCallback(ctx context.Context, in *QoreIdCallbackRequest, opts ...grpc.CallOption) (*IdentityStringValue, error) {
	out := new(IdentityStringValue)
	err := c.cc.Invoke(ctx, QoreIdentitySvc_QoreIdCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QoreIdentitySvcServer is the server API for QoreIdentitySvc service.
// All implementations must embed UnimplementedQoreIdentitySvcServer
// for forward compatibility
type QoreIdentitySvcServer interface {
	QoreIdCallback(context.Context, *QoreIdCallbackRequest) (*IdentityStringValue, error)
	mustEmbedUnimplementedQoreIdentitySvcServer()
}

// UnimplementedQoreIdentitySvcServer must be embedded to have forward compatible implementations.
type UnimplementedQoreIdentitySvcServer struct {
}

func (UnimplementedQoreIdentitySvcServer) QoreIdCallback(context.Context, *QoreIdCallbackRequest) (*IdentityStringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QoreIdCallback not implemented")
}
func (UnimplementedQoreIdentitySvcServer) mustEmbedUnimplementedQoreIdentitySvcServer() {}

// UnsafeQoreIdentitySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QoreIdentitySvcServer will
// result in compilation errors.
type UnsafeQoreIdentitySvcServer interface {
	mustEmbedUnimplementedQoreIdentitySvcServer()
}

func RegisterQoreIdentitySvcServer(s grpc.ServiceRegistrar, srv QoreIdentitySvcServer) {
	s.RegisterService(&QoreIdentitySvc_ServiceDesc, srv)
}

func _QoreIdentitySvc_QoreIdCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QoreIdCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QoreIdentitySvcServer).QoreIdCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QoreIdentitySvc_QoreIdCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QoreIdentitySvcServer).QoreIdCallback(ctx, req.(*QoreIdCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QoreIdentitySvc_ServiceDesc is the grpc.ServiceDesc for QoreIdentitySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QoreIdentitySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.identity.QoreIdentitySvc",
	HandlerType: (*QoreIdentitySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QoreIdCallback",
			Handler:    _QoreIdentitySvc_QoreIdCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/identity/identity_service.proto",
}

const (
	NiaIdentitySvc_NiaIdentityData_FullMethodName = "/eganow.api.identity.NiaIdentitySvc/NiaIdentityData"
)

// NiaIdentitySvcClient is the client API for NiaIdentitySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NiaIdentitySvcClient interface {
	NiaIdentityData(ctx context.Context, in *NiaRequest, opts ...grpc.CallOption) (*NiaResponse, error)
}

type niaIdentitySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewNiaIdentitySvcClient(cc grpc.ClientConnInterface) NiaIdentitySvcClient {
	return &niaIdentitySvcClient{cc}
}

func (c *niaIdentitySvcClient) NiaIdentityData(ctx context.Context, in *NiaRequest, opts ...grpc.CallOption) (*NiaResponse, error) {
	out := new(NiaResponse)
	err := c.cc.Invoke(ctx, NiaIdentitySvc_NiaIdentityData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NiaIdentitySvcServer is the server API for NiaIdentitySvc service.
// All implementations must embed UnimplementedNiaIdentitySvcServer
// for forward compatibility
type NiaIdentitySvcServer interface {
	NiaIdentityData(context.Context, *NiaRequest) (*NiaResponse, error)
	mustEmbedUnimplementedNiaIdentitySvcServer()
}

// UnimplementedNiaIdentitySvcServer must be embedded to have forward compatible implementations.
type UnimplementedNiaIdentitySvcServer struct {
}

func (UnimplementedNiaIdentitySvcServer) NiaIdentityData(context.Context, *NiaRequest) (*NiaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NiaIdentityData not implemented")
}
func (UnimplementedNiaIdentitySvcServer) mustEmbedUnimplementedNiaIdentitySvcServer() {}

// UnsafeNiaIdentitySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NiaIdentitySvcServer will
// result in compilation errors.
type UnsafeNiaIdentitySvcServer interface {
	mustEmbedUnimplementedNiaIdentitySvcServer()
}

func RegisterNiaIdentitySvcServer(s grpc.ServiceRegistrar, srv NiaIdentitySvcServer) {
	s.RegisterService(&NiaIdentitySvc_ServiceDesc, srv)
}

func _NiaIdentitySvc_NiaIdentityData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NiaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NiaIdentitySvcServer).NiaIdentityData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NiaIdentitySvc_NiaIdentityData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NiaIdentitySvcServer).NiaIdentityData(ctx, req.(*NiaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NiaIdentitySvc_ServiceDesc is the grpc.ServiceDesc for NiaIdentitySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NiaIdentitySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eganow.api.identity.NiaIdentitySvc",
	HandlerType: (*NiaIdentitySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NiaIdentityData",
			Handler:    _NiaIdentitySvc_NiaIdentityData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/identity/identity_service.proto",
}
