// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/core/CardAuthentication.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CardAuthenticationSvc_AuthenticateCardTransactionWith3Ds_FullMethodName            = "/CardAuthentication.CardAuthenticationSvc/AuthenticateCardTransactionWith3ds"
	CardAuthenticationSvc_CheckCardForThreeDSToAddAsEganowPaymentMethod_FullMethodName = "/CardAuthentication.CardAuthenticationSvc/CheckCardForThreeDSToAddAsEganowPaymentMethod"
)

// CardAuthenticationSvcClient is the client API for CardAuthenticationSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardAuthenticationSvcClient interface {
	AuthenticateCardTransactionWith3Ds(ctx context.Context, in *Card3DsInputDataRequestMessage, opts ...grpc.CallOption) (*Card3DsDataResponseMessage, error)
	CheckCardForThreeDSToAddAsEganowPaymentMethod(ctx context.Context, in *Card3DsInputDataRequestMessage, opts ...grpc.CallOption) (*Card3DsDataResponseMessage, error)
}

type cardAuthenticationSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCardAuthenticationSvcClient(cc grpc.ClientConnInterface) CardAuthenticationSvcClient {
	return &cardAuthenticationSvcClient{cc}
}

func (c *cardAuthenticationSvcClient) AuthenticateCardTransactionWith3Ds(ctx context.Context, in *Card3DsInputDataRequestMessage, opts ...grpc.CallOption) (*Card3DsDataResponseMessage, error) {
	out := new(Card3DsDataResponseMessage)
	err := c.cc.Invoke(ctx, CardAuthenticationSvc_AuthenticateCardTransactionWith3Ds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardAuthenticationSvcClient) CheckCardForThreeDSToAddAsEganowPaymentMethod(ctx context.Context, in *Card3DsInputDataRequestMessage, opts ...grpc.CallOption) (*Card3DsDataResponseMessage, error) {
	out := new(Card3DsDataResponseMessage)
	err := c.cc.Invoke(ctx, CardAuthenticationSvc_CheckCardForThreeDSToAddAsEganowPaymentMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardAuthenticationSvcServer is the server API for CardAuthenticationSvc service.
// All implementations must embed UnimplementedCardAuthenticationSvcServer
// for forward compatibility
type CardAuthenticationSvcServer interface {
	AuthenticateCardTransactionWith3Ds(context.Context, *Card3DsInputDataRequestMessage) (*Card3DsDataResponseMessage, error)
	CheckCardForThreeDSToAddAsEganowPaymentMethod(context.Context, *Card3DsInputDataRequestMessage) (*Card3DsDataResponseMessage, error)
	mustEmbedUnimplementedCardAuthenticationSvcServer()
}

// UnimplementedCardAuthenticationSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCardAuthenticationSvcServer struct {
}

func (UnimplementedCardAuthenticationSvcServer) AuthenticateCardTransactionWith3Ds(context.Context, *Card3DsInputDataRequestMessage) (*Card3DsDataResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateCardTransactionWith3Ds not implemented")
}
func (UnimplementedCardAuthenticationSvcServer) CheckCardForThreeDSToAddAsEganowPaymentMethod(context.Context, *Card3DsInputDataRequestMessage) (*Card3DsDataResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCardForThreeDSToAddAsEganowPaymentMethod not implemented")
}
func (UnimplementedCardAuthenticationSvcServer) mustEmbedUnimplementedCardAuthenticationSvcServer() {}

// UnsafeCardAuthenticationSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardAuthenticationSvcServer will
// result in compilation errors.
type UnsafeCardAuthenticationSvcServer interface {
	mustEmbedUnimplementedCardAuthenticationSvcServer()
}

func RegisterCardAuthenticationSvcServer(s grpc.ServiceRegistrar, srv CardAuthenticationSvcServer) {
	s.RegisterService(&CardAuthenticationSvc_ServiceDesc, srv)
}

func _CardAuthenticationSvc_AuthenticateCardTransactionWith3Ds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card3DsInputDataRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardAuthenticationSvcServer).AuthenticateCardTransactionWith3Ds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardAuthenticationSvc_AuthenticateCardTransactionWith3Ds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardAuthenticationSvcServer).AuthenticateCardTransactionWith3Ds(ctx, req.(*Card3DsInputDataRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardAuthenticationSvc_CheckCardForThreeDSToAddAsEganowPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card3DsInputDataRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardAuthenticationSvcServer).CheckCardForThreeDSToAddAsEganowPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardAuthenticationSvc_CheckCardForThreeDSToAddAsEganowPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardAuthenticationSvcServer).CheckCardForThreeDSToAddAsEganowPaymentMethod(ctx, req.(*Card3DsInputDataRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// CardAuthenticationSvc_ServiceDesc is the grpc.ServiceDesc for CardAuthenticationSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardAuthenticationSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CardAuthentication.CardAuthenticationSvc",
	HandlerType: (*CardAuthenticationSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateCardTransactionWith3ds",
			Handler:    _CardAuthenticationSvc_AuthenticateCardTransactionWith3Ds_Handler,
		},
		{
			MethodName: "CheckCardForThreeDSToAddAsEganowPaymentMethod",
			Handler:    _CardAuthenticationSvc_CheckCardForThreeDSToAddAsEganowPaymentMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/core/CardAuthentication.proto",
}
