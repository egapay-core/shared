// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: eganow/api/core/EganowPaypartnerCallBack.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EganowPaypartnerCallBackSvc_ConfirmSenderPaypartnerTransactionStatus_FullMethodName = "/EganowPaypartnerCallBack.EganowPaypartnerCallBackSvc/ConfirmSenderPaypartnerTransactionStatus"
)

// EganowPaypartnerCallBackSvcClient is the client API for EganowPaypartnerCallBackSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EganowPaypartnerCallBackSvcClient interface {
	// //------ money transfer service
	ConfirmSenderPaypartnerTransactionStatus(ctx context.Context, in *EganowPaypartnerCallRequestMessage, opts ...grpc.CallOption) (*EganowPaypartnerCallBackEmptyMessage, error)
}

type eganowPaypartnerCallBackSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewEganowPaypartnerCallBackSvcClient(cc grpc.ClientConnInterface) EganowPaypartnerCallBackSvcClient {
	return &eganowPaypartnerCallBackSvcClient{cc}
}

func (c *eganowPaypartnerCallBackSvcClient) ConfirmSenderPaypartnerTransactionStatus(ctx context.Context, in *EganowPaypartnerCallRequestMessage, opts ...grpc.CallOption) (*EganowPaypartnerCallBackEmptyMessage, error) {
	out := new(EganowPaypartnerCallBackEmptyMessage)
	err := c.cc.Invoke(ctx, EganowPaypartnerCallBackSvc_ConfirmSenderPaypartnerTransactionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EganowPaypartnerCallBackSvcServer is the server API for EganowPaypartnerCallBackSvc service.
// All implementations must embed UnimplementedEganowPaypartnerCallBackSvcServer
// for forward compatibility
type EganowPaypartnerCallBackSvcServer interface {
	// //------ money transfer service
	ConfirmSenderPaypartnerTransactionStatus(context.Context, *EganowPaypartnerCallRequestMessage) (*EganowPaypartnerCallBackEmptyMessage, error)
	mustEmbedUnimplementedEganowPaypartnerCallBackSvcServer()
}

// UnimplementedEganowPaypartnerCallBackSvcServer must be embedded to have forward compatible implementations.
type UnimplementedEganowPaypartnerCallBackSvcServer struct {
}

func (UnimplementedEganowPaypartnerCallBackSvcServer) ConfirmSenderPaypartnerTransactionStatus(context.Context, *EganowPaypartnerCallRequestMessage) (*EganowPaypartnerCallBackEmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmSenderPaypartnerTransactionStatus not implemented")
}
func (UnimplementedEganowPaypartnerCallBackSvcServer) mustEmbedUnimplementedEganowPaypartnerCallBackSvcServer() {
}

// UnsafeEganowPaypartnerCallBackSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EganowPaypartnerCallBackSvcServer will
// result in compilation errors.
type UnsafeEganowPaypartnerCallBackSvcServer interface {
	mustEmbedUnimplementedEganowPaypartnerCallBackSvcServer()
}

func RegisterEganowPaypartnerCallBackSvcServer(s grpc.ServiceRegistrar, srv EganowPaypartnerCallBackSvcServer) {
	s.RegisterService(&EganowPaypartnerCallBackSvc_ServiceDesc, srv)
}

func _EganowPaypartnerCallBackSvc_ConfirmSenderPaypartnerTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EganowPaypartnerCallRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EganowPaypartnerCallBackSvcServer).ConfirmSenderPaypartnerTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EganowPaypartnerCallBackSvc_ConfirmSenderPaypartnerTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EganowPaypartnerCallBackSvcServer).ConfirmSenderPaypartnerTransactionStatus(ctx, req.(*EganowPaypartnerCallRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// EganowPaypartnerCallBackSvc_ServiceDesc is the grpc.ServiceDesc for EganowPaypartnerCallBackSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EganowPaypartnerCallBackSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EganowPaypartnerCallBack.EganowPaypartnerCallBackSvc",
	HandlerType: (*EganowPaypartnerCallBackSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmSenderPaypartnerTransactionStatus",
			Handler:    _EganowPaypartnerCallBackSvc_ConfirmSenderPaypartnerTransactionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eganow/api/core/EganowPaypartnerCallBack.proto",
}
